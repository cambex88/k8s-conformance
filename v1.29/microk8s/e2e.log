  I0220 23:00:49.936836      22 e2e.go:117] Starting e2e run "6a258d42-5a93-49fd-a4d2-3dbb83b506fb" on Ginkgo node 1
  Feb 20 23:00:49.965: INFO: Enabling in-tree volume drivers
Running Suite: Kubernetes e2e suite - /usr/local/bin
====================================================
Random Seed: 1708470049 - will randomize all specs

Will run 380 of 7389 specs
------------------------------
[ReportBeforeSuite] 
test/e2e/e2e_test.go:153
[ReportBeforeSuite] PASSED [0.000 seconds]
------------------------------
[SynchronizedBeforeSuite] 
test/e2e/e2e.go:77
  Feb 20 23:00:50.111: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:00:50.112: INFO: Waiting up to 30m0s for all (but 0) nodes to be schedulable
  Feb 20 23:00:50.133: INFO: Waiting up to 5m0s for all daemonsets in namespace 'kube-system' to start
  Feb 20 23:00:50.136: INFO: 2 / 2 pods ready in namespace 'kube-system' in daemonset 'calico-node' (0 seconds elapsed)
  Feb 20 23:00:50.136: INFO: e2e test version: v1.28.7
  Feb 20 23:00:50.136: INFO: kube-apiserver version: v1.28.7
  Feb 20 23:00:50.137: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:00:50.139: INFO: Cluster IP family: ipv4
[SynchronizedBeforeSuite] PASSED [0.028 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Hostname [Conformance]
test/e2e/network/dns.go:244
  STEP: Creating a kubernetes client @ 02/20/24 23:00:50.33
  Feb 20 23:00:50.330: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/20/24 23:00:50.33
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:00:50.347
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:00:50.349
  STEP: Creating a test headless service @ 02/20/24 23:00:50.352
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-4943.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-2.dns-test-service-2.dns-4943.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/wheezy_hosts@dns-querier-2;sleep 1; done
   @ 02/20/24 23:00:50.358
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-2.dns-test-service-2.dns-4943.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-2.dns-test-service-2.dns-4943.svc.cluster.local;test -n "$$(getent hosts dns-querier-2)" && echo OK > /results/jessie_hosts@dns-querier-2;sleep 1; done
   @ 02/20/24 23:00:50.358
  STEP: creating a pod to probe DNS @ 02/20/24 23:00:50.359
  STEP: submitting the pod to kubernetes @ 02/20/24 23:00:50.359
  STEP: retrieving the pod @ 02/20/24 23:01:14.427
  STEP: looking for the results for each expected name from probers @ 02/20/24 23:01:14.433
  Feb 20 23:01:14.472: INFO: Unable to read jessie_hosts@dns-querier-2 from pod dns-4943/dns-test-ea417e0e-bb19-4260-80a7-c96cd07c3d7b: the server could not find the requested resource (get pods dns-test-ea417e0e-bb19-4260-80a7-c96cd07c3d7b)
  Feb 20 23:01:14.472: INFO: Lookups using dns-4943/dns-test-ea417e0e-bb19-4260-80a7-c96cd07c3d7b failed for: [jessie_hosts@dns-querier-2]

  Feb 20 23:01:14.508: INFO: Pod client logs for webserver: 
  Feb 20 23:01:14.523: INFO: Pod client logs for querier: 
  Feb 20 23:01:14.537: INFO: Pod client logs for jessie-querier: 
  Feb 20 23:01:19.576: INFO: DNS probes using dns-4943/dns-test-ea417e0e-bb19-4260-80a7-c96cd07c3d7b succeeded

  Feb 20 23:01:19.576: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:01:19.585
  STEP: deleting the test headless service @ 02/20/24 23:01:19.628
  STEP: Destroying namespace "dns-4943" for this suite. @ 02/20/24 23:01:19.675
• [29.354 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing mutating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:646
  STEP: Creating a kubernetes client @ 02/20/24 23:01:19.685
  Feb 20 23:01:19.685: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:01:19.686
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:01:19.763
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:01:19.769
  STEP: Setting up server cert @ 02/20/24 23:01:19.834
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:01:20.053
  STEP: Deploying the webhook pod @ 02/20/24 23:01:20.061
  STEP: Wait for the deployment to be ready @ 02/20/24 23:01:20.072
  Feb 20 23:01:20.076: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:01:22.099
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:01:22.132
  Feb 20 23:01:23.132: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 02/20/24 23:01:23.311
  STEP: Creating a configMap that should be mutated @ 02/20/24 23:01:23.323
  STEP: Deleting the collection of validation webhooks @ 02/20/24 23:01:23.35
  STEP: Creating a configMap that should not be mutated @ 02/20/24 23:01:23.406
  Feb 20 23:01:23.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-454" for this suite. @ 02/20/24 23:01:23.457
  STEP: Destroying namespace "webhook-markers-4002" for this suite. @ 02/20/24 23:01:23.464
• [3.787 seconds]
------------------------------
S
------------------------------
[sig-apps] ReplicationController should release no longer matching pods [Conformance]
test/e2e/apps/rc.go:103
  STEP: Creating a kubernetes client @ 02/20/24 23:01:23.472
  Feb 20 23:01:23.472: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/20/24 23:01:23.472
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:01:23.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:01:23.488
  STEP: Given a ReplicationController is created @ 02/20/24 23:01:23.489
  STEP: When the matched label of one of its pods change @ 02/20/24 23:01:23.494
  Feb 20 23:01:23.497: INFO: Pod name pod-release: Found 0 pods out of 1
  Feb 20 23:01:28.500: INFO: Pod name pod-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 02/20/24 23:01:28.509
  Feb 20 23:01:29.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-1536" for this suite. @ 02/20/24 23:01:29.516
• [6.131 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] ReplicationController should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/rc.go:69
  STEP: Creating a kubernetes client @ 02/20/24 23:01:29.603
  Feb 20 23:01:29.603: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/20/24 23:01:29.611
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:01:29.654
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:01:29.657
  STEP: Creating replication controller my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d @ 02/20/24 23:01:29.664
  Feb 20 23:01:29.676: INFO: Pod name my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d: Found 0 pods out of 1
  Feb 20 23:01:34.679: INFO: Pod name my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d: Found 1 pods out of 1
  Feb 20 23:01:34.679: INFO: Ensuring all pods for ReplicationController "my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d" are running
  Feb 20 23:01:38.688: INFO: Pod "my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d-p9fbt" is running and ready(conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-20 23:01:29 +0000 UTC Reason: Message:} {Type:Ready Status:False LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-20 23:01:29 +0000 UTC Reason:ContainersNotReady Message:containers with unready status: [my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d]} {Type:ContainersReady Status:False LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-20 23:01:29 +0000 UTC Reason:ContainersNotReady Message:containers with unready status: [my-hostname-basic-dd2ee896-d30c-478c-8299-4ef03804a21d]} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-20 23:01:29 +0000 UTC Reason: Message:}])
  Feb 20 23:01:38.688: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 02/20/24 23:01:38.688
  Feb 20 23:01:38.702: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-8844" for this suite. @ 02/20/24 23:01:38.708
• [9.119 seconds]
------------------------------
[sig-node] Pods should run through the lifecycle of Pods and PodStatus [Conformance]
test/e2e/common/node/pods.go:897
  STEP: Creating a kubernetes client @ 02/20/24 23:01:38.722
  Feb 20 23:01:38.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:01:38.724
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:01:38.758
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:01:38.762
  STEP: creating a Pod with a static label @ 02/20/24 23:01:38.773
  STEP: watching for Pod to be ready @ 02/20/24 23:01:38.787
  Feb 20 23:01:38.789: INFO: observed Pod pod-test in namespace pods-8220 in phase Pending with labels: map[test-pod-static:true] & conditions []
  Feb 20 23:01:38.797: INFO: observed Pod pod-test in namespace pods-8220 in phase Pending with labels: map[test-pod-static:true] & conditions [{PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:38 +0000 UTC  }]
  Feb 20 23:01:39.394: INFO: observed Pod pod-test in namespace pods-8220 in phase Pending with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:38 +0000 UTC  }]
  Feb 20 23:01:39.975: INFO: observed Pod pod-test in namespace pods-8220 in phase Pending with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC ContainersNotReady containers with unready status: [pod-test]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:38 +0000 UTC  }]
  Feb 20 23:01:40.686: INFO: Found Pod pod-test in namespace pods-8220 in phase Running with labels: map[test-pod-static:true] & conditions [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:39 +0000 UTC  } {Ready True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:40 +0000 UTC  } {ContainersReady True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:40 +0000 UTC  } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:01:38 +0000 UTC  }]
  STEP: patching the Pod with a new Label and updated data @ 02/20/24 23:01:40.689
  STEP: getting the Pod and ensuring that it's patched @ 02/20/24 23:01:40.702
  STEP: replacing the Pod's status Ready condition to False @ 02/20/24 23:01:40.705
  STEP: check the Pod again to ensure its Ready conditions are False @ 02/20/24 23:01:40.714
  STEP: deleting the Pod via a Collection with a LabelSelector @ 02/20/24 23:01:40.715
  STEP: watching for the Pod to be deleted @ 02/20/24 23:01:40.723
  Feb 20 23:01:40.724: INFO: observed event type MODIFIED
  Feb 20 23:01:42.636: INFO: observed event type MODIFIED
  Feb 20 23:01:42.646: INFO: observed event type MODIFIED
  Feb 20 23:01:43.240: INFO: observed event type MODIFIED
  Feb 20 23:01:43.584: INFO: observed event type MODIFIED
  Feb 20 23:01:43.584: INFO: observed event type MODIFIED
  Feb 20 23:01:43.589: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8220" for this suite. @ 02/20/24 23:01:43.593
• [4.882 seconds]
------------------------------
SSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform canary updates and phased rolling updates of template modifications [Conformance]
test/e2e/apps/statefulset.go:331
  STEP: Creating a kubernetes client @ 02/20/24 23:01:43.605
  Feb 20 23:01:43.605: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/20/24 23:01:43.606
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:01:43.632
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:01:43.635
  STEP: Creating service test in namespace statefulset-2409 @ 02/20/24 23:01:43.639
  STEP: Creating a new StatefulSet @ 02/20/24 23:01:43.647
  Feb 20 23:01:43.678: INFO: Found 0 stateful pods, waiting for 3
  Feb 20 23:01:53.690: INFO: Found 2 stateful pods, waiting for 3
  Feb 20 23:02:03.693: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:02:03.693: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:02:03.693: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Updating stateful set template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 02/20/24 23:02:03.699
  Feb 20 23:02:03.717: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 02/20/24 23:02:03.717
  STEP: Not applying an update when the partition is greater than the number of replicas @ 02/20/24 23:02:13.726
  STEP: Performing a canary update @ 02/20/24 23:02:13.726
  Feb 20 23:02:13.768: INFO: Updating stateful set ss2
  Feb 20 23:02:13.781: INFO: Waiting for Pod statefulset-2409/ss2-2 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  STEP: Restoring Pods to the correct revision when they are deleted @ 02/20/24 23:02:23.795
  Feb 20 23:02:23.914: INFO: Found 2 stateful pods, waiting for 3
  Feb 20 23:02:33.926: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:02:33.926: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:02:33.926: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Performing a phased rolling update @ 02/20/24 23:02:33.94
  Feb 20 23:02:33.981: INFO: Updating stateful set ss2
  Feb 20 23:02:33.998: INFO: Waiting for Pod statefulset-2409/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Feb 20 23:02:44.058: INFO: Updating stateful set ss2
  Feb 20 23:02:44.073: INFO: Waiting for StatefulSet statefulset-2409/ss2 to complete update
  Feb 20 23:02:44.073: INFO: Waiting for Pod statefulset-2409/ss2-0 to have revision ss2-5459d8585b update revision ss2-7b6c9599d5
  Feb 20 23:02:54.088: INFO: Deleting all statefulset in ns statefulset-2409
  Feb 20 23:02:54.094: INFO: Scaling statefulset ss2 to 0
  Feb 20 23:03:04.143: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:03:04.149: INFO: Deleting statefulset ss2
  Feb 20 23:03:04.167: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-2409" for this suite. @ 02/20/24 23:03:04.171
• [80.580 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support --unix-socket=/path  [Conformance]
test/e2e/kubectl/kubectl.go:1806
  STEP: Creating a kubernetes client @ 02/20/24 23:03:04.186
  Feb 20 23:03:04.186: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:03:04.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:03:04.201
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:03:04.203
  STEP: Starting the proxy @ 02/20/24 23:03:04.205
  Feb 20 23:03:04.205: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-4561 proxy --unix-socket=/tmp/kubectl-proxy-unix3817757190/test'
  STEP: retrieving proxy /api/ output @ 02/20/24 23:03:04.24
  Feb 20 23:03:04.241: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-4561" for this suite. @ 02/20/24 23:03:04.244
• [0.066 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny custom resource creation, update and deletion [Conformance]
test/e2e/apimachinery/webhook.go:221
  STEP: Creating a kubernetes client @ 02/20/24 23:03:04.252
  Feb 20 23:03:04.252: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:03:04.252
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:03:04.271
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:03:04.273
  STEP: Setting up server cert @ 02/20/24 23:03:04.299
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:03:04.714
  STEP: Deploying the webhook pod @ 02/20/24 23:03:04.722
  STEP: Wait for the deployment to be ready @ 02/20/24 23:03:04.733
  Feb 20 23:03:04.737: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:03:06.757
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:03:06.793
  Feb 20 23:03:07.794: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Feb 20 23:03:07.807: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Registering the custom resource webhook via the AdmissionRegistration API @ 02/20/24 23:03:08.343
  STEP: Creating a custom resource that should be denied by the webhook @ 02/20/24 23:03:08.384
  STEP: Creating a custom resource whose deletion would be denied by the webhook @ 02/20/24 23:03:10.417
  STEP: Updating the custom resource with disallowed data should be denied @ 02/20/24 23:03:10.444
  STEP: Deleting the custom resource should be denied @ 02/20/24 23:03:10.459
  STEP: Remove the offending key and value from the custom resource data @ 02/20/24 23:03:10.465
  STEP: Deleting the updated custom resource should be successful @ 02/20/24 23:03:10.477
  Feb 20 23:03:10.485: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3969" for this suite. @ 02/20/24 23:03:11.052
  STEP: Destroying namespace "webhook-markers-1160" for this suite. @ 02/20/24 23:03:11.061
• [6.817 seconds]
------------------------------
[sig-apps] CronJob should schedule multiple jobs concurrently [Conformance]
test/e2e/apps/cronjob.go:70
  STEP: Creating a kubernetes client @ 02/20/24 23:03:11.069
  Feb 20 23:03:11.069: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename cronjob @ 02/20/24 23:03:11.07
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:03:11.087
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:03:11.089
  STEP: Creating a cronjob @ 02/20/24 23:03:11.092
  STEP: Ensuring more than one job is running at a time @ 02/20/24 23:03:11.099
  STEP: Ensuring at least two running jobs exists by listing jobs explicitly @ 02/20/24 23:05:01.107
  STEP: Removing cronjob @ 02/20/24 23:05:01.114
  Feb 20 23:05:01.131: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-1557" for this suite. @ 02/20/24 23:05:01.139
• [110.090 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields in both the root and embedded object of a CR [Conformance]
test/e2e/apimachinery/field_validation.go:474
  STEP: Creating a kubernetes client @ 02/20/24 23:05:01.159
  Feb 20 23:05:01.159: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/20/24 23:05:01.16
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:01.215
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:01.217
  Feb 20 23:05:01.220: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  W0220 23:05:03.760478      22 warnings.go:70] unknown field "alpha"
  W0220 23:05:03.760769      22 warnings.go:70] unknown field "beta"
  W0220 23:05:03.760894      22 warnings.go:70] unknown field "delta"
  W0220 23:05:03.761104      22 warnings.go:70] unknown field "epsilon"
  W0220 23:05:03.761255      22 warnings.go:70] unknown field "gamma"
  Feb 20 23:05:04.352: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4403" for this suite. @ 02/20/24 23:05:04.365
• [3.213 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should have session affinity work for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2202
  STEP: Creating a kubernetes client @ 02/20/24 23:05:04.373
  Feb 20 23:05:04.373: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:05:04.373
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:04.442
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:04.443
  STEP: creating service in namespace services-1588 @ 02/20/24 23:05:04.445
  STEP: creating service affinity-nodeport in namespace services-1588 @ 02/20/24 23:05:04.445
  STEP: creating replication controller affinity-nodeport in namespace services-1588 @ 02/20/24 23:05:04.459
  I0220 23:05:04.465040      22 runners.go:197] Created replication controller with name: affinity-nodeport, namespace: services-1588, replica count: 3
  I0220 23:05:07.515777      22 runners.go:197] affinity-nodeport Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:05:07.537: INFO: Creating new exec pod
  Feb 20 23:05:10.571: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1588 exec execpod-affinityv8rnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport 80'
  Feb 20 23:05:10.687: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport 80\nConnection to affinity-nodeport 80 port [tcp/http] succeeded!\n"
  Feb 20 23:05:10.687: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:10.687: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1588 exec execpod-affinityv8rnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.27 80'
  Feb 20 23:05:10.756: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.27 80\nConnection to 10.152.183.27 80 port [tcp/http] succeeded!\n"
  Feb 20 23:05:10.756: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:10.756: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1588 exec execpod-affinityv8rnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 32037'
  Feb 20 23:05:10.826: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 32037\nConnection to 10.100.138.108 32037 port [tcp/*] succeeded!\n"
  Feb 20 23:05:10.826: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:10.826: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1588 exec execpod-affinityv8rnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.210 32037'
  Feb 20 23:05:10.903: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.210 32037\nConnection to 10.100.138.210 32037 port [tcp/*] succeeded!\n"
  Feb 20 23:05:10.903: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:10.903: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1588 exec execpod-affinityv8rnx -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.108:32037/ ; done'
  Feb 20 23:05:11.030: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.108:32037/\n"
  Feb 20 23:05:11.030: INFO: stdout: "\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns\naffinity-nodeport-g8pns"
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Received response from host: affinity-nodeport-g8pns
  Feb 20 23:05:11.030: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:05:11.032: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport in namespace services-1588, will wait for the garbage collector to delete the pods @ 02/20/24 23:05:11.046
  Feb 20 23:05:11.119: INFO: Deleting ReplicationController affinity-nodeport took: 20.877132ms
  Feb 20 23:05:11.220: INFO: Terminating ReplicationController affinity-nodeport pods took: 101.105717ms
  STEP: Destroying namespace "services-1588" for this suite. @ 02/20/24 23:05:14.587
• [10.220 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers and fail the pod if init containers fail on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:459
  STEP: Creating a kubernetes client @ 02/20/24 23:05:14.594
  Feb 20 23:05:14.594: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename init-container @ 02/20/24 23:05:14.594
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:14.613
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:14.614
  STEP: creating the pod @ 02/20/24 23:05:14.615
  Feb 20 23:05:14.616: INFO: PodSpec: initContainers in spec.initContainers
  Feb 20 23:05:19.623: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-2072" for this suite. @ 02/20/24 23:05:19.629
• [5.041 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service ProxyWithPath [Conformance]
test/e2e/network/proxy.go:286
  STEP: Creating a kubernetes client @ 02/20/24 23:05:19.635
  Feb 20 23:05:19.635: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename proxy @ 02/20/24 23:05:19.636
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:19.657
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:19.659
  Feb 20 23:05:19.660: INFO: Creating pod...
  Feb 20 23:05:21.684: INFO: Creating service...
  Feb 20 23:05:21.712: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/DELETE
  Feb 20 23:05:21.723: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Feb 20 23:05:21.723: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/GET
  Feb 20 23:05:21.729: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Feb 20 23:05:21.730: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/HEAD
  Feb 20 23:05:21.734: INFO: http.Client request:HEAD | StatusCode:200
  Feb 20 23:05:21.734: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/OPTIONS
  Feb 20 23:05:21.739: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Feb 20 23:05:21.739: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/PATCH
  Feb 20 23:05:21.742: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Feb 20 23:05:21.742: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/POST
  Feb 20 23:05:21.746: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Feb 20 23:05:21.746: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/pods/agnhost/proxy/some/path/with/PUT
  Feb 20 23:05:21.749: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Feb 20 23:05:21.749: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/DELETE
  Feb 20 23:05:21.752: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Feb 20 23:05:21.752: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/GET
  Feb 20 23:05:21.754: INFO: http.Client request:GET | StatusCode:200 | Response:foo | Method:GET
  Feb 20 23:05:21.754: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/HEAD
  Feb 20 23:05:21.757: INFO: http.Client request:HEAD | StatusCode:200
  Feb 20 23:05:21.757: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/OPTIONS
  Feb 20 23:05:21.759: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Feb 20 23:05:21.759: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/PATCH
  Feb 20 23:05:21.761: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Feb 20 23:05:21.761: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/POST
  Feb 20 23:05:21.763: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Feb 20 23:05:21.763: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-3206/services/test-service/proxy/some/path/with/PUT
  Feb 20 23:05:21.765: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Feb 20 23:05:21.765: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-3206" for this suite. @ 02/20/24 23:05:21.767
• [2.138 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Service endpoints latency should not be very high  [Conformance]
test/e2e/network/service_latency.go:59
  STEP: Creating a kubernetes client @ 02/20/24 23:05:21.774
  Feb 20 23:05:21.774: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svc-latency @ 02/20/24 23:05:21.775
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:21.844
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:21.85
  Feb 20 23:05:21.856: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: creating replication controller svc-latency-rc in namespace svc-latency-9345 @ 02/20/24 23:05:21.858
  I0220 23:05:21.877429      22 runners.go:197] Created replication controller with name: svc-latency-rc, namespace: svc-latency-9345, replica count: 1
  I0220 23:05:22.929159      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0220 23:05:23.929431      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0220 23:05:24.930034      22 runners.go:197] svc-latency-rc Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:05:25.059: INFO: Created: latency-svc-n2sx7
  Feb 20 23:05:25.084: INFO: Got endpoints: latency-svc-n2sx7 [54.267763ms]
  Feb 20 23:05:25.102: INFO: Created: latency-svc-tgdnw
  Feb 20 23:05:25.109: INFO: Got endpoints: latency-svc-tgdnw [24.264973ms]
  Feb 20 23:05:25.117: INFO: Created: latency-svc-x22c2
  Feb 20 23:05:25.132: INFO: Got endpoints: latency-svc-x22c2 [47.006511ms]
  Feb 20 23:05:25.137: INFO: Created: latency-svc-rplrq
  Feb 20 23:05:25.144: INFO: Got endpoints: latency-svc-rplrq [58.356266ms]
  Feb 20 23:05:25.151: INFO: Created: latency-svc-sr7g9
  Feb 20 23:05:25.157: INFO: Got endpoints: latency-svc-sr7g9 [71.046775ms]
  Feb 20 23:05:25.164: INFO: Created: latency-svc-jz55j
  Feb 20 23:05:25.169: INFO: Got endpoints: latency-svc-jz55j [83.345305ms]
  Feb 20 23:05:25.177: INFO: Created: latency-svc-g2z2k
  Feb 20 23:05:25.182: INFO: Got endpoints: latency-svc-g2z2k [97.258954ms]
  Feb 20 23:05:25.189: INFO: Created: latency-svc-pgtk5
  Feb 20 23:05:25.201: INFO: Got endpoints: latency-svc-pgtk5 [114.451496ms]
  Feb 20 23:05:25.206: INFO: Created: latency-svc-qvhjt
  Feb 20 23:05:25.217: INFO: Got endpoints: latency-svc-qvhjt [130.435706ms]
  Feb 20 23:05:25.219: INFO: Created: latency-svc-p2kfc
  Feb 20 23:05:25.229: INFO: Got endpoints: latency-svc-p2kfc [141.884661ms]
  Feb 20 23:05:25.234: INFO: Created: latency-svc-xljp8
  Feb 20 23:05:25.239: INFO: Got endpoints: latency-svc-xljp8 [152.45113ms]
  Feb 20 23:05:25.247: INFO: Created: latency-svc-xlcsc
  Feb 20 23:05:25.257: INFO: Got endpoints: latency-svc-xlcsc [169.669541ms]
  Feb 20 23:05:25.260: INFO: Created: latency-svc-prrd6
  Feb 20 23:05:25.268: INFO: Got endpoints: latency-svc-prrd6 [180.258817ms]
  Feb 20 23:05:25.273: INFO: Created: latency-svc-78wl7
  Feb 20 23:05:25.284: INFO: Got endpoints: latency-svc-78wl7 [197.069982ms]
  Feb 20 23:05:25.287: INFO: Created: latency-svc-vggnd
  Feb 20 23:05:25.294: INFO: Got endpoints: latency-svc-vggnd [206.707529ms]
  Feb 20 23:05:25.301: INFO: Created: latency-svc-xcwnd
  Feb 20 23:05:25.311: INFO: Got endpoints: latency-svc-xcwnd [223.53829ms]
  Feb 20 23:05:25.316: INFO: Created: latency-svc-fbddm
  Feb 20 23:05:25.329: INFO: Got endpoints: latency-svc-fbddm [219.816208ms]
  Feb 20 23:05:25.332: INFO: Created: latency-svc-2vpql
  Feb 20 23:05:25.342: INFO: Got endpoints: latency-svc-2vpql [209.829752ms]
  Feb 20 23:05:25.345: INFO: Created: latency-svc-zt9wz
  Feb 20 23:05:25.357: INFO: Got endpoints: latency-svc-zt9wz [212.839548ms]
  Feb 20 23:05:25.360: INFO: Created: latency-svc-5jmvf
  Feb 20 23:05:25.370: INFO: Got endpoints: latency-svc-5jmvf [212.579682ms]
  Feb 20 23:05:25.372: INFO: Created: latency-svc-spq66
  Feb 20 23:05:25.380: INFO: Got endpoints: latency-svc-spq66 [210.692354ms]
  Feb 20 23:05:25.386: INFO: Created: latency-svc-ztb55
  Feb 20 23:05:25.394: INFO: Got endpoints: latency-svc-ztb55 [211.912371ms]
  Feb 20 23:05:25.400: INFO: Created: latency-svc-k2mwc
  Feb 20 23:05:25.408: INFO: Got endpoints: latency-svc-k2mwc [207.019618ms]
  Feb 20 23:05:25.415: INFO: Created: latency-svc-t54lh
  Feb 20 23:05:25.423: INFO: Got endpoints: latency-svc-t54lh [206.078011ms]
  Feb 20 23:05:25.429: INFO: Created: latency-svc-jkz9d
  Feb 20 23:05:25.440: INFO: Got endpoints: latency-svc-jkz9d [210.536904ms]
  Feb 20 23:05:25.442: INFO: Created: latency-svc-cdhwh
  Feb 20 23:05:25.453: INFO: Got endpoints: latency-svc-cdhwh [213.484597ms]
  Feb 20 23:05:25.457: INFO: Created: latency-svc-t8ntj
  Feb 20 23:05:25.463: INFO: Got endpoints: latency-svc-t8ntj [206.092308ms]
  Feb 20 23:05:25.471: INFO: Created: latency-svc-g4rjx
  Feb 20 23:05:25.479: INFO: Got endpoints: latency-svc-g4rjx [211.116734ms]
  Feb 20 23:05:25.486: INFO: Created: latency-svc-4gj5f
  Feb 20 23:05:25.497: INFO: Got endpoints: latency-svc-4gj5f [212.830426ms]
  Feb 20 23:05:25.499: INFO: Created: latency-svc-fdplm
  Feb 20 23:05:25.508: INFO: Got endpoints: latency-svc-fdplm [214.09237ms]
  Feb 20 23:05:25.513: INFO: Created: latency-svc-z4rcv
  Feb 20 23:05:25.525: INFO: Got endpoints: latency-svc-z4rcv [214.243877ms]
  Feb 20 23:05:25.528: INFO: Created: latency-svc-dg767
  Feb 20 23:05:25.535: INFO: Got endpoints: latency-svc-dg767 [205.762516ms]
  Feb 20 23:05:25.541: INFO: Created: latency-svc-wqpnj
  Feb 20 23:05:25.549: INFO: Got endpoints: latency-svc-wqpnj [206.490373ms]
  Feb 20 23:05:25.554: INFO: Created: latency-svc-hg8np
  Feb 20 23:05:25.562: INFO: Got endpoints: latency-svc-hg8np [205.015453ms]
  Feb 20 23:05:25.569: INFO: Created: latency-svc-brh8k
  Feb 20 23:05:25.576: INFO: Got endpoints: latency-svc-brh8k [206.17779ms]
  Feb 20 23:05:25.584: INFO: Created: latency-svc-p2zct
  Feb 20 23:05:25.589: INFO: Got endpoints: latency-svc-p2zct [209.036473ms]
  Feb 20 23:05:25.597: INFO: Created: latency-svc-969k9
  Feb 20 23:05:25.603: INFO: Got endpoints: latency-svc-969k9 [208.857821ms]
  Feb 20 23:05:25.610: INFO: Created: latency-svc-rhrcf
  Feb 20 23:05:25.620: INFO: Got endpoints: latency-svc-rhrcf [211.822903ms]
  Feb 20 23:05:25.625: INFO: Created: latency-svc-4d4xv
  Feb 20 23:05:25.637: INFO: Got endpoints: latency-svc-4d4xv [213.883104ms]
  Feb 20 23:05:25.640: INFO: Created: latency-svc-nmx5d
  Feb 20 23:05:25.648: INFO: Got endpoints: latency-svc-nmx5d [208.248608ms]
  Feb 20 23:05:25.654: INFO: Created: latency-svc-4pg5t
  Feb 20 23:05:25.663: INFO: Got endpoints: latency-svc-4pg5t [210.015641ms]
  Feb 20 23:05:25.674: INFO: Created: latency-svc-lktx7
  Feb 20 23:05:25.684: INFO: Got endpoints: latency-svc-lktx7 [221.111371ms]
  Feb 20 23:05:25.688: INFO: Created: latency-svc-2wzlg
  Feb 20 23:05:25.698: INFO: Created: latency-svc-2pwlg
  Feb 20 23:05:25.710: INFO: Created: latency-svc-ppgw8
  Feb 20 23:05:25.721: INFO: Got endpoints: latency-svc-2wzlg [242.623232ms]
  Feb 20 23:05:25.728: INFO: Created: latency-svc-jpm84
  Feb 20 23:05:25.736: INFO: Created: latency-svc-29s5x
  Feb 20 23:05:25.746: INFO: Created: latency-svc-cjs6j
  Feb 20 23:05:25.755: INFO: Created: latency-svc-n5s9r
  Feb 20 23:05:25.763: INFO: Created: latency-svc-jzjlc
  Feb 20 23:05:25.770: INFO: Got endpoints: latency-svc-2pwlg [273.45818ms]
  Feb 20 23:05:25.776: INFO: Created: latency-svc-ndhgr
  Feb 20 23:05:25.786: INFO: Created: latency-svc-5pvp5
  Feb 20 23:05:25.794: INFO: Created: latency-svc-c6rd2
  Feb 20 23:05:25.803: INFO: Created: latency-svc-bws2b
  Feb 20 23:05:25.813: INFO: Created: latency-svc-75ktm
  Feb 20 23:05:25.822: INFO: Got endpoints: latency-svc-ppgw8 [313.976204ms]
  Feb 20 23:05:25.826: INFO: Created: latency-svc-zdn94
  Feb 20 23:05:25.834: INFO: Created: latency-svc-qhklq
  Feb 20 23:05:25.842: INFO: Created: latency-svc-gvwcq
  Feb 20 23:05:25.851: INFO: Created: latency-svc-npf5d
  Feb 20 23:05:25.859: INFO: Created: latency-svc-zk59m
  Feb 20 23:05:25.872: INFO: Got endpoints: latency-svc-jpm84 [347.16932ms]
  Feb 20 23:05:25.883: INFO: Created: latency-svc-j9wzd
  Feb 20 23:05:25.930: INFO: Got endpoints: latency-svc-29s5x [394.980048ms]
  Feb 20 23:05:25.967: INFO: Created: latency-svc-rz4qd
  Feb 20 23:05:25.982: INFO: Got endpoints: latency-svc-cjs6j [432.983495ms]
  Feb 20 23:05:26.019: INFO: Created: latency-svc-c65th
  Feb 20 23:05:26.030: INFO: Got endpoints: latency-svc-n5s9r [468.452246ms]
  Feb 20 23:05:26.066: INFO: Created: latency-svc-kcmf8
  Feb 20 23:05:26.079: INFO: Got endpoints: latency-svc-jzjlc [503.547595ms]
  Feb 20 23:05:26.114: INFO: Created: latency-svc-gxpnn
  Feb 20 23:05:26.133: INFO: Got endpoints: latency-svc-ndhgr [543.78308ms]
  Feb 20 23:05:26.170: INFO: Created: latency-svc-xrc4v
  Feb 20 23:05:26.183: INFO: Got endpoints: latency-svc-5pvp5 [580.245162ms]
  Feb 20 23:05:26.219: INFO: Created: latency-svc-b2rhn
  Feb 20 23:05:26.236: INFO: Got endpoints: latency-svc-c6rd2 [615.925235ms]
  Feb 20 23:05:26.273: INFO: Created: latency-svc-fbbvc
  Feb 20 23:05:26.294: INFO: Got endpoints: latency-svc-bws2b [656.867394ms]
  Feb 20 23:05:26.331: INFO: Got endpoints: latency-svc-75ktm [682.790153ms]
  Feb 20 23:05:26.351: INFO: Created: latency-svc-s9g5j
  Feb 20 23:05:26.369: INFO: Created: latency-svc-pvkbp
  Feb 20 23:05:26.383: INFO: Got endpoints: latency-svc-zdn94 [720.078386ms]
  Feb 20 23:05:26.420: INFO: Created: latency-svc-598sj
  Feb 20 23:05:26.433: INFO: Got endpoints: latency-svc-qhklq [748.307572ms]
  Feb 20 23:05:26.480: INFO: Created: latency-svc-n24w4
  Feb 20 23:05:26.507: INFO: Got endpoints: latency-svc-gvwcq [785.213444ms]
  Feb 20 23:05:26.535: INFO: Got endpoints: latency-svc-npf5d [764.926227ms]
  Feb 20 23:05:26.571: INFO: Created: latency-svc-ltmch
  Feb 20 23:05:26.662: INFO: Got endpoints: latency-svc-zk59m [840.832892ms]
  Feb 20 23:05:26.675: INFO: Created: latency-svc-8bb7s
  Feb 20 23:05:26.692: INFO: Got endpoints: latency-svc-rz4qd [762.066216ms]
  Feb 20 23:05:26.731: INFO: Got endpoints: latency-svc-j9wzd [858.509927ms]
  Feb 20 23:05:26.803: INFO: Got endpoints: latency-svc-c65th [821.572933ms]
  Feb 20 23:05:26.818: INFO: Created: latency-svc-m5mxr
  Feb 20 23:05:26.838: INFO: Got endpoints: latency-svc-kcmf8 [807.614659ms]
  Feb 20 23:05:26.880: INFO: Got endpoints: latency-svc-gxpnn [800.281363ms]
  Feb 20 23:05:26.889: INFO: Created: latency-svc-zvq6q
  Feb 20 23:05:26.906: INFO: Got endpoints: latency-svc-xrc4v [772.768191ms]
  Feb 20 23:05:26.932: INFO: Created: latency-svc-mpt6h
  Feb 20 23:05:26.954: INFO: Got endpoints: latency-svc-b2rhn [770.821554ms]
  Feb 20 23:05:26.962: INFO: Created: latency-svc-b58m6
  Feb 20 23:05:26.987: INFO: Got endpoints: latency-svc-fbbvc [751.546334ms]
  Feb 20 23:05:26.992: INFO: Created: latency-svc-jl5dl
  Feb 20 23:05:27.017: INFO: Created: latency-svc-twm6q
  Feb 20 23:05:27.035: INFO: Got endpoints: latency-svc-s9g5j [741.13562ms]
  Feb 20 23:05:27.051: INFO: Created: latency-svc-7znsx
  Feb 20 23:05:27.084: INFO: Got endpoints: latency-svc-pvkbp [753.613059ms]
  Feb 20 23:05:27.102: INFO: Created: latency-svc-xslh4
  Feb 20 23:05:27.125: INFO: Created: latency-svc-rpxd4
  Feb 20 23:05:27.135: INFO: Got endpoints: latency-svc-598sj [751.696924ms]
  Feb 20 23:05:27.157: INFO: Created: latency-svc-zt27b
  Feb 20 23:05:27.170: INFO: Created: latency-svc-bzhj6
  Feb 20 23:05:27.183: INFO: Got endpoints: latency-svc-n24w4 [749.992859ms]
  Feb 20 23:05:27.187: INFO: Created: latency-svc-5mpw6
  Feb 20 23:05:27.201: INFO: Created: latency-svc-rw7k9
  Feb 20 23:05:27.219: INFO: Got endpoints: latency-svc-ltmch [712.164892ms]
  Feb 20 23:05:27.232: INFO: Created: latency-svc-cdsjg
  Feb 20 23:05:27.270: INFO: Got endpoints: latency-svc-8bb7s [734.256515ms]
  Feb 20 23:05:27.285: INFO: Created: latency-svc-qdxkv
  Feb 20 23:05:27.323: INFO: Got endpoints: latency-svc-m5mxr [660.305171ms]
  Feb 20 23:05:27.356: INFO: Created: latency-svc-xxns2
  Feb 20 23:05:27.421: INFO: Got endpoints: latency-svc-zvq6q [728.955036ms]
  Feb 20 23:05:27.437: INFO: Created: latency-svc-kzsn6
  Feb 20 23:05:27.481: INFO: Got endpoints: latency-svc-mpt6h [749.946887ms]
  Feb 20 23:05:27.497: INFO: Created: latency-svc-qgxht
  Feb 20 23:05:27.527: INFO: Got endpoints: latency-svc-b58m6 [722.853277ms]
  Feb 20 23:05:27.543: INFO: Created: latency-svc-2xprw
  Feb 20 23:05:27.576: INFO: Got endpoints: latency-svc-jl5dl [737.356717ms]
  Feb 20 23:05:27.604: INFO: Created: latency-svc-dkhp4
  Feb 20 23:05:27.621: INFO: Got endpoints: latency-svc-twm6q [741.014257ms]
  Feb 20 23:05:27.637: INFO: Created: latency-svc-k5wpk
  Feb 20 23:05:27.672: INFO: Got endpoints: latency-svc-7znsx [765.820843ms]
  Feb 20 23:05:27.692: INFO: Created: latency-svc-75v4b
  Feb 20 23:05:27.722: INFO: Got endpoints: latency-svc-xslh4 [767.87257ms]
  Feb 20 23:05:27.738: INFO: Created: latency-svc-rzgwp
  Feb 20 23:05:27.768: INFO: Got endpoints: latency-svc-rpxd4 [781.057879ms]
  Feb 20 23:05:27.789: INFO: Created: latency-svc-hcsrv
  Feb 20 23:05:27.819: INFO: Got endpoints: latency-svc-zt27b [783.820382ms]
  Feb 20 23:05:27.835: INFO: Created: latency-svc-7rnfv
  Feb 20 23:05:27.871: INFO: Got endpoints: latency-svc-bzhj6 [786.345938ms]
  Feb 20 23:05:27.895: INFO: Created: latency-svc-wmlxm
  Feb 20 23:05:27.936: INFO: Got endpoints: latency-svc-5mpw6 [801.359386ms]
  Feb 20 23:05:27.990: INFO: Created: latency-svc-4w6dm
  Feb 20 23:05:28.002: INFO: Got endpoints: latency-svc-rw7k9 [819.102439ms]
  Feb 20 23:05:28.040: INFO: Got endpoints: latency-svc-cdsjg [820.616075ms]
  Feb 20 23:05:28.063: INFO: Created: latency-svc-sp2nl
  Feb 20 23:05:28.086: INFO: Got endpoints: latency-svc-qdxkv [816.418891ms]
  Feb 20 23:05:28.105: INFO: Created: latency-svc-jq86z
  Feb 20 23:05:28.134: INFO: Got endpoints: latency-svc-xxns2 [811.145317ms]
  Feb 20 23:05:28.149: INFO: Created: latency-svc-fndkk
  Feb 20 23:05:28.180: INFO: Got endpoints: latency-svc-kzsn6 [759.122143ms]
  Feb 20 23:05:28.207: INFO: Created: latency-svc-dzbjw
  Feb 20 23:05:28.229: INFO: Created: latency-svc-487m8
  Feb 20 23:05:28.244: INFO: Got endpoints: latency-svc-qgxht [762.846475ms]
  Feb 20 23:05:28.315: INFO: Got endpoints: latency-svc-2xprw [788.660059ms]
  Feb 20 23:05:28.318: INFO: Created: latency-svc-zwmhm
  Feb 20 23:05:28.330: INFO: Got endpoints: latency-svc-dkhp4 [754.302325ms]
  Feb 20 23:05:28.344: INFO: Created: latency-svc-bcnh9
  Feb 20 23:05:28.353: INFO: Created: latency-svc-p4mh9
  Feb 20 23:05:28.371: INFO: Got endpoints: latency-svc-k5wpk [750.443266ms]
  Feb 20 23:05:28.385: INFO: Created: latency-svc-mj2nf
  Feb 20 23:05:28.418: INFO: Got endpoints: latency-svc-75v4b [746.59727ms]
  Feb 20 23:05:28.441: INFO: Created: latency-svc-98989
  Feb 20 23:05:28.479: INFO: Got endpoints: latency-svc-rzgwp [757.075649ms]
  Feb 20 23:05:28.526: INFO: Created: latency-svc-7fzbk
  Feb 20 23:05:28.543: INFO: Got endpoints: latency-svc-hcsrv [774.748343ms]
  Feb 20 23:05:28.584: INFO: Got endpoints: latency-svc-7rnfv [765.334388ms]
  Feb 20 23:05:28.609: INFO: Created: latency-svc-x62lw
  Feb 20 23:05:28.637: INFO: Got endpoints: latency-svc-wmlxm [765.772749ms]
  Feb 20 23:05:28.644: INFO: Created: latency-svc-mlb99
  Feb 20 23:05:28.680: INFO: Got endpoints: latency-svc-4w6dm [743.458224ms]
  Feb 20 23:05:28.786: INFO: Created: latency-svc-kj976
  Feb 20 23:05:28.796: INFO: Got endpoints: latency-svc-sp2nl [793.900508ms]
  Feb 20 23:05:28.815: INFO: Got endpoints: latency-svc-jq86z [775.755642ms]
  Feb 20 23:05:28.818: INFO: Created: latency-svc-qhmrk
  Feb 20 23:05:28.832: INFO: Got endpoints: latency-svc-fndkk [745.598762ms]
  Feb 20 23:05:28.835: INFO: Created: latency-svc-2wpsh
  Feb 20 23:05:28.846: INFO: Created: latency-svc-7c4rc
  Feb 20 23:05:28.854: INFO: Created: latency-svc-9lskz
  Feb 20 23:05:28.874: INFO: Got endpoints: latency-svc-dzbjw [740.246965ms]
  Feb 20 23:05:28.892: INFO: Created: latency-svc-nfmkf
  Feb 20 23:05:28.937: INFO: Got endpoints: latency-svc-487m8 [756.601905ms]
  Feb 20 23:05:28.988: INFO: Got endpoints: latency-svc-zwmhm [744.20653ms]
  Feb 20 23:05:29.003: INFO: Created: latency-svc-tm964
  Feb 20 23:05:29.023: INFO: Got endpoints: latency-svc-bcnh9 [707.201033ms]
  Feb 20 23:05:29.028: INFO: Created: latency-svc-wzzx6
  Feb 20 23:05:29.042: INFO: Created: latency-svc-5pkr5
  Feb 20 23:05:29.073: INFO: Got endpoints: latency-svc-p4mh9 [743.314532ms]
  Feb 20 23:05:29.087: INFO: Created: latency-svc-b7jql
  Feb 20 23:05:29.120: INFO: Got endpoints: latency-svc-mj2nf [748.709252ms]
  Feb 20 23:05:29.138: INFO: Created: latency-svc-8vc5h
  Feb 20 23:05:29.178: INFO: Got endpoints: latency-svc-98989 [759.699792ms]
  Feb 20 23:05:29.217: INFO: Created: latency-svc-r7vjp
  Feb 20 23:05:29.224: INFO: Got endpoints: latency-svc-7fzbk [745.353202ms]
  Feb 20 23:05:29.242: INFO: Created: latency-svc-nzfq5
  Feb 20 23:05:29.275: INFO: Got endpoints: latency-svc-x62lw [731.557036ms]
  Feb 20 23:05:29.289: INFO: Created: latency-svc-wx2nr
  Feb 20 23:05:29.319: INFO: Got endpoints: latency-svc-mlb99 [734.255071ms]
  Feb 20 23:05:29.335: INFO: Created: latency-svc-f4zs5
  Feb 20 23:05:29.380: INFO: Got endpoints: latency-svc-kj976 [743.410421ms]
  Feb 20 23:05:29.421: INFO: Got endpoints: latency-svc-qhmrk [740.603207ms]
  Feb 20 23:05:29.426: INFO: Created: latency-svc-9rsnr
  Feb 20 23:05:29.439: INFO: Created: latency-svc-rhhjf
  Feb 20 23:05:29.470: INFO: Got endpoints: latency-svc-2wpsh [673.628595ms]
  Feb 20 23:05:29.487: INFO: Created: latency-svc-2ts7l
  Feb 20 23:05:29.526: INFO: Got endpoints: latency-svc-7c4rc [710.22178ms]
  Feb 20 23:05:29.575: INFO: Created: latency-svc-8r575
  Feb 20 23:05:29.585: INFO: Got endpoints: latency-svc-9lskz [752.899297ms]
  Feb 20 23:05:29.622: INFO: Created: latency-svc-p7fvz
  Feb 20 23:05:29.636: INFO: Got endpoints: latency-svc-nfmkf [761.271782ms]
  Feb 20 23:05:29.663: INFO: Created: latency-svc-xnnrq
  Feb 20 23:05:29.672: INFO: Got endpoints: latency-svc-tm964 [735.312389ms]
  Feb 20 23:05:29.704: INFO: Created: latency-svc-75ghg
  Feb 20 23:05:29.725: INFO: Got endpoints: latency-svc-wzzx6 [736.60812ms]
  Feb 20 23:05:29.752: INFO: Created: latency-svc-wfzwj
  Feb 20 23:05:29.772: INFO: Got endpoints: latency-svc-5pkr5 [749.435134ms]
  Feb 20 23:05:29.799: INFO: Created: latency-svc-2t8rf
  Feb 20 23:05:29.829: INFO: Got endpoints: latency-svc-b7jql [755.744916ms]
  Feb 20 23:05:29.863: INFO: Created: latency-svc-h6n79
  Feb 20 23:05:29.875: INFO: Got endpoints: latency-svc-8vc5h [755.117516ms]
  Feb 20 23:05:29.902: INFO: Created: latency-svc-fnnpk
  Feb 20 23:05:29.923: INFO: Got endpoints: latency-svc-r7vjp [744.277364ms]
  Feb 20 23:05:29.937: INFO: Created: latency-svc-m9prh
  Feb 20 23:05:29.977: INFO: Got endpoints: latency-svc-nzfq5 [752.775321ms]
  Feb 20 23:05:29.990: INFO: Created: latency-svc-8ctv7
  Feb 20 23:05:30.018: INFO: Got endpoints: latency-svc-wx2nr [742.998877ms]
  Feb 20 23:05:30.032: INFO: Created: latency-svc-mxgxt
  Feb 20 23:05:30.071: INFO: Got endpoints: latency-svc-f4zs5 [752.210907ms]
  Feb 20 23:05:30.098: INFO: Created: latency-svc-5d5x2
  Feb 20 23:05:30.122: INFO: Got endpoints: latency-svc-9rsnr [741.939918ms]
  Feb 20 23:05:30.149: INFO: Created: latency-svc-kjcns
  Feb 20 23:05:30.172: INFO: Got endpoints: latency-svc-rhhjf [750.739881ms]
  Feb 20 23:05:30.198: INFO: Created: latency-svc-9jzj2
  Feb 20 23:05:30.221: INFO: Got endpoints: latency-svc-2ts7l [751.800525ms]
  Feb 20 23:05:30.243: INFO: Created: latency-svc-zbqn9
  Feb 20 23:05:30.269: INFO: Got endpoints: latency-svc-8r575 [743.146331ms]
  Feb 20 23:05:30.287: INFO: Created: latency-svc-ldjcx
  Feb 20 23:05:30.326: INFO: Got endpoints: latency-svc-p7fvz [741.65578ms]
  Feb 20 23:05:30.355: INFO: Created: latency-svc-np26l
  Feb 20 23:05:30.375: INFO: Got endpoints: latency-svc-xnnrq [739.477867ms]
  Feb 20 23:05:30.407: INFO: Created: latency-svc-lpg49
  Feb 20 23:05:30.424: INFO: Got endpoints: latency-svc-75ghg [751.400934ms]
  Feb 20 23:05:30.455: INFO: Created: latency-svc-vhxx8
  Feb 20 23:05:30.481: INFO: Got endpoints: latency-svc-wfzwj [756.635848ms]
  Feb 20 23:05:30.508: INFO: Created: latency-svc-rr92v
  Feb 20 23:05:30.524: INFO: Got endpoints: latency-svc-2t8rf [751.582875ms]
  Feb 20 23:05:30.545: INFO: Created: latency-svc-nj6vg
  Feb 20 23:05:30.570: INFO: Got endpoints: latency-svc-h6n79 [740.415854ms]
  Feb 20 23:05:30.590: INFO: Created: latency-svc-7vtrr
  Feb 20 23:05:30.619: INFO: Got endpoints: latency-svc-fnnpk [744.001999ms]
  Feb 20 23:05:30.640: INFO: Created: latency-svc-g4fh2
  Feb 20 23:05:30.689: INFO: Got endpoints: latency-svc-m9prh [766.492073ms]
  Feb 20 23:05:30.747: INFO: Got endpoints: latency-svc-8ctv7 [769.740445ms]
  Feb 20 23:05:30.765: INFO: Created: latency-svc-z46jv
  Feb 20 23:05:30.780: INFO: Got endpoints: latency-svc-mxgxt [761.768243ms]
  Feb 20 23:05:30.785: INFO: Created: latency-svc-jrs5v
  Feb 20 23:05:30.796: INFO: Created: latency-svc-q2mdg
  Feb 20 23:05:30.841: INFO: Got endpoints: latency-svc-5d5x2 [769.780585ms]
  Feb 20 23:05:30.860: INFO: Created: latency-svc-pqpm9
  Feb 20 23:05:30.872: INFO: Got endpoints: latency-svc-kjcns [749.96949ms]
  Feb 20 23:05:30.886: INFO: Created: latency-svc-9frj4
  Feb 20 23:05:30.920: INFO: Got endpoints: latency-svc-9jzj2 [748.425982ms]
  Feb 20 23:05:30.942: INFO: Created: latency-svc-htkfh
  Feb 20 23:05:30.983: INFO: Got endpoints: latency-svc-zbqn9 [761.576077ms]
  Feb 20 23:05:31.025: INFO: Got endpoints: latency-svc-ldjcx [756.073392ms]
  Feb 20 23:05:31.029: INFO: Created: latency-svc-n4fbr
  Feb 20 23:05:31.054: INFO: Created: latency-svc-vq4vj
  Feb 20 23:05:31.068: INFO: Got endpoints: latency-svc-np26l [741.781938ms]
  Feb 20 23:05:31.086: INFO: Created: latency-svc-98c5h
  Feb 20 23:05:31.125: INFO: Got endpoints: latency-svc-lpg49 [750.251911ms]
  Feb 20 23:05:31.143: INFO: Created: latency-svc-tpb7m
  Feb 20 23:05:31.171: INFO: Got endpoints: latency-svc-vhxx8 [746.759123ms]
  Feb 20 23:05:31.196: INFO: Created: latency-svc-hbj27
  Feb 20 23:05:31.226: INFO: Got endpoints: latency-svc-rr92v [744.977974ms]
  Feb 20 23:05:31.250: INFO: Created: latency-svc-rxj5t
  Feb 20 23:05:31.277: INFO: Got endpoints: latency-svc-nj6vg [753.022164ms]
  Feb 20 23:05:31.344: INFO: Created: latency-svc-dcwdc
  Feb 20 23:05:31.348: INFO: Got endpoints: latency-svc-7vtrr [778.344261ms]
  Feb 20 23:05:31.369: INFO: Created: latency-svc-ttw85
  Feb 20 23:05:31.373: INFO: Got endpoints: latency-svc-g4fh2 [753.32621ms]
  Feb 20 23:05:31.394: INFO: Created: latency-svc-592sr
  Feb 20 23:05:31.419: INFO: Got endpoints: latency-svc-z46jv [730.279929ms]
  Feb 20 23:05:31.461: INFO: Created: latency-svc-ptb4l
  Feb 20 23:05:31.468: INFO: Got endpoints: latency-svc-jrs5v [721.258991ms]
  Feb 20 23:05:31.486: INFO: Created: latency-svc-tnc5m
  Feb 20 23:05:31.523: INFO: Got endpoints: latency-svc-q2mdg [743.303843ms]
  Feb 20 23:05:31.542: INFO: Created: latency-svc-sfghd
  Feb 20 23:05:31.571: INFO: Got endpoints: latency-svc-pqpm9 [730.367691ms]
  Feb 20 23:05:31.587: INFO: Created: latency-svc-pwjcv
  Feb 20 23:05:31.619: INFO: Got endpoints: latency-svc-9frj4 [746.371707ms]
  Feb 20 23:05:31.636: INFO: Created: latency-svc-nv9kq
  Feb 20 23:05:31.669: INFO: Got endpoints: latency-svc-htkfh [748.579803ms]
  Feb 20 23:05:31.692: INFO: Created: latency-svc-jdljb
  Feb 20 23:05:31.724: INFO: Got endpoints: latency-svc-n4fbr [741.065909ms]
  Feb 20 23:05:31.745: INFO: Created: latency-svc-9rbkj
  Feb 20 23:05:31.769: INFO: Got endpoints: latency-svc-vq4vj [743.995355ms]
  Feb 20 23:05:31.788: INFO: Created: latency-svc-kk7xd
  Feb 20 23:05:31.829: INFO: Got endpoints: latency-svc-98c5h [760.838381ms]
  Feb 20 23:05:31.882: INFO: Got endpoints: latency-svc-tpb7m [756.508564ms]
  Feb 20 23:05:31.886: INFO: Created: latency-svc-2bq5r
  Feb 20 23:05:31.912: INFO: Created: latency-svc-58xn6
  Feb 20 23:05:31.921: INFO: Got endpoints: latency-svc-hbj27 [750.141891ms]
  Feb 20 23:05:31.947: INFO: Created: latency-svc-64kg5
  Feb 20 23:05:31.974: INFO: Got endpoints: latency-svc-rxj5t [747.324688ms]
  Feb 20 23:05:31.997: INFO: Created: latency-svc-qf48b
  Feb 20 23:05:32.020: INFO: Got endpoints: latency-svc-dcwdc [743.538576ms]
  Feb 20 23:05:32.051: INFO: Created: latency-svc-gnpjf
  Feb 20 23:05:32.086: INFO: Got endpoints: latency-svc-ttw85 [738.161092ms]
  Feb 20 23:05:32.128: INFO: Created: latency-svc-kplf5
  Feb 20 23:05:32.132: INFO: Got endpoints: latency-svc-592sr [758.909295ms]
  Feb 20 23:05:32.154: INFO: Created: latency-svc-ghcxk
  Feb 20 23:05:32.168: INFO: Got endpoints: latency-svc-ptb4l [748.325985ms]
  Feb 20 23:05:32.186: INFO: Created: latency-svc-xb7tw
  Feb 20 23:05:32.224: INFO: Got endpoints: latency-svc-tnc5m [755.280574ms]
  Feb 20 23:05:32.242: INFO: Created: latency-svc-8p29f
  Feb 20 23:05:32.271: INFO: Got endpoints: latency-svc-sfghd [747.704367ms]
  Feb 20 23:05:32.296: INFO: Created: latency-svc-r5ffd
  Feb 20 23:05:32.323: INFO: Got endpoints: latency-svc-pwjcv [752.08207ms]
  Feb 20 23:05:32.347: INFO: Created: latency-svc-q67j7
  Feb 20 23:05:32.375: INFO: Got endpoints: latency-svc-nv9kq [756.284219ms]
  Feb 20 23:05:32.399: INFO: Created: latency-svc-gjmnt
  Feb 20 23:05:32.419: INFO: Got endpoints: latency-svc-jdljb [750.053315ms]
  Feb 20 23:05:32.436: INFO: Created: latency-svc-v8rcf
  Feb 20 23:05:32.469: INFO: Got endpoints: latency-svc-9rbkj [744.886675ms]
  Feb 20 23:05:32.487: INFO: Created: latency-svc-vrhwx
  Feb 20 23:05:32.517: INFO: Got endpoints: latency-svc-kk7xd [747.970413ms]
  Feb 20 23:05:32.535: INFO: Created: latency-svc-s94kp
  Feb 20 23:05:32.570: INFO: Got endpoints: latency-svc-2bq5r [740.673348ms]
  Feb 20 23:05:32.589: INFO: Created: latency-svc-79m6h
  Feb 20 23:05:32.622: INFO: Got endpoints: latency-svc-58xn6 [739.484558ms]
  Feb 20 23:05:32.650: INFO: Created: latency-svc-fgctt
  Feb 20 23:05:32.672: INFO: Got endpoints: latency-svc-64kg5 [751.110924ms]
  Feb 20 23:05:32.695: INFO: Created: latency-svc-hthhg
  Feb 20 23:05:32.719: INFO: Got endpoints: latency-svc-qf48b [744.920612ms]
  Feb 20 23:05:32.739: INFO: Created: latency-svc-glhc9
  Feb 20 23:05:32.774: INFO: Got endpoints: latency-svc-gnpjf [753.935288ms]
  Feb 20 23:05:32.807: INFO: Created: latency-svc-7slnb
  Feb 20 23:05:32.825: INFO: Got endpoints: latency-svc-kplf5 [738.868194ms]
  Feb 20 23:05:32.887: INFO: Created: latency-svc-qwrfv
  Feb 20 23:05:32.897: INFO: Got endpoints: latency-svc-ghcxk [765.110882ms]
  Feb 20 23:05:32.921: INFO: Created: latency-svc-n6d66
  Feb 20 23:05:32.926: INFO: Got endpoints: latency-svc-xb7tw [758.513914ms]
  Feb 20 23:05:32.943: INFO: Created: latency-svc-9gbt5
  Feb 20 23:05:32.971: INFO: Got endpoints: latency-svc-8p29f [747.225176ms]
  Feb 20 23:05:33.038: INFO: Got endpoints: latency-svc-r5ffd [767.65684ms]
  Feb 20 23:05:33.080: INFO: Got endpoints: latency-svc-q67j7 [756.582544ms]
  Feb 20 23:05:33.125: INFO: Got endpoints: latency-svc-gjmnt [750.34973ms]
  Feb 20 23:05:33.191: INFO: Got endpoints: latency-svc-v8rcf [771.748615ms]
  Feb 20 23:05:33.238: INFO: Got endpoints: latency-svc-vrhwx [768.444628ms]
  Feb 20 23:05:33.310: INFO: Got endpoints: latency-svc-s94kp [792.833409ms]
  Feb 20 23:05:33.346: INFO: Got endpoints: latency-svc-79m6h [775.673012ms]
  Feb 20 23:05:33.377: INFO: Got endpoints: latency-svc-fgctt [755.471811ms]
  Feb 20 23:05:33.427: INFO: Got endpoints: latency-svc-hthhg [754.469133ms]
  Feb 20 23:05:33.488: INFO: Got endpoints: latency-svc-glhc9 [769.156971ms]
  Feb 20 23:05:33.523: INFO: Got endpoints: latency-svc-7slnb [748.274167ms]
  Feb 20 23:05:33.569: INFO: Got endpoints: latency-svc-qwrfv [743.559141ms]
  Feb 20 23:05:33.618: INFO: Got endpoints: latency-svc-n6d66 [721.586702ms]
  Feb 20 23:05:33.672: INFO: Got endpoints: latency-svc-9gbt5 [745.341768ms]
  Feb 20 23:05:33.672: INFO: Latencies: [24.264973ms 47.006511ms 58.356266ms 71.046775ms 83.345305ms 97.258954ms 114.451496ms 130.435706ms 141.884661ms 152.45113ms 169.669541ms 180.258817ms 197.069982ms 205.015453ms 205.762516ms 206.078011ms 206.092308ms 206.17779ms 206.490373ms 206.707529ms 207.019618ms 208.248608ms 208.857821ms 209.036473ms 209.829752ms 210.015641ms 210.536904ms 210.692354ms 211.116734ms 211.822903ms 211.912371ms 212.579682ms 212.830426ms 212.839548ms 213.484597ms 213.883104ms 214.09237ms 214.243877ms 219.816208ms 221.111371ms 223.53829ms 242.623232ms 273.45818ms 313.976204ms 347.16932ms 394.980048ms 432.983495ms 468.452246ms 503.547595ms 543.78308ms 580.245162ms 615.925235ms 656.867394ms 660.305171ms 673.628595ms 682.790153ms 707.201033ms 710.22178ms 712.164892ms 720.078386ms 721.258991ms 721.586702ms 722.853277ms 728.955036ms 730.279929ms 730.367691ms 731.557036ms 734.255071ms 734.256515ms 735.312389ms 736.60812ms 737.356717ms 738.161092ms 738.868194ms 739.477867ms 739.484558ms 740.246965ms 740.415854ms 740.603207ms 740.673348ms 741.014257ms 741.065909ms 741.13562ms 741.65578ms 741.781938ms 741.939918ms 742.998877ms 743.146331ms 743.303843ms 743.314532ms 743.410421ms 743.458224ms 743.538576ms 743.559141ms 743.995355ms 744.001999ms 744.20653ms 744.277364ms 744.886675ms 744.920612ms 744.977974ms 745.341768ms 745.353202ms 745.598762ms 746.371707ms 746.59727ms 746.759123ms 747.225176ms 747.324688ms 747.704367ms 747.970413ms 748.274167ms 748.307572ms 748.325985ms 748.425982ms 748.579803ms 748.709252ms 749.435134ms 749.946887ms 749.96949ms 749.992859ms 750.053315ms 750.141891ms 750.251911ms 750.34973ms 750.443266ms 750.739881ms 751.110924ms 751.400934ms 751.546334ms 751.582875ms 751.696924ms 751.800525ms 752.08207ms 752.210907ms 752.775321ms 752.899297ms 753.022164ms 753.32621ms 753.613059ms 753.935288ms 754.302325ms 754.469133ms 755.117516ms 755.280574ms 755.471811ms 755.744916ms 756.073392ms 756.284219ms 756.508564ms 756.582544ms 756.601905ms 756.635848ms 757.075649ms 758.513914ms 758.909295ms 759.122143ms 759.699792ms 760.838381ms 761.271782ms 761.576077ms 761.768243ms 762.066216ms 762.846475ms 764.926227ms 765.110882ms 765.334388ms 765.772749ms 765.820843ms 766.492073ms 767.65684ms 767.87257ms 768.444628ms 769.156971ms 769.740445ms 769.780585ms 770.821554ms 771.748615ms 772.768191ms 774.748343ms 775.673012ms 775.755642ms 778.344261ms 781.057879ms 783.820382ms 785.213444ms 786.345938ms 788.660059ms 792.833409ms 793.900508ms 800.281363ms 801.359386ms 807.614659ms 811.145317ms 816.418891ms 819.102439ms 820.616075ms 821.572933ms 840.832892ms 858.509927ms]
  Feb 20 23:05:33.672: INFO: 50 %ile: 744.977974ms
  Feb 20 23:05:33.672: INFO: 90 %ile: 775.673012ms
  Feb 20 23:05:33.672: INFO: 99 %ile: 840.832892ms
  Feb 20 23:05:33.672: INFO: Total sample count: 200
  Feb 20 23:05:33.672: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svc-latency-9345" for this suite. @ 02/20/24 23:05:33.675
• [11.908 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:207
  STEP: Creating a kubernetes client @ 02/20/24 23:05:33.683
  Feb 20 23:05:33.683: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:05:33.683
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:33.699
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:33.701
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 02/20/24 23:05:33.702
  STEP: Saw pod success @ 02/20/24 23:05:37.722
  Feb 20 23:05:37.729: INFO: Trying to get logs from node control-plane pod pod-eb694d6b-afc7-471d-9fa7-fb3054bb4995 container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:05:37.766
  Feb 20 23:05:37.832: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6035" for this suite. @ 02/20/24 23:05:37.834
• [4.157 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2187
  STEP: Creating a kubernetes client @ 02/20/24 23:05:37.84
  Feb 20 23:05:37.840: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:05:37.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:05:37.855
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:05:37.857
  STEP: creating service in namespace services-7241 @ 02/20/24 23:05:37.859
  STEP: creating service affinity-clusterip-transition in namespace services-7241 @ 02/20/24 23:05:37.859
  STEP: creating replication controller affinity-clusterip-transition in namespace services-7241 @ 02/20/24 23:05:37.876
  I0220 23:05:37.887424      22 runners.go:197] Created replication controller with name: affinity-clusterip-transition, namespace: services-7241, replica count: 3
  I0220 23:05:40.938752      22 runners.go:197] affinity-clusterip-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:05:40.954: INFO: Creating new exec pod
  Feb 20 23:05:48.987: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7241 exec execpod-affinityfj98w -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip-transition 80'
  Feb 20 23:05:49.084: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip-transition 80\nConnection to affinity-clusterip-transition 80 port [tcp/http] succeeded!\n"
  Feb 20 23:05:49.084: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:49.084: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7241 exec execpod-affinityfj98w -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.72 80'
  Feb 20 23:05:49.155: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.72 80\nConnection to 10.152.183.72 80 port [tcp/http] succeeded!\n"
  Feb 20 23:05:49.155: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:05:49.166: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7241 exec execpod-affinityfj98w -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.72:80/ ; done'
  Feb 20 23:05:49.327: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n"
  Feb 20 23:05:49.327: INFO: stdout: "\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-vzzbv"
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.327: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.334: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7241 exec execpod-affinityfj98w -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.72:80/ ; done'
  Feb 20 23:05:49.479: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n"
  Feb 20 23:05:49.479: INFO: stdout: "\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-n4l64\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-ldn4j\naffinity-clusterip-transition-ldn4j"
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-n4l64
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:05:49.479: INFO: Received response from host: affinity-clusterip-transition-ldn4j
  Feb 20 23:06:19.479: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7241 exec execpod-affinityfj98w -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.72:80/ ; done'
  Feb 20 23:06:19.646: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.72:80/\n"
  Feb 20 23:06:19.646: INFO: stdout: "\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv\naffinity-clusterip-transition-vzzbv"
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Received response from host: affinity-clusterip-transition-vzzbv
  Feb 20 23:06:19.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:06:19.648: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip-transition in namespace services-7241, will wait for the garbage collector to delete the pods @ 02/20/24 23:06:19.66
  Feb 20 23:06:19.722: INFO: Deleting ReplicationController affinity-clusterip-transition took: 8.194103ms
  Feb 20 23:06:19.822: INFO: Terminating ReplicationController affinity-clusterip-transition pods took: 100.948511ms
  STEP: Destroying namespace "services-7241" for this suite. @ 02/20/24 23:06:24.138
• [46.307 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply a finalizer to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:398
  STEP: Creating a kubernetes client @ 02/20/24 23:06:24.148
  Feb 20 23:06:24.148: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/20/24 23:06:24.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:24.17
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:24.173
  STEP: Creating namespace "e2e-ns-kdxtg" @ 02/20/24 23:06:24.176
  Feb 20 23:06:24.202: INFO: Namespace "e2e-ns-kdxtg-6217" has []v1.FinalizerName{"kubernetes"}
  STEP: Adding e2e finalizer to namespace "e2e-ns-kdxtg-6217" @ 02/20/24 23:06:24.202
  Feb 20 23:06:24.213: INFO: Namespace "e2e-ns-kdxtg-6217" has []v1.FinalizerName{"kubernetes", "e2e.example.com/fakeFinalizer"}
  STEP: Removing e2e finalizer from namespace "e2e-ns-kdxtg-6217" @ 02/20/24 23:06:24.214
  Feb 20 23:06:24.224: INFO: Namespace "e2e-ns-kdxtg-6217" has []v1.FinalizerName{"kubernetes"}
  Feb 20 23:06:24.224: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-7598" for this suite. @ 02/20/24 23:06:24.227
  STEP: Destroying namespace "e2e-ns-kdxtg-6217" for this suite. @ 02/20/24 23:06:24.232
• [0.093 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve multiport endpoints from pods  [Conformance]
test/e2e/network/service.go:846
  STEP: Creating a kubernetes client @ 02/20/24 23:06:24.241
  Feb 20 23:06:24.241: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:06:24.241
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:24.254
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:24.255
  STEP: creating service multi-endpoint-test in namespace services-1175 @ 02/20/24 23:06:24.257
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1175 to expose endpoints map[] @ 02/20/24 23:06:24.295
  Feb 20 23:06:24.297: INFO: Failed go get Endpoints object: endpoints "multi-endpoint-test" not found
  Feb 20 23:06:25.314: INFO: successfully validated that service multi-endpoint-test in namespace services-1175 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-1175 @ 02/20/24 23:06:25.315
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1175 to expose endpoints map[pod1:[100]] @ 02/20/24 23:06:27.353
  Feb 20 23:06:27.359: INFO: successfully validated that service multi-endpoint-test in namespace services-1175 exposes endpoints map[pod1:[100]]
  STEP: Creating pod pod2 in namespace services-1175 @ 02/20/24 23:06:27.359
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1175 to expose endpoints map[pod1:[100] pod2:[101]] @ 02/20/24 23:06:29.373
  Feb 20 23:06:29.381: INFO: successfully validated that service multi-endpoint-test in namespace services-1175 exposes endpoints map[pod1:[100] pod2:[101]]
  STEP: Checking if the Service forwards traffic to pods @ 02/20/24 23:06:29.381
  Feb 20 23:06:29.381: INFO: Creating new exec pod
  Feb 20 23:06:32.400: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1175 exec execpodtclcd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 80'
  Feb 20 23:06:32.493: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 80\nConnection to multi-endpoint-test 80 port [tcp/http] succeeded!\n"
  Feb 20 23:06:32.493: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:06:32.493: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1175 exec execpodtclcd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.47 80'
  Feb 20 23:06:32.566: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.47 80\nConnection to 10.152.183.47 80 port [tcp/http] succeeded!\n"
  Feb 20 23:06:32.566: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:06:32.566: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1175 exec execpodtclcd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 multi-endpoint-test 81'
  Feb 20 23:06:32.640: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 multi-endpoint-test 81\nConnection to multi-endpoint-test 81 port [tcp/*] succeeded!\n"
  Feb 20 23:06:32.640: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:06:32.640: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1175 exec execpodtclcd -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.47 81'
  Feb 20 23:06:32.709: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.47 81\nConnection to 10.152.183.47 81 port [tcp/*] succeeded!\n"
  Feb 20 23:06:32.709: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-1175 @ 02/20/24 23:06:32.709
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1175 to expose endpoints map[pod2:[101]] @ 02/20/24 23:06:32.722
  Feb 20 23:06:34.745: INFO: successfully validated that service multi-endpoint-test in namespace services-1175 exposes endpoints map[pod2:[101]]
  STEP: Deleting pod pod2 in namespace services-1175 @ 02/20/24 23:06:34.745
  STEP: waiting up to 3m0s for service multi-endpoint-test in namespace services-1175 to expose endpoints map[] @ 02/20/24 23:06:34.829
  Feb 20 23:06:34.834: INFO: successfully validated that service multi-endpoint-test in namespace services-1175 exposes endpoints map[]
  Feb 20 23:06:34.834: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1175" for this suite. @ 02/20/24 23:06:34.894
• [10.664 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:85
  STEP: Creating a kubernetes client @ 02/20/24 23:06:34.905
  Feb 20 23:06:34.905: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:06:34.906
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:34.979
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:34.981
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:06:34.989
  STEP: Saw pod success @ 02/20/24 23:06:39.013
  Feb 20 23:06:39.021: INFO: Trying to get logs from node control-plane pod downwardapi-volume-0859fd20-43f1-4dcc-839a-d8f95f64d5c5 container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:06:39.036
  Feb 20 23:06:39.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-438" for this suite. @ 02/20/24 23:06:39.081
• [4.217 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ClusterIP to ExternalName [Conformance]
test/e2e/network/service.go:1493
  STEP: Creating a kubernetes client @ 02/20/24 23:06:39.123
  Feb 20 23:06:39.123: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:06:39.124
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:39.141
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:39.144
  STEP: creating a service clusterip-service with the type=ClusterIP in namespace services-7553 @ 02/20/24 23:06:39.146
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 02/20/24 23:06:39.194
  STEP: creating service externalsvc in namespace services-7553 @ 02/20/24 23:06:39.194
  STEP: creating replication controller externalsvc in namespace services-7553 @ 02/20/24 23:06:39.237
  I0220 23:06:39.243145      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-7553, replica count: 2
  I0220 23:06:42.295406      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the ClusterIP service to type=ExternalName @ 02/20/24 23:06:42.301
  Feb 20 23:06:42.390: INFO: Creating new exec pod
  Feb 20 23:06:44.401: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7553 exec execpodbbwx5 -- /bin/sh -x -c nslookup clusterip-service.services-7553.svc.cluster.local'
  Feb 20 23:06:44.535: INFO: stderr: "+ nslookup clusterip-service.services-7553.svc.cluster.local\n"
  Feb 20 23:06:44.535: INFO: stdout: "Server:\t\t10.152.183.10\nAddress:\t10.152.183.10#53\n\nclusterip-service.services-7553.svc.cluster.local\tcanonical name = externalsvc.services-7553.svc.cluster.local.\nName:\texternalsvc.services-7553.svc.cluster.local\nAddress: 10.152.183.106\n\n"
  Feb 20 23:06:44.535: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-7553, will wait for the garbage collector to delete the pods @ 02/20/24 23:06:44.538
  Feb 20 23:06:44.608: INFO: Deleting ReplicationController externalsvc took: 17.718796ms
  Feb 20 23:06:44.708: INFO: Terminating ReplicationController externalsvc pods took: 100.242179ms
  Feb 20 23:06:47.898: INFO: Cleaning up the ClusterIP to ExternalName test service
  STEP: Destroying namespace "services-7553" for this suite. @ 02/20/24 23:06:47.91
• [8.793 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown and duplicate fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:64
  STEP: Creating a kubernetes client @ 02/20/24 23:06:47.917
  Feb 20 23:06:47.917: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/20/24 23:06:47.917
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:47.937
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:47.939
  STEP: apply creating a deployment @ 02/20/24 23:06:47.94
  Feb 20 23:06:47.941: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-8133" for this suite. @ 02/20/24 23:06:47.947
• [0.036 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:89
  STEP: Creating a kubernetes client @ 02/20/24 23:06:47.953
  Feb 20 23:06:47.953: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:06:47.954
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:47.97
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:47.972
  STEP: Creating secret with name secret-test-map-00ebde14-e4f1-4d96-806d-65a3d60591ef @ 02/20/24 23:06:47.973
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:06:47.978
  STEP: Saw pod success @ 02/20/24 23:06:52.005
  Feb 20 23:06:52.012: INFO: Trying to get logs from node control-plane pod pod-secrets-99407db9-bf9b-41e8-8c20-c83d4c75a13c container secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:06:52.029
  Feb 20 23:06:52.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3888" for this suite. @ 02/20/24 23:06:52.079
• [4.138 seconds]
------------------------------
S
------------------------------
[sig-storage] Projected configMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:174
  STEP: Creating a kubernetes client @ 02/20/24 23:06:52.092
  Feb 20 23:06:52.092: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:06:52.094
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:52.121
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:52.123
  STEP: Creating configMap with name cm-test-opt-del-7d8ca689-8baa-44b9-824e-e268d3b4f81f @ 02/20/24 23:06:52.129
  STEP: Creating configMap with name cm-test-opt-upd-7c91082d-c309-4923-8fcf-ac3f5757f7b4 @ 02/20/24 23:06:52.135
  STEP: Creating the pod @ 02/20/24 23:06:52.141
  STEP: Deleting configmap cm-test-opt-del-7d8ca689-8baa-44b9-824e-e268d3b4f81f @ 02/20/24 23:06:54.212
  STEP: Updating configmap cm-test-opt-upd-7c91082d-c309-4923-8fcf-ac3f5757f7b4 @ 02/20/24 23:06:54.228
  STEP: Creating configMap with name cm-test-opt-create-74c1d1ef-c1ce-4ae0-b8b1-22b8f006273a @ 02/20/24 23:06:54.245
  STEP: waiting to observe update in volume @ 02/20/24 23:06:54.254
  Feb 20 23:06:58.334: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1983" for this suite. @ 02/20/24 23:06:58.362
• [6.277 seconds]
------------------------------
[sig-api-machinery] FieldValidation should create/apply a CR with unknown fields for CRD with no validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:289
  STEP: Creating a kubernetes client @ 02/20/24 23:06:58.369
  Feb 20 23:06:58.369: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/20/24 23:06:58.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:06:58.388
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:06:58.39
  Feb 20 23:06:58.391: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:07:01.489: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-5903" for this suite. @ 02/20/24 23:07:01.521
• [3.173 seconds]
------------------------------
[sig-storage] Secrets should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:125
  STEP: Creating a kubernetes client @ 02/20/24 23:07:01.543
  Feb 20 23:07:01.543: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:07:01.546
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:01.583
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:01.585
  STEP: Creating secret with name secret-test-66b71466-8c17-4f32-995f-9882e6e0d7d8 @ 02/20/24 23:07:01.587
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:07:01.594
  STEP: Saw pod success @ 02/20/24 23:07:05.612
  Feb 20 23:07:05.615: INFO: Trying to get logs from node worker pod pod-secrets-2861f650-ee4c-4e85-aa49-f1db08556f6e container secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:07:05.625
  Feb 20 23:07:05.646: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-35" for this suite. @ 02/20/24 23:07:05.649
• [4.113 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should fail to create secret due to empty secret key [Conformance]
test/e2e/common/node/secrets.go:140
  STEP: Creating a kubernetes client @ 02/20/24 23:07:05.657
  Feb 20 23:07:05.657: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:07:05.658
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:05.676
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:05.679
  STEP: Creating projection with secret that has name secret-emptykey-test-db0028da-f9f4-4428-8f9b-e3a8d8c80fb3 @ 02/20/24 23:07:05.68
  Feb 20 23:07:05.681: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7192" for this suite. @ 02/20/24 23:07:05.684
• [0.035 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] Deployment RecreateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:113
  STEP: Creating a kubernetes client @ 02/20/24 23:07:05.692
  Feb 20 23:07:05.692: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/20/24 23:07:05.693
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:05.711
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:05.713
  Feb 20 23:07:05.714: INFO: Creating deployment "test-recreate-deployment"
  Feb 20 23:07:05.720: INFO: Waiting deployment "test-recreate-deployment" to be updated to revision 1
  Feb 20 23:07:05.723: INFO: new replicaset for deployment "test-recreate-deployment" is yet to be created
  Feb 20 23:07:07.738: INFO: Waiting deployment "test-recreate-deployment" to complete
  Feb 20 23:07:07.745: INFO: Triggering a new rollout for deployment "test-recreate-deployment"
  Feb 20 23:07:07.775: INFO: Updating deployment test-recreate-deployment
  Feb 20 23:07:07.776: INFO: Watching deployment "test-recreate-deployment" to verify that new pods will not run with olds pods
  Feb 20 23:07:07.912: INFO: Deployment "test-recreate-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-recreate-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7873",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "79c2d0cd-fe0d-4a15-bdb9-9a996e67e200",
      ResourceVersion: (string) (len=4) "5391",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844067225,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=570) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |":{"f:type":{}},|
              000000b0  22 66 3a 74 65 6d 70 6c  61 74 65 22 3a 7b 22 66  |"f:template":{"f|
              000000c0  3a 6d 65 74 61 64 61 74  61 22 3a 7b 22 66 3a 6c  |:metadata":{"f:l|
              000000d0  61 62 65 6c 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |abels":{".":{},"|
              000000e0  66 3a 6e 61 6d 65 22 3a  7b 7d 7d 7d 2c 22 66 3a  |f:name":{}}},"f:|
              000000f0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              00000100  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              00000110  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              00000120  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000130  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000140  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000150  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000160  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000170  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000180  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000190  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              000001a0  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000001b0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000001c0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000001d0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000001e0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000001f0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              00000200  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000210  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000220  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000230  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=495) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 63 6f 6e 64 69 74 69  6f 6e 73 22 3a 7b 22 2e  |:conditions":{".|
              00000070  22 3a 7b 7d 2c 22 6b 3a  7b 5c 22 74 79 70 65 5c  |":{},"k:{\"type\|
              00000080  22 3a 5c 22 41 76 61 69  6c 61 62 6c 65 5c 22 7d  |":\"Available\"}|
              00000090  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 6c 61 73  |":{".":{},"f:las|
              000000a0  74 54 72 61 6e 73 69 74  69 6f 6e 54 69 6d 65 22  |tTransitionTime"|
              000000b0  3a 7b 7d 2c 22 66 3a 6c  61 73 74 55 70 64 61 74  |:{},"f:lastUpdat|
              000000c0  65 54 69 6d 65 22 3a 7b  7d 2c 22 66 3a 6d 65 73  |eTime":{},"f:mes|
              000000d0  73 61 67 65 22 3a 7b 7d  2c 22 66 3a 72 65 61 73  |sage":{},"f:reas|
              000000e0  6f 6e 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |on":{},"f:status|
              000000f0  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000100  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              00000110  22 50 72 6f 67 72 65 73  73 69 6e 67 5c 22 7d 22  |"Progressing\"}"|
              00000120  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              00000130  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000140  7b 7d 2c 22 66 3a 6c 61  73 74 55 70 64 61 74 65  |{},"f:lastUpdate|
              00000150  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6d 65 73 73  |Time":{},"f:mess|
              00000160  61 67 65 22 3a 7b 7d 2c  22 66 3a 72 65 61 73 6f  |age":{},"f:reaso|
              00000170  6e 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |n":{},"f:status"|
              00000180  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000190  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              000001a0  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              000001b0  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 75  |eplicas":{},"f:u|
              000001c0  6e 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |navailableReplic|
              000001d0  61 73 22 3a 7b 7d 2c 22  66 3a 75 70 64 61 74 65  |as":{},"f:update|
              000001e0  64 52 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 7d     |dReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=8) "Recreate",
        RollingUpdate: (*v1.RollingUpdateDeployment)(<nil>)
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 1,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067225,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=63) "ReplicaSet \"test-recreate-deployment-76fb77d45\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 20 23:07:07.915: INFO: New ReplicaSet "test-recreate-deployment-76fb77d45" of Deployment "test-recreate-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7873",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "897b3bcc-94ce-4044-9160-cad3467a7681",
      ResourceVersion: (string) (len=4) "5390",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844067227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "79c2d0cd-fe0d-4a15-bdb9-9a996e67e200",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 37 39 63 32 64 30  63 64 2d 66 65 30 64 2d  |\"79c2d0cd-fe0d-|
              00000120  34 61 31 35 2d 62 64 62  39 2d 39 61 39 39 36 65  |4a15-bdb9-9a996e|
              00000130  36 37 65 32 30 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |67e200\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 20 23:07:07.915: INFO: All old ReplicaSets of Deployment "test-recreate-deployment":
  Feb 20 23:07:07.915: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=34) "test-recreate-deployment-dd4bc9d6d",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-7873",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3c5a2baa-2ed7-488c-9049-94a8b8fe0c59",
      ResourceVersion: (string) (len=4) "5380",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844067225,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "1",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-recreate-deployment",
          UID: (types.UID) (len=36) "79c2d0cd-fe0d-4a15-bdb9-9a996e67e200",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 37 39 63 32 64 30  63 64 2d 66 65 30 64 2d  |\"79c2d0cd-fe0d-|
              00000120  34 61 31 35 2d 62 64 62  39 2d 39 61 39 39 36 65  |4a15-bdb9-9a996e|
              00000130  36 37 65 32 30 30 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |67e200\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "sample-pod-3",
          (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "sample-pod-3",
            (string) (len=17) "pod-template-hash": (string) (len=9) "dd4bc9d6d"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 20 23:07:07.918: INFO: Pod "test-recreate-deployment-76fb77d45-lnnw8" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-recreate-deployment-76fb77d45-lnnw8",
      GenerateName: (string) (len=35) "test-recreate-deployment-76fb77d45-",
      Namespace: (string) (len=15) "deployment-7873",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "901d3510-57c0-495b-840a-21d0da2bccdb",
      ResourceVersion: (string) (len=4) "5385",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844067227,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "sample-pod-3",
        (string) (len=17) "pod-template-hash": (string) (len=9) "76fb77d45"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=34) "test-recreate-deployment-76fb77d45",
          UID: (types.UID) (len=36) "897b3bcc-94ce-4044-9160-cad3467a7681",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 38 39  37 62 33 62 63 63 2d 39  |d\":\"897b3bcc-9|
              00000090  34 63 65 2d 34 30 34 34  2d 39 31 36 30 2d 63 61  |4ce-4044-9160-ca|
              000000a0  64 33 34 36 37 61 37 36  38 31 5c 22 7d 22 3a 7b  |d3467a7681\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-4bwff",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-4bwff",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=1) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844067227,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 20 23:07:07.918: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-7873" for this suite. @ 02/20/24 23:07:07.921
• [2.236 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should not start app containers if init containers fail on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:335
  STEP: Creating a kubernetes client @ 02/20/24 23:07:07.928
  Feb 20 23:07:07.928: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename init-container @ 02/20/24 23:07:07.928
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:07.942
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:07.944
  STEP: creating the pod @ 02/20/24 23:07:07.945
  Feb 20 23:07:07.945: INFO: PodSpec: initContainers in spec.initContainers
  Feb 20 23:07:53.948: INFO: init container has failed twice: &v1.Pod{TypeMeta:v1.TypeMeta{Kind:"", APIVersion:""}, ObjectMeta:v1.ObjectMeta{Name:"pod-init-a8e27a6a-8284-4bdf-8fa2-1d91cb97bb82", GenerateName:"", Namespace:"init-container-5871", SelfLink:"", UID:"eef13817-9708-4def-bd03-2d42f05e00c5", ResourceVersion:"5539", Generation:0, CreationTimestamp:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), DeletionTimestamp:<nil>, DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string{"name":"foo", "time":"945786647"}, Annotations:map[string]string{"cni.projectcalico.org/containerID":"1df5e7372e7fbf384686ffd4a5d4492e70b59c45f300a8746a0d60be27210513", "cni.projectcalico.org/podIP":"10.1.171.78/32", "cni.projectcalico.org/podIPs":"10.1.171.78/32"}, OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ManagedFields:[]v1.ManagedFieldsEntry{v1.ManagedFieldsEntry{Manager:"e2e.test", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000d5c7f8), Subresource:""}, v1.ManagedFieldsEntry{Manager:"calico", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.February, 20, 23, 7, 8, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000d5c888), Subresource:"status"}, v1.ManagedFieldsEntry{Manager:"kubelite", Operation:"Update", APIVersion:"v1", Time:time.Date(2024, time.February, 20, 23, 7, 53, 0, time.Local), FieldsType:"FieldsV1", FieldsV1:(*v1.FieldsV1)(0xc000d5c8b8), Subresource:"status"}}}, Spec:v1.PodSpec{Volumes:[]v1.Volume{v1.Volume{Name:"kube-api-access-sfk9d", VolumeSource:v1.VolumeSource{HostPath:(*v1.HostPathVolumeSource)(nil), EmptyDir:(*v1.EmptyDirVolumeSource)(nil), GCEPersistentDisk:(*v1.GCEPersistentDiskVolumeSource)(nil), AWSElasticBlockStore:(*v1.AWSElasticBlockStoreVolumeSource)(nil), GitRepo:(*v1.GitRepoVolumeSource)(nil), Secret:(*v1.SecretVolumeSource)(nil), NFS:(*v1.NFSVolumeSource)(nil), ISCSI:(*v1.ISCSIVolumeSource)(nil), Glusterfs:(*v1.GlusterfsVolumeSource)(nil), PersistentVolumeClaim:(*v1.PersistentVolumeClaimVolumeSource)(nil), RBD:(*v1.RBDVolumeSource)(nil), FlexVolume:(*v1.FlexVolumeSource)(nil), Cinder:(*v1.CinderVolumeSource)(nil), CephFS:(*v1.CephFSVolumeSource)(nil), Flocker:(*v1.FlockerVolumeSource)(nil), DownwardAPI:(*v1.DownwardAPIVolumeSource)(nil), FC:(*v1.FCVolumeSource)(nil), AzureFile:(*v1.AzureFileVolumeSource)(nil), ConfigMap:(*v1.ConfigMapVolumeSource)(nil), VsphereVolume:(*v1.VsphereVirtualDiskVolumeSource)(nil), Quobyte:(*v1.QuobyteVolumeSource)(nil), AzureDisk:(*v1.AzureDiskVolumeSource)(nil), PhotonPersistentDisk:(*v1.PhotonPersistentDiskVolumeSource)(nil), Projected:(*v1.ProjectedVolumeSource)(0xc0037e7a60), PortworxVolume:(*v1.PortworxVolumeSource)(nil), ScaleIO:(*v1.ScaleIOVolumeSource)(nil), StorageOS:(*v1.StorageOSVolumeSource)(nil), CSI:(*v1.CSIVolumeSource)(nil), Ephemeral:(*v1.EphemeralVolumeSource)(nil)}}}, InitContainers:[]v1.Container{v1.Container{Name:"init1", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/false"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-sfk9d", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}, v1.Container{Name:"init2", Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", Command:[]string{"/bin/true"}, Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList(nil), Requests:v1.ResourceList(nil), Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-sfk9d", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, Containers:[]v1.Container{v1.Container{Name:"run1", Image:"registry.k8s.io/pause:3.9", Command:[]string(nil), Args:[]string(nil), WorkingDir:"", Ports:[]v1.ContainerPort(nil), EnvFrom:[]v1.EnvFromSource(nil), Env:[]v1.EnvVar(nil), Resources:v1.ResourceRequirements{Limits:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Requests:v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:100, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"100m", Format:"DecimalSI"}}, Claims:[]v1.ResourceClaim(nil)}, ResizePolicy:[]v1.ContainerResizePolicy(nil), RestartPolicy:(*v1.ContainerRestartPolicy)(nil), VolumeMounts:[]v1.VolumeMount{v1.VolumeMount{Name:"kube-api-access-sfk9d", ReadOnly:true, MountPath:"/var/run/secrets/kubernetes.io/serviceaccount", SubPath:"", MountPropagation:(*v1.MountPropagationMode)(nil), SubPathExpr:""}}, VolumeDevices:[]v1.VolumeDevice(nil), LivenessProbe:(*v1.Probe)(nil), ReadinessProbe:(*v1.Probe)(nil), StartupProbe:(*v1.Probe)(nil), Lifecycle:(*v1.Lifecycle)(nil), TerminationMessagePath:"/dev/termination-log", TerminationMessagePolicy:"File", ImagePullPolicy:"IfNotPresent", SecurityContext:(*v1.SecurityContext)(nil), Stdin:false, StdinOnce:false, TTY:false}}, EphemeralContainers:[]v1.EphemeralContainer(nil), RestartPolicy:"Always", TerminationGracePeriodSeconds:(*int64)(0xc00284a428), ActiveDeadlineSeconds:(*int64)(nil), DNSPolicy:"ClusterFirst", NodeSelector:map[string]string(nil), ServiceAccountName:"default", DeprecatedServiceAccount:"default", AutomountServiceAccountToken:(*bool)(nil), NodeName:"worker", HostNetwork:false, HostPID:false, HostIPC:false, ShareProcessNamespace:(*bool)(nil), SecurityContext:(*v1.PodSecurityContext)(0xc000335340), ImagePullSecrets:[]v1.LocalObjectReference(nil), Hostname:"", Subdomain:"", Affinity:(*v1.Affinity)(nil), SchedulerName:"default-scheduler", Tolerations:[]v1.Toleration{v1.Toleration{Key:"node.kubernetes.io/not-ready", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc00284a4b0)}, v1.Toleration{Key:"node.kubernetes.io/unreachable", Operator:"Exists", Value:"", Effect:"NoExecute", TolerationSeconds:(*int64)(0xc00284a4d0)}}, HostAliases:[]v1.HostAlias(nil), PriorityClassName:"", Priority:(*int32)(0xc00284a4d8), DNSConfig:(*v1.PodDNSConfig)(nil), ReadinessGates:[]v1.PodReadinessGate(nil), RuntimeClassName:(*string)(nil), EnableServiceLinks:(*bool)(0xc00284a4dc), PreemptionPolicy:(*v1.PreemptionPolicy)(0xc0010ecc90), Overhead:v1.ResourceList(nil), TopologySpreadConstraints:[]v1.TopologySpreadConstraint(nil), SetHostnameAsFQDN:(*bool)(nil), OS:(*v1.PodOS)(nil), HostUsers:(*bool)(nil), SchedulingGates:[]v1.PodSchedulingGate(nil), ResourceClaims:[]v1.PodResourceClaim(nil)}, Status:v1.PodStatus{Phase:"Pending", Conditions:[]v1.PodCondition{v1.PodCondition{Type:"Initialized", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), Reason:"ContainersNotInitialized", Message:"containers with incomplete status: [init1 init2]"}, v1.PodCondition{Type:"Ready", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"ContainersReady", Status:"False", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), Reason:"ContainersNotReady", Message:"containers with unready status: [run1]"}, v1.PodCondition{Type:"PodScheduled", Status:"True", LastProbeTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), Reason:"", Message:""}}, Message:"", Reason:"", NominatedNodeName:"", HostIP:"10.100.138.108", HostIPs:[]v1.HostIP(nil), PodIP:"10.1.171.78", PodIPs:[]v1.PodIP{v1.PodIP{IP:"10.1.171.78"}}, StartTime:time.Date(2024, time.February, 20, 23, 7, 7, 0, time.Local), InitContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"init1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc000335420)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(0xc000335490)}, Ready:false, RestartCount:3, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"registry.k8s.io/e2e-test-images/busybox@sha256:2e0f836850e09b8b7cc937681d6194537a09fbd5f6b9e08f4d646a85128e8937", ContainerID:"containerd://828dbcb05580824ca11a5f3494e217a9747320641116ef66affe2b3ab78805a9", Started:(*bool)(0xc00284a57a), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}, v1.ContainerStatus{Name:"init2", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc0037e7ae0), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/e2e-test-images/busybox:1.29-4", ImageID:"", ContainerID:"", Started:(*bool)(0xc00284a58f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, ContainerStatuses:[]v1.ContainerStatus{v1.ContainerStatus{Name:"run1", State:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(0xc0037e7ac0), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, LastTerminationState:v1.ContainerState{Waiting:(*v1.ContainerStateWaiting)(nil), Running:(*v1.ContainerStateRunning)(nil), Terminated:(*v1.ContainerStateTerminated)(nil)}, Ready:false, RestartCount:0, Image:"registry.k8s.io/pause:3.9", ImageID:"", ContainerID:"", Started:(*bool)(0xc00284a55f), AllocatedResources:v1.ResourceList(nil), Resources:(*v1.ResourceRequirements)(nil)}}, QOSClass:"Burstable", EphemeralContainerStatuses:[]v1.ContainerStatus(nil), Resize:"", ResourceClaimStatuses:[]v1.PodResourceClaimStatus(nil)}}
  Feb 20 23:07:53.948: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-5871" for this suite. @ 02/20/24 23:07:53.952
• [46.030 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should complete a service status lifecycle [Conformance]
test/e2e/network/service.go:3326
  STEP: Creating a kubernetes client @ 02/20/24 23:07:53.958
  Feb 20 23:07:53.958: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:07:53.958
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:53.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:53.974
  STEP: creating a Service @ 02/20/24 23:07:53.978
  STEP: watching for the Service to be added @ 02/20/24 23:07:54.021
  Feb 20 23:07:54.023: INFO: Found Service test-service-lgb65 in namespace services-3987 with labels: map[test-service-static:true] & ports [{http TCP <nil> 80 {0 80 } 0}]
  Feb 20 23:07:54.023: INFO: Service test-service-lgb65 created
  STEP: Getting /status @ 02/20/24 23:07:54.024
  Feb 20 23:07:54.027: INFO: Service test-service-lgb65 has LoadBalancer: {[]}
  STEP: patching the ServiceStatus @ 02/20/24 23:07:54.027
  STEP: watching for the Service to be patched @ 02/20/24 23:07:54.037
  Feb 20 23:07:54.041: INFO: observed Service test-service-lgb65 in namespace services-3987 with annotations: map[] & LoadBalancer: {[]}
  Feb 20 23:07:54.041: INFO: Found Service test-service-lgb65 in namespace services-3987 with annotations: map[patchedstatus:true] & LoadBalancer: {[{203.0.113.1  []}]}
  Feb 20 23:07:54.041: INFO: Service test-service-lgb65 has service status patched
  STEP: updating the ServiceStatus @ 02/20/24 23:07:54.041
  Feb 20 23:07:54.050: INFO: updatedStatus.Conditions: []v1.Condition{v1.Condition{Type:"StatusUpdate", Status:"True", ObservedGeneration:0, LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Service to be updated @ 02/20/24 23:07:54.05
  Feb 20 23:07:54.051: INFO: Observed Service test-service-lgb65 in namespace services-3987 with annotations: map[] & Conditions: {[]}
  Feb 20 23:07:54.051: INFO: Observed event: &Service{ObjectMeta:{test-service-lgb65  services-3987  414dd7f4-a505-482a-9ead-5c472671d2a5 5546 0 2024-02-20 23:07:53 +0000 UTC <nil> <nil> map[test-service-static:true] map[patchedstatus:true] [] [] [{e2e.test Update v1 2024-02-20 23:07:53 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:test-service-static":{}}},"f:spec":{"f:internalTrafficPolicy":{},"f:ports":{".":{},"k:{\"port\":80,\"protocol\":\"TCP\"}":{".":{},"f:name":{},"f:port":{},"f:protocol":{},"f:targetPort":{}}},"f:sessionAffinity":{},"f:type":{}}} } {e2e.test Update v1 2024-02-20 23:07:54 +0000 UTC FieldsV1 {"f:metadata":{"f:annotations":{".":{},"f:patchedstatus":{}}},"f:status":{"f:loadBalancer":{"f:ingress":{}}}} status}]},Spec:ServiceSpec{Ports:[]ServicePort{ServicePort{Name:http,Protocol:TCP,Port:80,TargetPort:{0 80 },NodePort:0,AppProtocol:nil,},},Selector:map[string]string{},ClusterIP:10.152.183.205,Type:ClusterIP,ExternalIPs:[],SessionAffinity:None,LoadBalancerIP:,LoadBalancerSourceRanges:[],ExternalName:,ExternalTrafficPolicy:,HealthCheckNodePort:0,PublishNotReadyAddresses:false,SessionAffinityConfig:nil,IPFamilyPolicy:*SingleStack,ClusterIPs:[10.152.183.205],IPFamilies:[IPv4],AllocateLoadBalancerNodePorts:nil,LoadBalancerClass:nil,InternalTrafficPolicy:*Cluster,},Status:ServiceStatus{LoadBalancer:LoadBalancerStatus{Ingress:[]LoadBalancerIngress{LoadBalancerIngress{IP:203.0.113.1,Hostname:,Ports:[]PortStatus{},},},},Conditions:[]Condition{},},}
  Feb 20 23:07:54.051: INFO: Found Service test-service-lgb65 in namespace services-3987 with annotations: map[patchedstatus:true] & Conditions: [{StatusUpdate True 0 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Feb 20 23:07:54.051: INFO: Service test-service-lgb65 has service status updated
  STEP: patching the service @ 02/20/24 23:07:54.051
  STEP: watching for the Service to be patched @ 02/20/24 23:07:54.061
  Feb 20 23:07:54.063: INFO: observed Service test-service-lgb65 in namespace services-3987 with labels: map[test-service-static:true]
  Feb 20 23:07:54.063: INFO: observed Service test-service-lgb65 in namespace services-3987 with labels: map[test-service-static:true]
  Feb 20 23:07:54.063: INFO: observed Service test-service-lgb65 in namespace services-3987 with labels: map[test-service-static:true]
  Feb 20 23:07:54.063: INFO: Found Service test-service-lgb65 in namespace services-3987 with labels: map[test-service:patched test-service-static:true]
  Feb 20 23:07:54.063: INFO: Service test-service-lgb65 patched
  STEP: deleting the service @ 02/20/24 23:07:54.063
  STEP: watching for the Service to be deleted @ 02/20/24 23:07:54.107
  Feb 20 23:07:54.108: INFO: Observed event: ADDED
  Feb 20 23:07:54.108: INFO: Observed event: MODIFIED
  Feb 20 23:07:54.108: INFO: Observed event: MODIFIED
  Feb 20 23:07:54.108: INFO: Observed event: MODIFIED
  Feb 20 23:07:54.108: INFO: Found Service test-service-lgb65 in namespace services-3987 with labels: map[test-service:patched test-service-static:true] & annotations: map[patchedstatus:true]
  Feb 20 23:07:54.108: INFO: Service test-service-lgb65 deleted
  Feb 20 23:07:54.108: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-3987" for this suite. @ 02/20/24 23:07:54.111
• [0.158 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should not be able to mutate or prevent deletion of webhook configuration objects [Conformance]
test/e2e/apimachinery/webhook.go:273
  STEP: Creating a kubernetes client @ 02/20/24 23:07:54.116
  Feb 20 23:07:54.116: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:07:54.117
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:54.133
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:54.134
  STEP: Setting up server cert @ 02/20/24 23:07:54.158
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:07:54.447
  STEP: Deploying the webhook pod @ 02/20/24 23:07:54.457
  STEP: Wait for the deployment to be ready @ 02/20/24 23:07:54.468
  Feb 20 23:07:54.472: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:07:56.493
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:07:56.557
  Feb 20 23:07:57.557: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a validating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 02/20/24 23:07:57.57
  STEP: Registering a mutating webhook on ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects, via the AdmissionRegistration API @ 02/20/24 23:07:57.614
  STEP: Creating a dummy validating-webhook-configuration object @ 02/20/24 23:07:57.642
  STEP: Deleting the validating-webhook-configuration, which should be possible to remove @ 02/20/24 23:07:57.662
  STEP: Creating a dummy mutating-webhook-configuration object @ 02/20/24 23:07:57.676
  STEP: Deleting the mutating-webhook-configuration, which should be possible to remove @ 02/20/24 23:07:57.693
  Feb 20 23:07:57.709: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-5578" for this suite. @ 02/20/24 23:07:57.819
  STEP: Destroying namespace "webhook-markers-3247" for this suite. @ 02/20/24 23:07:57.825
• [3.714 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:187
  STEP: Creating a kubernetes client @ 02/20/24 23:07:57.831
  Feb 20 23:07:57.831: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:07:57.832
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:07:57.845
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:07:57.848
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 02/20/24 23:07:57.849
  STEP: Saw pod success @ 02/20/24 23:08:01.876
  Feb 20 23:08:01.881: INFO: Trying to get logs from node control-plane pod pod-eedca181-4bbb-44ed-8496-cad0aabe1ce6 container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:08:01.892
  Feb 20 23:08:01.934: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9481" for this suite. @ 02/20/24 23:08:01.94
• [4.120 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:177
  STEP: Creating a kubernetes client @ 02/20/24 23:08:01.954
  Feb 20 23:08:01.954: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:08:01.955
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:01.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:01.975
  STEP: Creating a pod to test emptydir 0666 on node default medium @ 02/20/24 23:08:01.977
  STEP: Saw pod success @ 02/20/24 23:08:06.008
  Feb 20 23:08:06.015: INFO: Trying to get logs from node control-plane pod pod-253519b2-4be6-4cd4-bcde-806869862ffd container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:08:06.03
  Feb 20 23:08:06.058: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-6772" for this suite. @ 02/20/24 23:08:06.061
• [4.113 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should have Endpoints and EndpointSlices pointing to API Server [Conformance]
test/e2e/network/endpointslice.go:68
  STEP: Creating a kubernetes client @ 02/20/24 23:08:06.068
  Feb 20 23:08:06.068: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename endpointslice @ 02/20/24 23:08:06.068
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:06.082
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:06.083
  Feb 20 23:08:06.089: INFO: Endpoints addresses: [10.100.138.108 10.100.138.210] , ports: [16443]
  Feb 20 23:08:06.089: INFO: EndpointSlices addresses: [10.100.138.108 10.100.138.210] , ports: [16443]
  Feb 20 23:08:06.089: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-8716" for this suite. @ 02/20/24 23:08:06.091
• [0.030 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not be blocked by dependency circle [Conformance]
test/e2e/apimachinery/garbage_collector.go:817
  STEP: Creating a kubernetes client @ 02/20/24 23:08:06.097
  Feb 20 23:08:06.097: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/20/24 23:08:06.098
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:06.11
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:06.111
  Feb 20 23:08:06.177: INFO: pod1.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod3", UID:"a217da8f-9d8c-4473-801a-9c66471bb53e", Controller:(*bool)(0xc003bac156), BlockOwnerDeletion:(*bool)(0xc003bac157)}}
  Feb 20 23:08:06.201: INFO: pod2.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod1", UID:"65e7ee43-0000-4a62-bcf1-116dd22747bb", Controller:(*bool)(0xc003bac36a), BlockOwnerDeletion:(*bool)(0xc003bac36b)}}
  Feb 20 23:08:06.221: INFO: pod3.ObjectMeta.OwnerReferences=[]v1.OwnerReference{v1.OwnerReference{APIVersion:"v1", Kind:"Pod", Name:"pod2", UID:"afe31e1b-2b51-4e4d-82c0-72384b4c7fa9", Controller:(*bool)(0xc00408f3f6), BlockOwnerDeletion:(*bool)(0xc00408f3f7)}}
  Feb 20 23:08:11.238: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1974" for this suite. @ 02/20/24 23:08:11.24
• [5.149 seconds]
------------------------------
SS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message if TerminationMessagePath is set as non-root user and at a non-default path [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:195
  STEP: Creating a kubernetes client @ 02/20/24 23:08:11.247
  Feb 20 23:08:11.247: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-runtime @ 02/20/24 23:08:11.247
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:11.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:11.269
  STEP: create the container @ 02/20/24 23:08:11.27
  W0220 23:08:11.279900      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 02/20/24 23:08:11.279
  STEP: get the container status @ 02/20/24 23:08:14.3
  STEP: the container should be terminated @ 02/20/24 23:08:14.306
  STEP: the termination message should be set @ 02/20/24 23:08:14.306
  Feb 20 23:08:14.306: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 02/20/24 23:08:14.306
  Feb 20 23:08:14.326: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-5400" for this suite. @ 02/20/24 23:08:14.333
• [3.093 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-network] HostPort validates that there is no conflict between pods with same hostPort but different hostIP and protocol [LinuxOnly] [Conformance]
test/e2e/network/hostport.go:63
  STEP: Creating a kubernetes client @ 02/20/24 23:08:14.341
  Feb 20 23:08:14.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename hostport @ 02/20/24 23:08:14.341
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:14.356
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:14.357
  STEP: Trying to create a pod(pod1) with hostport 54323 and hostIP 127.0.0.1 and expect scheduled @ 02/20/24 23:08:14.361
  STEP: Trying to create another pod(pod2) with hostport 54323 but hostIP 10.100.138.108 on the node which pod1 resides and expect scheduled @ 02/20/24 23:08:16.374
  STEP: Trying to create a third pod(pod3) with hostport 54323, hostIP 10.100.138.108 but use UDP protocol on the node which pod2 resides @ 02/20/24 23:08:18.392
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 127.0.0.1, port: 54323 @ 02/20/24 23:08:24.473
  Feb 20 23:08:24.473: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 --interface 10.100.138.108 http://127.0.0.1:54323/hostname] Namespace:hostport-6530 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:08:24.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:08:24.474: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:08:24.474: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-6530/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+--interface+10.100.138.108+http%3A%2F%2F127.0.0.1%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.100.138.108, port: 54323 @ 02/20/24 23:08:24.516
  Feb 20 23:08:24.516: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g --connect-timeout 5 http://10.100.138.108:54323/hostname] Namespace:hostport-6530 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:08:24.516: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:08:24.517: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:08:24.517: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-6530/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+--connect-timeout+5+http%3A%2F%2F10.100.138.108%3A54323%2Fhostname&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  STEP: checking connectivity from pod e2e-host-exec to serverIP: 10.100.138.108, port: 54323 UDP @ 02/20/24 23:08:24.548
  Feb 20 23:08:24.548: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostname | nc -u -w 5 10.100.138.108 54323] Namespace:hostport-6530 PodName:e2e-host-exec ContainerName:e2e-host-exec Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:08:24.548: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:08:24.548: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:08:24.548: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/hostport-6530/pods/e2e-host-exec/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostname+%7C+nc+-u+-w+5+10.100.138.108+54323&container=e2e-host-exec&container=e2e-host-exec&stderr=true&stdout=true)
  Feb 20 23:08:29.589: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "hostport-6530" for this suite. @ 02/20/24 23:08:29.598
• [15.280 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings and Item Mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:88
  STEP: Creating a kubernetes client @ 02/20/24 23:08:29.622
  Feb 20 23:08:29.622: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:08:29.624
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:29.667
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:29.675
  STEP: Creating projection with secret that has name projected-secret-test-map-fd475f49-68e5-4db1-a960-d9d0e41fcf0a @ 02/20/24 23:08:29.681
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:08:29.698
  STEP: Saw pod success @ 02/20/24 23:08:33.747
  Feb 20 23:08:33.753: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-751c9446-13e0-4f9f-8ce7-4b432efea998 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:08:33.768
  Feb 20 23:08:33.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9771" for this suite. @ 02/20/24 23:08:33.826
• [4.217 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:74
  STEP: Creating a kubernetes client @ 02/20/24 23:08:33.842
  Feb 20 23:08:33.842: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:08:33.843
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:33.873
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:33.876
  STEP: Creating configMap with name configmap-test-volume-d9752e96-79c4-41c5-8f4f-e87c6de59f14 @ 02/20/24 23:08:33.878
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:08:33.885
  STEP: Saw pod success @ 02/20/24 23:08:37.912
  Feb 20 23:08:37.919: INFO: Trying to get logs from node control-plane pod pod-configmaps-817e13e8-c007-4b0a-bd6e-d61554e1267b container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:08:37.934
  Feb 20 23:08:37.984: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8981" for this suite. @ 02/20/24 23:08:37.993
• [4.165 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] FieldValidation should create/apply an invalid CR with extra properties for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:350
  STEP: Creating a kubernetes client @ 02/20/24 23:08:38.008
  Feb 20 23:08:38.008: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/20/24 23:08:38.009
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:38.029
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:38.031
  Feb 20 23:08:38.033: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  W0220 23:08:38.034398      22 field_validation.go:423] props: &JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{spec: {  <nil>  object   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[cronSpec:{  <nil>  string   nil <nil> false <nil> false <nil> <nil> ^(\d+|\*)(/\d+)?(\s+(\d+|\*)(/\d+)?){4}$ <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} foo:{  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []} ports:{  <nil>  array   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] &JSONSchemaPropsOrArray{Schema:&JSONSchemaProps{ID:,Schema:,Ref:nil,Description:,Type:object,Format:,Title:,Default:nil,Maximum:nil,ExclusiveMaximum:false,Minimum:nil,ExclusiveMinimum:false,MaxLength:nil,MinLength:nil,Pattern:,MaxItems:nil,MinItems:nil,UniqueItems:false,MultipleOf:nil,Enum:[]JSON{},MaxProperties:nil,MinProperties:nil,Required:[containerPort protocol],Items:nil,AllOf:[]JSONSchemaProps{},OneOf:[]JSONSchemaProps{},AnyOf:[]JSONSchemaProps{},Not:nil,Properties:map[string]JSONSchemaProps{containerPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostIP: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},hostPort: {  <nil>  integer int32  nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},name: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},protocol: {  <nil>  string   nil <nil> false <nil> false <nil> <nil>  <nil> <nil> false <nil> [] <nil> <nil> [] nil [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},},JSONSchemas:[]JSONSchemaProps{},} [] [] [] nil map[] nil map[] map[] nil map[] nil nil false <nil> false false [containerPort protocol] 0xc00154bdd0 <nil> []}] nil map[] map[] nil map[] nil nil false <nil> false false [] <nil> <nil> []},},AdditionalProperties:nil,PatternProperties:map[string]JSONSchemaProps{},Dependencies:JSONSchemaDependencies{},AdditionalItems:nil,Definitions:JSONSchemaDefinitions{},ExternalDocs:nil,Example:nil,Nullable:false,XPreserveUnknownFields:nil,XEmbeddedResource:false,XIntOrString:false,XListMapKeys:[],XListType:nil,XMapType:nil,XValidations:[]ValidationRule{},}
  W0220 23:08:40.562810      22 warnings.go:70] unknown field "alpha"
  W0220 23:08:40.562881      22 warnings.go:70] unknown field "beta"
  W0220 23:08:40.562895      22 warnings.go:70] unknown field "delta"
  W0220 23:08:40.562907      22 warnings.go:70] unknown field "epsilon"
  W0220 23:08:40.562918      22 warnings.go:70] unknown field "gamma"
  Feb 20 23:08:41.122: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-9986" for this suite. @ 02/20/24 23:08:41.154
• [3.163 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:47
  STEP: Creating a kubernetes client @ 02/20/24 23:08:41.174
  Feb 20 23:08:41.174: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:08:41.177
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:41.211
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:41.213
  STEP: Creating configMap with name projected-configmap-test-volume-3a5a05e0-1b1b-4c1a-9093-aca1315eb2d8 @ 02/20/24 23:08:41.214
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:08:41.219
  STEP: Saw pod success @ 02/20/24 23:08:47.241
  Feb 20 23:08:47.248: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-af136ec2-225c-4e39-8092-1fd100c40dc8 container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:08:47.263
  Feb 20 23:08:47.309: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5617" for this suite. @ 02/20/24 23:08:47.316
• [6.155 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl describe should check if kubectl describe prints relevant information for rc and pods  [Conformance]
test/e2e/kubectl/kubectl.go:1342
  STEP: Creating a kubernetes client @ 02/20/24 23:08:47.33
  Feb 20 23:08:47.331: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:08:47.331
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:47.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:47.353
  Feb 20 23:08:47.354: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 create -f -'
  Feb 20 23:08:47.888: INFO: stderr: ""
  Feb 20 23:08:47.888: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  Feb 20 23:08:47.888: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 create -f -'
  Feb 20 23:08:48.121: INFO: stderr: ""
  Feb 20 23:08:48.121: INFO: stdout: "service/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 02/20/24 23:08:48.121
  Feb 20 23:08:49.130: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:08:49.130: INFO: Found 0 / 1
  Feb 20 23:08:50.129: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:08:50.130: INFO: Found 1 / 1
  Feb 20 23:08:50.130: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Feb 20 23:08:50.136: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:08:50.137: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Feb 20 23:08:50.137: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 describe pod agnhost-primary-n9wm2'
  Feb 20 23:08:50.215: INFO: stderr: ""
  Feb 20 23:08:50.215: INFO: stdout: "Name:             agnhost-primary-n9wm2\nNamespace:        kubectl-3053\nPriority:         0\nService Account:  default\nNode:             control-plane/10.100.138.210\nStart Time:       Tue, 20 Feb 2024 23:08:48 +0000\nLabels:           app=agnhost\n                  role=primary\nAnnotations:      cni.projectcalico.org/containerID: fd7bcadd3e6bee2fed6a61f5e12d5a9a0353cee0a162135fa8aa823bfbff2527\n                  cni.projectcalico.org/podIP: 10.1.235.167/32\n                  cni.projectcalico.org/podIPs: 10.1.235.167/32\nStatus:           Running\nIP:               10.1.235.167\nIPs:\n  IP:           10.1.235.167\nControlled By:  ReplicationController/agnhost-primary\nContainers:\n  agnhost-primary:\n    Container ID:   containerd://a711c90d33345de98082aab79986745090722375a7f840035da4f26ab5172f38\n    Image:          registry.k8s.io/e2e-test-images/agnhost:2.45\n    Image ID:       registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4\n    Port:           6379/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Tue, 20 Feb 2024 23:08:48 +0000\n    Ready:          True\n    Restart Count:  0\n    Environment:    <none>\n    Mounts:\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-54kx4 (ro)\nConditions:\n  Type              Status\n  Initialized       True \n  Ready             True \n  ContainersReady   True \n  PodScheduled      True \nVolumes:\n  kube-api-access-54kx4:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\nQoS Class:                   BestEffort\nNode-Selectors:              <none>\nTolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  1s    default-scheduler  Successfully assigned kubectl-3053/agnhost-primary-n9wm2 to control-plane\n  Normal  Pulled     2s    kubelet            Container image \"registry.k8s.io/e2e-test-images/agnhost:2.45\" already present on machine\n  Normal  Created    2s    kubelet            Created container agnhost-primary\n  Normal  Started    2s    kubelet            Started container agnhost-primary\n"
  Feb 20 23:08:50.215: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 describe rc agnhost-primary'
  Feb 20 23:08:50.265: INFO: stderr: ""
  Feb 20 23:08:50.265: INFO: stdout: "Name:         agnhost-primary\nNamespace:    kubectl-3053\nSelector:     app=agnhost,role=primary\nLabels:       app=agnhost\n              role=primary\nAnnotations:  <none>\nReplicas:     1 current / 1 desired\nPods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed\nPod Template:\n  Labels:  app=agnhost\n           role=primary\n  Containers:\n   agnhost-primary:\n    Image:        registry.k8s.io/e2e-test-images/agnhost:2.45\n    Port:         6379/TCP\n    Host Port:    0/TCP\n    Environment:  <none>\n    Mounts:       <none>\n  Volumes:        <none>\nEvents:\n  Type    Reason            Age   From                    Message\n  ----    ------            ----  ----                    -------\n  Normal  SuccessfulCreate  2s    replication-controller  Created pod: agnhost-primary-n9wm2\n"
  Feb 20 23:08:50.265: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 describe service agnhost-primary'
  Feb 20 23:08:50.312: INFO: stderr: ""
  Feb 20 23:08:50.312: INFO: stdout: "Name:              agnhost-primary\nNamespace:         kubectl-3053\nLabels:            app=agnhost\n                   role=primary\nAnnotations:       <none>\nSelector:          app=agnhost,role=primary\nType:              ClusterIP\nIP Family Policy:  SingleStack\nIP Families:       IPv4\nIP:                10.152.183.202\nIPs:               10.152.183.202\nPort:              <unset>  6379/TCP\nTargetPort:        agnhost-server/TCP\nEndpoints:         10.1.235.167:6379\nSession Affinity:  None\nEvents:            <none>\n"
  Feb 20 23:08:50.314: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 describe node control-plane'
  Feb 20 23:08:50.376: INFO: stderr: ""
  Feb 20 23:08:50.376: INFO: stdout: "Name:               control-plane\nRoles:              <none>\nLabels:             beta.kubernetes.io/arch=amd64\n                    beta.kubernetes.io/os=linux\n                    kubernetes.io/arch=amd64\n                    kubernetes.io/hostname=control-plane\n                    kubernetes.io/os=linux\n                    microk8s.io/cluster=true\n                    node.kubernetes.io/microk8s-controlplane=microk8s-controlplane\nAnnotations:        node.alpha.kubernetes.io/ttl: 0\n                    projectcalico.org/IPv4Address: 10.100.138.210/24\n                    projectcalico.org/IPv4VXLANTunnelAddr: 10.1.235.128\n                    volumes.kubernetes.io/controller-managed-attach-detach: true\nCreationTimestamp:  Tue, 20 Feb 2024 22:50:12 +0000\nTaints:             <none>\nUnschedulable:      false\nLease:\n  HolderIdentity:  control-plane\n  AcquireTime:     <unset>\n  RenewTime:       Tue, 20 Feb 2024 23:08:46 +0000\nConditions:\n  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message\n  ----                 ------  -----------------                 ------------------                ------                       -------\n  NetworkUnavailable   False   Tue, 20 Feb 2024 22:52:29 +0000   Tue, 20 Feb 2024 22:52:29 +0000   CalicoIsUp                   Calico is running on this node\n  MemoryPressure       False   Tue, 20 Feb 2024 23:05:35 +0000   Tue, 20 Feb 2024 22:50:12 +0000   KubeletHasSufficientMemory   kubelet has sufficient memory available\n  DiskPressure         False   Tue, 20 Feb 2024 23:05:35 +0000   Tue, 20 Feb 2024 22:50:12 +0000   KubeletHasNoDiskPressure     kubelet has no disk pressure\n  PIDPressure          False   Tue, 20 Feb 2024 23:05:35 +0000   Tue, 20 Feb 2024 22:50:12 +0000   KubeletHasSufficientPID      kubelet has sufficient PID available\n  Ready                True    Tue, 20 Feb 2024 23:05:35 +0000   Tue, 20 Feb 2024 22:50:36 +0000   KubeletReady                 kubelet is posting ready status. AppArmor enabled\nAddresses:\n  InternalIP:  10.100.138.210\n  Hostname:    control-plane\nCapacity:\n  cpu:                4\n  ephemeral-storage:  20134592Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             7090004Ki\n  pods:               110\nAllocatable:\n  cpu:                4\n  ephemeral-storage:  19086016Ki\n  hugepages-1Gi:      0\n  hugepages-2Mi:      0\n  memory:             6987604Ki\n  pods:               110\nSystem Info:\n  Machine ID:                 4ad43e0093ac40f09d5f93d2ef6a51a7\n  System UUID:                4ad43e0093ac40f09d5f93d2ef6a51a7\n  Boot ID:                    783ac0f8-4010-4bf1-a91d-1026e8c6b231\n  Kernel Version:             5.15.0-92-generic\n  OS Image:                   Ubuntu 22.04.3 LTS\n  Operating System:           linux\n  Architecture:               amd64\n  Container Runtime Version:  containerd://1.6.28\n  Kubelet Version:            v1.28.7\n  Kube-Proxy Version:         v1.28.7\nNon-terminated Pods:          (5 in total)\n  Namespace                   Name                                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  Age\n  ---------                   ----                                                       ------------  ----------  ---------------  -------------  ---\n  kube-system                 calico-node-8lb8x                                          250m (6%)     0 (0%)      0 (0%)           0 (0%)         16m\n  kube-system                 calico-kube-controllers-77bd7c5b-fdkz8                     0 (0%)        0 (0%)      0 (0%)           0 (0%)         18m\n  kube-system                 coredns-864597b5fd-jkxfx                                   100m (2%)     0 (0%)      70Mi (1%)        170Mi (2%)     18m\n  sonobuoy                    sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn    0 (0%)        0 (0%)      0 (0%)           0 (0%)         8m33s\n  kubectl-3053                agnhost-primary-n9wm2                                      0 (0%)        0 (0%)      0 (0%)           0 (0%)         2s\nAllocated resources:\n  (Total limits may be over 100 percent, i.e., overcommitted.)\n  Resource           Requests   Limits\n  --------           --------   ------\n  cpu                350m (8%)  0 (0%)\n  memory             70Mi (1%)  170Mi (2%)\n  ephemeral-storage  0 (0%)     0 (0%)\n  hugepages-1Gi      0 (0%)     0 (0%)\n  hugepages-2Mi      0 (0%)     0 (0%)\nEvents:              <none>\n"
  Feb 20 23:08:50.376: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3053 describe namespace kubectl-3053'
  Feb 20 23:08:50.420: INFO: stderr: ""
  Feb 20 23:08:50.420: INFO: stdout: "Name:         kubectl-3053\nLabels:       e2e-framework=kubectl\n              e2e-run=6a258d42-5a93-49fd-a4d2-3dbb83b506fb\n              kubernetes.io/metadata.name=kubectl-3053\n              pod-security.kubernetes.io/audit=baseline\n              pod-security.kubernetes.io/enforce=baseline\n              pod-security.kubernetes.io/warn=baseline\nAnnotations:  <none>\nStatus:       Active\n\nNo resource quota.\n\nNo LimitRange resource.\n"
  Feb 20 23:08:50.420: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3053" for this suite. @ 02/20/24 23:08:50.422
• [3.106 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:78
  STEP: Creating a kubernetes client @ 02/20/24 23:08:50.438
  Feb 20 23:08:50.438: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:08:50.439
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:50.488
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:50.491
  STEP: Creating projection with secret that has name projected-secret-test-map-413bf5f3-2d43-4b08-91c2-7ae52bf0f032 @ 02/20/24 23:08:50.494
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:08:50.499
  STEP: Saw pod success @ 02/20/24 23:08:54.521
  Feb 20 23:08:54.528: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-d16dbd6c-db08-4f9e-852c-b74808994ad3 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:08:54.543
  Feb 20 23:08:54.593: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2985" for this suite. @ 02/20/24 23:08:54.601
• [4.174 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PreemptionExecutionPath runs ReplicaSets to verify preemption running path [Conformance]
test/e2e/scheduling/preemption.go:624
  STEP: Creating a kubernetes client @ 02/20/24 23:08:54.614
  Feb 20 23:08:54.614: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption @ 02/20/24 23:08:54.615
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:08:54.633
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:08:54.635
  Feb 20 23:08:54.655: INFO: Waiting up to 1m0s for all nodes to be ready
  Feb 20 23:09:54.683: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 02/20/24 23:09:54.692
  Feb 20 23:09:54.692: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption-path @ 02/20/24 23:09:54.694
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:09:54.793
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:09:54.794
  STEP: Finding an available node @ 02/20/24 23:09:54.796
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 02/20/24 23:09:54.796
  STEP: Explicitly delete pod here to free the resource it takes. @ 02/20/24 23:09:56.877
  Feb 20 23:09:56.899: INFO: found a healthy node: control-plane
  Feb 20 23:10:05.097: INFO: pods created so far: [1 1 1]
  Feb 20 23:10:05.097: INFO: length of pods created so far: 3
  Feb 20 23:10:07.123: INFO: pods created so far: [2 2 1]
  Feb 20 23:10:14.125: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:10:14.168: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-5475" for this suite. @ 02/20/24 23:10:14.211
  STEP: Destroying namespace "sched-preemption-3827" for this suite. @ 02/20/24 23:10:14.222
• [79.617 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should honor timeout [Conformance]
test/e2e/apimachinery/webhook.go:371
  STEP: Creating a kubernetes client @ 02/20/24 23:10:14.232
  Feb 20 23:10:14.232: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:10:14.233
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:10:14.26
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:10:14.262
  STEP: Setting up server cert @ 02/20/24 23:10:14.293
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:10:14.575
  STEP: Deploying the webhook pod @ 02/20/24 23:10:14.585
  STEP: Wait for the deployment to be ready @ 02/20/24 23:10:14.599
  Feb 20 23:10:14.602: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:10:16.624
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:10:16.692
  Feb 20 23:10:17.693: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Setting timeout (1s) shorter than webhook latency (5s) @ 02/20/24 23:10:17.763
  STEP: Registering slow webhook via the AdmissionRegistration API @ 02/20/24 23:10:17.763
  STEP: Request fails when timeout (1s) is shorter than slow webhook latency (5s) @ 02/20/24 23:10:17.812
  STEP: Having no error when timeout is shorter than webhook latency and failure policy is ignore @ 02/20/24 23:10:18.836
  STEP: Registering slow webhook via the AdmissionRegistration API @ 02/20/24 23:10:18.836
  STEP: Having no error when timeout is longer than webhook latency @ 02/20/24 23:10:19.924
  STEP: Registering slow webhook via the AdmissionRegistration API @ 02/20/24 23:10:19.924
  STEP: Having no error when timeout is empty (defaulted to 10s in v1) @ 02/20/24 23:10:24.99
  STEP: Registering slow webhook via the AdmissionRegistration API @ 02/20/24 23:10:24.991
  Feb 20 23:10:30.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-3042" for this suite. @ 02/20/24 23:10:30.186
  STEP: Destroying namespace "webhook-markers-7967" for this suite. @ 02/20/24 23:10:30.201
• [15.980 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should verify changes to a daemon set status [Conformance]
test/e2e/apps/daemon_set.go:875
  STEP: Creating a kubernetes client @ 02/20/24 23:10:30.213
  Feb 20 23:10:30.213: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/20/24 23:10:30.214
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:10:30.235
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:10:30.238
  STEP: Creating simple DaemonSet "daemon-set" @ 02/20/24 23:10:30.253
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/20/24 23:10:30.259
  Feb 20 23:10:30.263: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:10:30.263: INFO: Node worker is running 0 daemon pod, expected 1
  Feb 20 23:10:31.280: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:10:31.280: INFO: Node worker is running 0 daemon pod, expected 1
  Feb 20 23:10:32.268: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 20 23:10:32.268: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Getting /status @ 02/20/24 23:10:32.27
  Feb 20 23:10:32.271: INFO: Daemon Set daemon-set has Conditions: []
  STEP: updating the DaemonSet Status @ 02/20/24 23:10:32.271
  Feb 20 23:10:32.284: INFO: updatedStatus.Conditions: []v1.DaemonSetCondition{v1.DaemonSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the daemon set status to be updated @ 02/20/24 23:10:32.284
  Feb 20 23:10:32.285: INFO: Observed &DaemonSet event: ADDED
  Feb 20 23:10:32.285: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.285: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.285: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.285: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.285: INFO: Found daemon set daemon-set in namespace daemonsets-7821 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Feb 20 23:10:32.285: INFO: Daemon set daemon-set has an updated status
  STEP: patching the DaemonSet Status @ 02/20/24 23:10:32.285
  STEP: watching for the daemon set status to be patched @ 02/20/24 23:10:32.292
  Feb 20 23:10:32.293: INFO: Observed &DaemonSet event: ADDED
  Feb 20 23:10:32.293: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.293: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.293: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.294: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.294: INFO: Observed daemon set daemon-set in namespace daemonsets-7821 with annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Feb 20 23:10:32.294: INFO: Observed &DaemonSet event: MODIFIED
  Feb 20 23:10:32.294: INFO: Found daemon set daemon-set in namespace daemonsets-7821 with labels: map[daemonset-name:daemon-set] annotations: map[deprecated.daemonset.template.generation:1] & Conditions: [{StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }]
  Feb 20 23:10:32.294: INFO: Daemon set daemon-set has a patched status
  STEP: Deleting DaemonSet "daemon-set" @ 02/20/24 23:10:32.295
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-7821, will wait for the garbage collector to delete the pods @ 02/20/24 23:10:32.295
  Feb 20 23:10:32.448: INFO: Deleting DaemonSet.extensions daemon-set took: 100.528874ms
  Feb 20 23:10:32.549: INFO: Terminating DaemonSet.extensions daemon-set pods took: 101.040524ms
  Feb 20 23:10:34.652: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:10:34.652: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 20 23:10:34.654: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"6673"},"items":null}

  Feb 20 23:10:34.656: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"6673"},"items":null}

  Feb 20 23:10:34.661: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7821" for this suite. @ 02/20/24 23:10:34.663
• [4.456 seconds]
------------------------------
SSSS
------------------------------
[sig-apps] ReplicationController should adopt matching pods on creation [Conformance]
test/e2e/apps/rc.go:94
  STEP: Creating a kubernetes client @ 02/20/24 23:10:34.67
  Feb 20 23:10:34.670: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/20/24 23:10:34.67
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:10:34.685
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:10:34.687
  STEP: Given a Pod with a 'name' label pod-adoption is created @ 02/20/24 23:10:34.688
  STEP: When a replication controller with a matching selector is created @ 02/20/24 23:10:36.712
  STEP: Then the orphan pod is adopted @ 02/20/24 23:10:36.728
  Feb 20 23:10:37.743: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-5351" for this suite. @ 02/20/24 23:10:37.751
• [3.103 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] CronJob should replace jobs when ReplaceConcurrent [Conformance]
test/e2e/apps/cronjob.go:161
  STEP: Creating a kubernetes client @ 02/20/24 23:10:37.774
  Feb 20 23:10:37.774: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename cronjob @ 02/20/24 23:10:37.776
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:10:37.817
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:10:37.821
  STEP: Creating a ReplaceConcurrent cronjob @ 02/20/24 23:10:37.824
  STEP: Ensuring a job is scheduled @ 02/20/24 23:10:37.832
  STEP: Ensuring exactly one is scheduled @ 02/20/24 23:11:01.857
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 02/20/24 23:11:01.858
  STEP: Ensuring the job is replaced with a new one @ 02/20/24 23:11:01.86
  STEP: Removing cronjob @ 02/20/24 23:12:01.88
  Feb 20 23:12:01.948: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-8776" for this suite. @ 02/20/24 23:12:01.96
• [84.207 seconds]
------------------------------
SSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] PriorityClass endpoints verify PriorityClass endpoints can be operated with different HTTP methods [Conformance]
test/e2e/scheduling/preemption.go:812
  STEP: Creating a kubernetes client @ 02/20/24 23:12:01.982
  Feb 20 23:12:01.982: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption @ 02/20/24 23:12:01.983
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:12:02.05
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:12:02.053
  Feb 20 23:12:02.130: INFO: Waiting up to 1m0s for all nodes to be ready
  Feb 20 23:13:02.158: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Creating a kubernetes client @ 02/20/24 23:13:02.166
  Feb 20 23:13:02.166: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption-path @ 02/20/24 23:13:02.168
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:02.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:02.211
  Feb 20 23:13:02.230: INFO: PriorityClass.scheduling.k8s.io "p1" is invalid: value: Forbidden: may not be changed in an update.
  Feb 20 23:13:02.232: INFO: PriorityClass.scheduling.k8s.io "p2" is invalid: value: Forbidden: may not be changed in an update.
  Feb 20 23:13:02.249: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:13:02.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-path-2880" for this suite. @ 02/20/24 23:13:02.297
  STEP: Destroying namespace "sched-preemption-8852" for this suite. @ 02/20/24 23:13:02.303
• [60.329 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] server version should find the server version [Conformance]
test/e2e/apimachinery/server_version.go:40
  STEP: Creating a kubernetes client @ 02/20/24 23:13:02.311
  Feb 20 23:13:02.311: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename server-version @ 02/20/24 23:13:02.312
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:02.326
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:02.328
  STEP: Request ServerVersion @ 02/20/24 23:13:02.331
  STEP: Confirm major version @ 02/20/24 23:13:02.331
  Feb 20 23:13:02.331: INFO: Major version: 1
  STEP: Confirm minor version @ 02/20/24 23:13:02.331
  Feb 20 23:13:02.331: INFO: cleanMinorVersion: 28
  Feb 20 23:13:02.331: INFO: Minor version: 28
  Feb 20 23:13:02.331: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "server-version-1889" for this suite. @ 02/20/24 23:13:02.333
• [0.029 seconds]
------------------------------
SS
------------------------------
[sig-node] PodTemplates should replace a pod template [Conformance]
test/e2e/common/node/podtemplates.go:176
  STEP: Creating a kubernetes client @ 02/20/24 23:13:02.341
  Feb 20 23:13:02.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename podtemplate @ 02/20/24 23:13:02.341
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:02.353
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:02.355
  STEP: Create a pod template @ 02/20/24 23:13:02.358
  STEP: Replace a pod template @ 02/20/24 23:13:02.363
  Feb 20 23:13:02.370: INFO: Found updated podtemplate annotation: "true"

  Feb 20 23:13:02.370: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-9761" for this suite. @ 02/20/24 23:13:02.372
• [0.038 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should create a PodDisruptionBudget [Conformance]
test/e2e/apps/disruption.go:108
  STEP: Creating a kubernetes client @ 02/20/24 23:13:02.379
  Feb 20 23:13:02.379: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption @ 02/20/24 23:13:02.38
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:02.397
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:02.398
  STEP: creating the pdb @ 02/20/24 23:13:02.399
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:13:02.404
  STEP: updating the pdb @ 02/20/24 23:13:04.413
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:13:04.439
  STEP: patching the pdb @ 02/20/24 23:13:06.454
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:13:06.485
  STEP: Waiting for the pdb to be deleted @ 02/20/24 23:13:08.52
  Feb 20 23:13:08.526: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-4114" for this suite. @ 02/20/24 23:13:08.534
• [6.172 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod [Conformance]
test/e2e/storage/subpath.go:69
  STEP: Creating a kubernetes client @ 02/20/24 23:13:08.555
  Feb 20 23:13:08.555: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subpath @ 02/20/24 23:13:08.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:08.587
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:08.59
  STEP: Setting up data @ 02/20/24 23:13:08.593
  STEP: Creating pod pod-subpath-test-configmap-br5d @ 02/20/24 23:13:08.608
  STEP: Creating a pod to test atomic-volume-subpath @ 02/20/24 23:13:08.608
  STEP: Saw pod success @ 02/20/24 23:13:32.7
  Feb 20 23:13:32.702: INFO: Trying to get logs from node control-plane pod pod-subpath-test-configmap-br5d container test-container-subpath-configmap-br5d: <nil>
  STEP: delete the pod @ 02/20/24 23:13:32.713
  STEP: Deleting pod pod-subpath-test-configmap-br5d @ 02/20/24 23:13:32.728
  Feb 20 23:13:32.729: INFO: Deleting pod "pod-subpath-test-configmap-br5d" in namespace "subpath-6186"
  Feb 20 23:13:32.730: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-6186" for this suite. @ 02/20/24 23:13:32.732
• [24.185 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule new jobs when ForbidConcurrent [Slow] [Conformance]
test/e2e/apps/cronjob.go:125
  STEP: Creating a kubernetes client @ 02/20/24 23:13:32.741
  Feb 20 23:13:32.741: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename cronjob @ 02/20/24 23:13:32.741
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:13:32.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:13:32.76
  STEP: Creating a ForbidConcurrent cronjob @ 02/20/24 23:13:32.761
  STEP: Ensuring a job is scheduled @ 02/20/24 23:13:32.769
  STEP: Ensuring exactly one is scheduled @ 02/20/24 23:14:00.776
  STEP: Ensuring exactly one running job exists by listing jobs explicitly @ 02/20/24 23:14:00.782
  STEP: Ensuring no more jobs are scheduled @ 02/20/24 23:14:00.789
  STEP: Removing cronjob @ 02/20/24 23:19:00.801
  Feb 20 23:19:00.820: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-3671" for this suite. @ 02/20/24 23:19:00.825
• [328.095 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:57
  STEP: Creating a kubernetes client @ 02/20/24 23:19:00.836
  Feb 20 23:19:00.836: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:19:00.837
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:00.874
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:00.876
  STEP: Creating configMap with name configmap-test-volume-d2ad8346-a77e-469a-b34e-19a2291f9307 @ 02/20/24 23:19:00.878
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:19:00.883
  STEP: Saw pod success @ 02/20/24 23:19:04.912
  Feb 20 23:19:04.914: INFO: Trying to get logs from node control-plane pod pod-configmaps-3369b3e5-023b-47d5-bbb4-4a8472832c71 container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:19:04.927
  Feb 20 23:19:04.952: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8669" for this suite. @ 02/20/24 23:19:04.955
• [4.126 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:345
  STEP: Creating a kubernetes client @ 02/20/24 23:19:04.962
  Feb 20 23:19:04.962: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:19:04.963
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:04.978
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:04.98
  STEP: creating the pod @ 02/20/24 23:19:04.981
  STEP: submitting the pod to kubernetes @ 02/20/24 23:19:04.981
  STEP: verifying the pod is in kubernetes @ 02/20/24 23:19:07.02
  STEP: updating the pod @ 02/20/24 23:19:07.027
  Feb 20 23:19:07.560: INFO: Successfully updated pod "pod-update-5f8fa7ca-111b-46c6-8eb4-bbcbf8e4a5c4"
  STEP: verifying the updated pod is in kubernetes @ 02/20/24 23:19:07.568
  Feb 20 23:19:07.575: INFO: Pod update OK
  Feb 20 23:19:07.575: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4583" for this suite. @ 02/20/24 23:19:07.583
• [2.638 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] custom resource defaulting for requests and from storage works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:269
  STEP: Creating a kubernetes client @ 02/20/24 23:19:07.602
  Feb 20 23:19:07.602: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename custom-resource-definition @ 02/20/24 23:19:07.604
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:07.632
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:07.634
  Feb 20 23:19:07.636: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:19:10.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-4669" for this suite. @ 02/20/24 23:19:10.842
• [3.259 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with pruning [Conformance]
test/e2e/apimachinery/webhook.go:332
  STEP: Creating a kubernetes client @ 02/20/24 23:19:10.863
  Feb 20 23:19:10.863: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:19:10.865
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:10.906
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:10.915
  STEP: Setting up server cert @ 02/20/24 23:19:10.949
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:19:11.282
  STEP: Deploying the webhook pod @ 02/20/24 23:19:11.29
  STEP: Wait for the deployment to be ready @ 02/20/24 23:19:11.3
  Feb 20 23:19:11.303: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:19:13.315
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:19:13.333
  Feb 20 23:19:14.333: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Feb 20 23:19:14.347: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-3256-crds.webhook.example.com via the AdmissionRegistration API @ 02/20/24 23:19:14.876
  STEP: Creating a custom resource that should be mutated by the webhook @ 02/20/24 23:19:14.918
  Feb 20 23:19:16.977: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9377" for this suite. @ 02/20/24 23:19:17.567
  STEP: Destroying namespace "webhook-markers-6271" for this suite. @ 02/20/24 23:19:17.579
• [6.723 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl patch should add annotations for pods in rc  [Conformance]
test/e2e/kubectl/kubectl.go:1641
  STEP: Creating a kubernetes client @ 02/20/24 23:19:17.587
  Feb 20 23:19:17.587: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:19:17.587
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:17.61
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:17.611
  STEP: creating Agnhost RC @ 02/20/24 23:19:17.613
  Feb 20 23:19:17.613: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-1517 create -f -'
  Feb 20 23:19:17.859: INFO: stderr: ""
  Feb 20 23:19:17.859: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 02/20/24 23:19:17.859
  Feb 20 23:19:18.863: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:19:18.863: INFO: Found 0 / 1
  Feb 20 23:19:19.867: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:19:19.867: INFO: Found 1 / 1
  Feb 20 23:19:19.867: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  STEP: patching all pods @ 02/20/24 23:19:19.867
  Feb 20 23:19:19.873: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:19:19.874: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Feb 20 23:19:19.874: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-1517 patch pod agnhost-primary-swpsl -p {"metadata":{"annotations":{"x":"y"}}}'
  Feb 20 23:19:19.985: INFO: stderr: ""
  Feb 20 23:19:19.985: INFO: stdout: "pod/agnhost-primary-swpsl patched\n"
  STEP: checking annotations @ 02/20/24 23:19:19.985
  Feb 20 23:19:19.987: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:19:19.987: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Feb 20 23:19:19.987: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-1517" for this suite. @ 02/20/24 23:19:19.989
• [2.408 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] IngressClass API  should support creating IngressClass API operations [Conformance]
test/e2e/network/ingressclass.go:266
  STEP: Creating a kubernetes client @ 02/20/24 23:19:19.996
  Feb 20 23:19:19.996: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename ingressclass @ 02/20/24 23:19:19.996
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:20.013
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:20.015
  STEP: getting /apis @ 02/20/24 23:19:20.016
  STEP: getting /apis/networking.k8s.io @ 02/20/24 23:19:20.018
  STEP: getting /apis/networking.k8s.iov1 @ 02/20/24 23:19:20.018
  STEP: creating @ 02/20/24 23:19:20.018
  STEP: getting @ 02/20/24 23:19:20.034
  STEP: listing @ 02/20/24 23:19:20.036
  STEP: watching @ 02/20/24 23:19:20.037
  Feb 20 23:19:20.037: INFO: starting watch
  STEP: patching @ 02/20/24 23:19:20.038
  STEP: updating @ 02/20/24 23:19:20.044
  Feb 20 23:19:20.049: INFO: waiting for watch events with expected annotations
  Feb 20 23:19:20.049: INFO: saw patched and updated annotations
  STEP: deleting @ 02/20/24 23:19:20.049
  STEP: deleting a collection @ 02/20/24 23:19:20.058
  Feb 20 23:19:20.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingressclass-4644" for this suite. @ 02/20/24 23:19:20.071
• [0.082 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with terminating scopes. [Conformance]
test/e2e/apimachinery/resource_quota.go:693
  STEP: Creating a kubernetes client @ 02/20/24 23:19:20.078
  Feb 20 23:19:20.078: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/20/24 23:19:20.078
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:20.094
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:20.096
  STEP: Creating a ResourceQuota with terminating scope @ 02/20/24 23:19:20.097
  STEP: Ensuring ResourceQuota status is calculated @ 02/20/24 23:19:20.102
  STEP: Creating a ResourceQuota with not terminating scope @ 02/20/24 23:19:22.111
  STEP: Ensuring ResourceQuota status is calculated @ 02/20/24 23:19:22.128
  STEP: Creating a long running pod @ 02/20/24 23:19:24.131
  STEP: Ensuring resource quota with not terminating scope captures the pod usage @ 02/20/24 23:19:24.164
  STEP: Ensuring resource quota with terminating scope ignored the pod usage @ 02/20/24 23:19:26.171
  STEP: Deleting the pod @ 02/20/24 23:19:28.177
  STEP: Ensuring resource quota status released the pod usage @ 02/20/24 23:19:28.215
  STEP: Creating a terminating pod @ 02/20/24 23:19:30.223
  STEP: Ensuring resource quota with terminating scope captures the pod usage @ 02/20/24 23:19:30.259
  STEP: Ensuring resource quota with not terminating scope ignored the pod usage @ 02/20/24 23:19:32.267
  STEP: Deleting the pod @ 02/20/24 23:19:34.274
  STEP: Ensuring resource quota status released the pod usage @ 02/20/24 23:19:34.306
  Feb 20 23:19:36.313: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-695" for this suite. @ 02/20/24 23:19:36.321
• [16.261 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] Services should have session affinity work for service with type clusterIP [LinuxOnly] [Conformance]
test/e2e/network/service.go:2165
  STEP: Creating a kubernetes client @ 02/20/24 23:19:36.341
  Feb 20 23:19:36.341: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:19:36.343
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:36.394
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:36.402
  STEP: creating service in namespace services-6532 @ 02/20/24 23:19:36.406
  STEP: creating service affinity-clusterip in namespace services-6532 @ 02/20/24 23:19:36.406
  STEP: creating replication controller affinity-clusterip in namespace services-6532 @ 02/20/24 23:19:36.423
  I0220 23:19:36.431609      22 runners.go:197] Created replication controller with name: affinity-clusterip, namespace: services-6532, replica count: 3
  I0220 23:19:39.483141      22 runners.go:197] affinity-clusterip Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:19:39.487: INFO: Creating new exec pod
  Feb 20 23:19:42.500: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-6532 exec execpod-affinityjhxdg -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-clusterip 80'
  Feb 20 23:19:42.627: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-clusterip 80\nConnection to affinity-clusterip 80 port [tcp/http] succeeded!\n"
  Feb 20 23:19:42.627: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:19:42.627: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-6532 exec execpod-affinityjhxdg -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.116 80'
  Feb 20 23:19:42.695: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.116 80\nConnection to 10.152.183.116 80 port [tcp/http] succeeded!\n"
  Feb 20 23:19:42.695: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:19:42.695: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-6532 exec execpod-affinityjhxdg -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.152.183.116:80/ ; done'
  Feb 20 23:19:42.815: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.152.183.116:80/\n"
  Feb 20 23:19:42.815: INFO: stdout: "\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb\naffinity-clusterip-qk5pb"
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Received response from host: affinity-clusterip-qk5pb
  Feb 20 23:19:42.815: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:19:42.817: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-clusterip in namespace services-6532, will wait for the garbage collector to delete the pods @ 02/20/24 23:19:42.836
  Feb 20 23:19:42.896: INFO: Deleting ReplicationController affinity-clusterip took: 6.557638ms
  Feb 20 23:19:42.997: INFO: Terminating ReplicationController affinity-clusterip pods took: 101.01206ms
  STEP: Destroying namespace "services-6532" for this suite. @ 02/20/24 23:19:46.522
• [10.186 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should create a LimitRange with defaults and ensure pod has those defaults applied. [Conformance]
test/e2e/scheduling/limit_range.go:61
  STEP: Creating a kubernetes client @ 02/20/24 23:19:46.528
  Feb 20 23:19:46.528: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename limitrange @ 02/20/24 23:19:46.529
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:46.554
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:46.559
  STEP: Creating a LimitRange @ 02/20/24 23:19:46.565
  STEP: Setting up watch @ 02/20/24 23:19:46.565
  STEP: Submitting a LimitRange @ 02/20/24 23:19:46.674
  STEP: Verifying LimitRange creation was observed @ 02/20/24 23:19:46.691
  STEP: Fetching the LimitRange to ensure it has proper values @ 02/20/24 23:19:46.691
  Feb 20 23:19:46.697: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Feb 20 23:19:46.697: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with no resource requirements @ 02/20/24 23:19:46.697
  STEP: Ensuring Pod has resource requirements applied from LimitRange @ 02/20/24 23:19:46.715
  Feb 20 23:19:46.722: INFO: Verifying requests: expected map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}] with actual map[cpu:{{100 -3} {<nil>} 100m DecimalSI} ephemeral-storage:{{214748364800 0} {<nil>}  BinarySI} memory:{{209715200 0} {<nil>}  BinarySI}]
  Feb 20 23:19:46.723: INFO: Verifying limits: expected map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{500 -3} {<nil>} 500m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Creating a Pod with partial resource requirements @ 02/20/24 23:19:46.723
  STEP: Ensuring Pod has merged resource requirements applied from LimitRange @ 02/20/24 23:19:46.748
  Feb 20 23:19:46.754: INFO: Verifying requests: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{161061273600 0} {<nil>} 150Gi BinarySI} memory:{{157286400 0} {<nil>} 150Mi BinarySI}]
  Feb 20 23:19:46.754: INFO: Verifying limits: expected map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}] with actual map[cpu:{{300 -3} {<nil>} 300m DecimalSI} ephemeral-storage:{{536870912000 0} {<nil>} 500Gi BinarySI} memory:{{524288000 0} {<nil>} 500Mi BinarySI}]
  STEP: Failing to create a Pod with less than min resources @ 02/20/24 23:19:46.754
  STEP: Failing to create a Pod with more than max resources @ 02/20/24 23:19:46.757
  STEP: Updating a LimitRange @ 02/20/24 23:19:46.759
  STEP: Verifying LimitRange updating is effective @ 02/20/24 23:19:46.771
  STEP: Creating a Pod with less than former min resources @ 02/20/24 23:19:48.779
  STEP: Failing to create a Pod with more than max resources @ 02/20/24 23:19:48.798
  STEP: Deleting a LimitRange @ 02/20/24 23:19:48.803
  STEP: Verifying the LimitRange was deleted @ 02/20/24 23:19:48.836
  Feb 20 23:19:53.846: INFO: limitRange is already deleted
  STEP: Creating a Pod with more than former max resources @ 02/20/24 23:19:53.846
  Feb 20 23:19:53.876: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-5552" for this suite. @ 02/20/24 23:19:53.886
• [7.381 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl version should check is all data is printed  [Conformance]
test/e2e/kubectl/kubectl.go:1674
  STEP: Creating a kubernetes client @ 02/20/24 23:19:53.912
  Feb 20 23:19:53.912: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:19:53.913
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:53.934
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:53.936
  Feb 20 23:19:53.938: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-9791 version'
  Feb 20 23:19:53.976: INFO: stderr: ""
  Feb 20 23:19:53.976: INFO: stdout: "Client Version: v1.28.7\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.28.7\n"
  Feb 20 23:19:53.976: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-9791" for this suite. @ 02/20/24 23:19:53.978
• [0.072 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition listing custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:85
  STEP: Creating a kubernetes client @ 02/20/24 23:19:53.984
  Feb 20 23:19:53.984: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename custom-resource-definition @ 02/20/24 23:19:53.984
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:19:54
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:19:54.001
  Feb 20 23:19:54.003: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:20:00.475: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-125" for this suite. @ 02/20/24 23:20:00.483
• [6.530 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should run a job to completion when tasks sometimes fail and are locally restarted [Conformance]
test/e2e/apps/job.go:430
  STEP: Creating a kubernetes client @ 02/20/24 23:20:00.531
  Feb 20 23:20:00.531: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/20/24 23:20:00.533
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:20:00.558
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:20:00.56
  STEP: Creating a job @ 02/20/24 23:20:00.561
  STEP: Ensuring job reaches completions @ 02/20/24 23:20:00.568
  Feb 20 23:20:10.572: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7172" for this suite. @ 02/20/24 23:20:10.575
• [10.052 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:250
  STEP: Creating a kubernetes client @ 02/20/24 23:20:10.583
  Feb 20 23:20:10.583: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:20:10.584
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:20:10.602
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:20:10.605
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:20:10.609
  STEP: Saw pod success @ 02/20/24 23:20:14.63
  Feb 20 23:20:14.637: INFO: Trying to get logs from node control-plane pod downwardapi-volume-5ba3e00f-73de-4cdb-9451-6b304af6b7d2 container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:20:14.651
  Feb 20 23:20:14.723: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6018" for this suite. @ 02/20/24 23:20:14.732
• [4.165 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Probing container should be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:134
  STEP: Creating a kubernetes client @ 02/20/24 23:20:14.75
  Feb 20 23:20:14.750: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:20:14.752
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:20:14.809
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:20:14.811
  STEP: Creating pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947 @ 02/20/24 23:20:14.813
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:20:16.832
  Feb 20 23:20:16.841: INFO: Initial restart count of pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a is 0
  Feb 20 23:20:16.847: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:18.849: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:20.853: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:22.860: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:24.868: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:26.877: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:28.884: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:30.891: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:32.918: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:34.927: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:36.934: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:38.943: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:40.951: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:42.959: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:44.968: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:46.975: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:48.978: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:50.980: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:52.988: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:54.991: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:56.995: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:20:59.049: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:21:01.056: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:21:03.064: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:21:05.075: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:21:07.079: INFO: Get pod busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a in namespace container-probe-8947
  Feb 20 23:21:07.079: INFO: Restart count of pod container-probe-8947/busybox-84221c93-ac2e-401c-b8a7-2a598d36b19a is now 1 (50.238560086s elapsed)
  Feb 20 23:21:07.079: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:21:07.082
  STEP: Destroying namespace "container-probe-8947" for this suite. @ 02/20/24 23:21:07.098
• [52.357 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should be possible to delete [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:135
  STEP: Creating a kubernetes client @ 02/20/24 23:21:07.109
  Feb 20 23:21:07.109: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubelet-test @ 02/20/24 23:21:07.109
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:07.123
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:07.125
  Feb 20 23:21:07.182: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-6544" for this suite. @ 02/20/24 23:21:07.192
• [0.102 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl logs logs should be able to retrieve and filter logs  [Conformance]
test/e2e/kubectl/logs.go:114
  STEP: Creating a kubernetes client @ 02/20/24 23:21:07.214
  Feb 20 23:21:07.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl-logs @ 02/20/24 23:21:07.215
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:07.352
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:07.354
  STEP: creating an pod @ 02/20/24 23:21:07.355
  Feb 20 23:21:07.355: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 run logs-generator --image=registry.k8s.io/e2e-test-images/agnhost:2.45 --restart=Never --pod-running-timeout=2m0s -- logs-generator --log-lines-total 100 --run-duration 20s'
  Feb 20 23:21:07.511: INFO: stderr: ""
  Feb 20 23:21:07.511: INFO: stdout: "pod/logs-generator created\n"
  STEP: Waiting for log generator to start. @ 02/20/24 23:21:07.511
  Feb 20 23:21:07.512: INFO: Waiting up to 5m0s for 1 pods to be running and ready, or succeeded: [logs-generator]
  Feb 20 23:21:09.526: INFO: Wanted all 1 pods to be running and ready, or succeeded. Result: true. Pods: [logs-generator]
  STEP: checking for a matching strings @ 02/20/24 23:21:09.526
  Feb 20 23:21:09.526: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator'
  Feb 20 23:21:09.622: INFO: stderr: ""
  Feb 20 23:21:09.622: INFO: stdout: "I0220 23:21:08.329873       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/default/pods/fmw 212\nI0220 23:21:08.530589       1 logs_generator.go:76] 1 GET /api/v1/namespaces/ns/pods/9wg 340\nI0220 23:21:08.730085       1 logs_generator.go:76] 2 POST /api/v1/namespaces/ns/pods/pm58 527\nI0220 23:21:08.931274       1 logs_generator.go:76] 3 GET /api/v1/namespaces/ns/pods/hrbc 263\nI0220 23:21:09.130911       1 logs_generator.go:76] 4 POST /api/v1/namespaces/default/pods/vr5 536\nI0220 23:21:09.330505       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/7f5k 270\nI0220 23:21:09.530950       1 logs_generator.go:76] 6 GET /api/v1/namespaces/ns/pods/lt7 420\n"
  Feb 20 23:21:11.623: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator'
  Feb 20 23:21:11.685: INFO: stderr: ""
  Feb 20 23:21:11.685: INFO: stdout: "I0220 23:21:08.329873       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/default/pods/fmw 212\nI0220 23:21:08.530589       1 logs_generator.go:76] 1 GET /api/v1/namespaces/ns/pods/9wg 340\nI0220 23:21:08.730085       1 logs_generator.go:76] 2 POST /api/v1/namespaces/ns/pods/pm58 527\nI0220 23:21:08.931274       1 logs_generator.go:76] 3 GET /api/v1/namespaces/ns/pods/hrbc 263\nI0220 23:21:09.130911       1 logs_generator.go:76] 4 POST /api/v1/namespaces/default/pods/vr5 536\nI0220 23:21:09.330505       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/7f5k 270\nI0220 23:21:09.530950       1 logs_generator.go:76] 6 GET /api/v1/namespaces/ns/pods/lt7 420\nI0220 23:21:09.730608       1 logs_generator.go:76] 7 POST /api/v1/namespaces/ns/pods/mvfx 209\nI0220 23:21:09.930019       1 logs_generator.go:76] 8 POST /api/v1/namespaces/ns/pods/jj9v 387\nI0220 23:21:10.130654       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/default/pods/5jq 463\nI0220 23:21:10.329951       1 logs_generator.go:76] 10 POST /api/v1/namespaces/ns/pods/hlpl 510\nI0220 23:21:10.530564       1 logs_generator.go:76] 11 GET /api/v1/namespaces/default/pods/595w 597\nI0220 23:21:10.729980       1 logs_generator.go:76] 12 PUT /api/v1/namespaces/kube-system/pods/bc4q 595\nI0220 23:21:10.930582       1 logs_generator.go:76] 13 PUT /api/v1/namespaces/default/pods/ch5 539\nI0220 23:21:11.130153       1 logs_generator.go:76] 14 PUT /api/v1/namespaces/default/pods/ltnb 412\nI0220 23:21:11.330730       1 logs_generator.go:76] 15 PUT /api/v1/namespaces/ns/pods/6dk 562\nI0220 23:21:11.530021       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/6wn 300\n"
  STEP: limiting log lines @ 02/20/24 23:21:11.685
  Feb 20 23:21:11.685: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator --tail=1'
  Feb 20 23:21:11.735: INFO: stderr: ""
  Feb 20 23:21:11.735: INFO: stdout: "I0220 23:21:11.530021       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/6wn 300\n"
  Feb 20 23:21:11.735: INFO: got output "I0220 23:21:11.530021       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/6wn 300\n"
  STEP: limiting log bytes @ 02/20/24 23:21:11.735
  Feb 20 23:21:11.735: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator --limit-bytes=1'
  Feb 20 23:21:11.784: INFO: stderr: ""
  Feb 20 23:21:11.784: INFO: stdout: "I"
  Feb 20 23:21:11.784: INFO: got output "I"
  STEP: exposing timestamps @ 02/20/24 23:21:11.784
  Feb 20 23:21:11.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator --tail=1 --timestamps'
  Feb 20 23:21:11.831: INFO: stderr: ""
  Feb 20 23:21:11.831: INFO: stdout: "2024-02-20T23:21:11.730385075Z I0220 23:21:11.730290       1 logs_generator.go:76] 17 PUT /api/v1/namespaces/ns/pods/w4jz 411\n"
  Feb 20 23:21:11.831: INFO: got output "2024-02-20T23:21:11.730385075Z I0220 23:21:11.730290       1 logs_generator.go:76] 17 PUT /api/v1/namespaces/ns/pods/w4jz 411\n"
  STEP: restricting to a time range @ 02/20/24 23:21:11.831
  Feb 20 23:21:14.333: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator --since=1s'
  Feb 20 23:21:14.428: INFO: stderr: ""
  Feb 20 23:21:14.428: INFO: stdout: "I0220 23:21:13.530427       1 logs_generator.go:76] 26 PUT /api/v1/namespaces/kube-system/pods/g7w9 443\nI0220 23:21:13.731036       1 logs_generator.go:76] 27 PUT /api/v1/namespaces/ns/pods/h9d 323\nI0220 23:21:13.930779       1 logs_generator.go:76] 28 PUT /api/v1/namespaces/kube-system/pods/6ttv 436\nI0220 23:21:14.130240       1 logs_generator.go:76] 29 PUT /api/v1/namespaces/ns/pods/sqw7 391\nI0220 23:21:14.330819       1 logs_generator.go:76] 30 GET /api/v1/namespaces/ns/pods/fc8l 355\n"
  Feb 20 23:21:14.428: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 logs logs-generator logs-generator --since=24h'
  Feb 20 23:21:14.473: INFO: stderr: ""
  Feb 20 23:21:14.473: INFO: stdout: "I0220 23:21:08.329873       1 logs_generator.go:76] 0 PUT /api/v1/namespaces/default/pods/fmw 212\nI0220 23:21:08.530589       1 logs_generator.go:76] 1 GET /api/v1/namespaces/ns/pods/9wg 340\nI0220 23:21:08.730085       1 logs_generator.go:76] 2 POST /api/v1/namespaces/ns/pods/pm58 527\nI0220 23:21:08.931274       1 logs_generator.go:76] 3 GET /api/v1/namespaces/ns/pods/hrbc 263\nI0220 23:21:09.130911       1 logs_generator.go:76] 4 POST /api/v1/namespaces/default/pods/vr5 536\nI0220 23:21:09.330505       1 logs_generator.go:76] 5 PUT /api/v1/namespaces/ns/pods/7f5k 270\nI0220 23:21:09.530950       1 logs_generator.go:76] 6 GET /api/v1/namespaces/ns/pods/lt7 420\nI0220 23:21:09.730608       1 logs_generator.go:76] 7 POST /api/v1/namespaces/ns/pods/mvfx 209\nI0220 23:21:09.930019       1 logs_generator.go:76] 8 POST /api/v1/namespaces/ns/pods/jj9v 387\nI0220 23:21:10.130654       1 logs_generator.go:76] 9 PUT /api/v1/namespaces/default/pods/5jq 463\nI0220 23:21:10.329951       1 logs_generator.go:76] 10 POST /api/v1/namespaces/ns/pods/hlpl 510\nI0220 23:21:10.530564       1 logs_generator.go:76] 11 GET /api/v1/namespaces/default/pods/595w 597\nI0220 23:21:10.729980       1 logs_generator.go:76] 12 PUT /api/v1/namespaces/kube-system/pods/bc4q 595\nI0220 23:21:10.930582       1 logs_generator.go:76] 13 PUT /api/v1/namespaces/default/pods/ch5 539\nI0220 23:21:11.130153       1 logs_generator.go:76] 14 PUT /api/v1/namespaces/default/pods/ltnb 412\nI0220 23:21:11.330730       1 logs_generator.go:76] 15 PUT /api/v1/namespaces/ns/pods/6dk 562\nI0220 23:21:11.530021       1 logs_generator.go:76] 16 POST /api/v1/namespaces/ns/pods/6wn 300\nI0220 23:21:11.730290       1 logs_generator.go:76] 17 PUT /api/v1/namespaces/ns/pods/w4jz 411\nI0220 23:21:11.930586       1 logs_generator.go:76] 18 POST /api/v1/namespaces/default/pods/nbg7 503\nI0220 23:21:12.130878       1 logs_generator.go:76] 19 PUT /api/v1/namespaces/kube-system/pods/456 330\nI0220 23:21:12.330341       1 logs_generator.go:76] 20 GET /api/v1/namespaces/kube-system/pods/qkq 289\nI0220 23:21:12.530975       1 logs_generator.go:76] 21 GET /api/v1/namespaces/kube-system/pods/67hk 280\nI0220 23:21:12.730617       1 logs_generator.go:76] 22 GET /api/v1/namespaces/ns/pods/vz2k 466\nI0220 23:21:12.930042       1 logs_generator.go:76] 23 GET /api/v1/namespaces/ns/pods/qnl 202\nI0220 23:21:13.130534       1 logs_generator.go:76] 24 GET /api/v1/namespaces/ns/pods/9mjp 430\nI0220 23:21:13.329967       1 logs_generator.go:76] 25 POST /api/v1/namespaces/default/pods/jmd 376\nI0220 23:21:13.530427       1 logs_generator.go:76] 26 PUT /api/v1/namespaces/kube-system/pods/g7w9 443\nI0220 23:21:13.731036       1 logs_generator.go:76] 27 PUT /api/v1/namespaces/ns/pods/h9d 323\nI0220 23:21:13.930779       1 logs_generator.go:76] 28 PUT /api/v1/namespaces/kube-system/pods/6ttv 436\nI0220 23:21:14.130240       1 logs_generator.go:76] 29 PUT /api/v1/namespaces/ns/pods/sqw7 391\nI0220 23:21:14.330819       1 logs_generator.go:76] 30 GET /api/v1/namespaces/ns/pods/fc8l 355\n"
  Feb 20 23:21:14.473: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-logs-1799 delete pod logs-generator'
  Feb 20 23:21:15.733: INFO: stderr: ""
  Feb 20 23:21:15.733: INFO: stdout: "pod \"logs-generator\" deleted\n"
  Feb 20 23:21:15.733: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-logs-1799" for this suite. @ 02/20/24 23:21:15.735
• [8.529 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PreStop should call prestop when killing a pod  [Conformance]
test/e2e/node/pre_stop.go:169
  STEP: Creating a kubernetes client @ 02/20/24 23:21:15.743
  Feb 20 23:21:15.743: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename prestop @ 02/20/24 23:21:15.744
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:15.76
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:15.763
  STEP: Creating server pod server in namespace prestop-5135 @ 02/20/24 23:21:15.764
  STEP: Waiting for pods to come up. @ 02/20/24 23:21:15.77
  STEP: Creating tester pod tester in namespace prestop-5135 @ 02/20/24 23:21:17.777
  STEP: Deleting pre-stop pod @ 02/20/24 23:21:19.806
  Feb 20 23:21:24.856: INFO: Saw: {
  	"Hostname": "server",
  	"Sent": null,
  	"Received": {
  		"prestop": 1
  	},
  	"Errors": null,
  	"Log": [
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up.",
  		"default/nettest has 0 endpoints ([]), which is less than 8 as expected. Waiting for all endpoints to come up."
  	],
  	"StillContactingPeers": true
  }
  Feb 20 23:21:24.856: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Deleting the server pod @ 02/20/24 23:21:24.864
  STEP: Destroying namespace "prestop-5135" for this suite. @ 02/20/24 23:21:24.908
• [9.185 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD without validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:153
  STEP: Creating a kubernetes client @ 02/20/24 23:21:24.929
  Feb 20 23:21:24.929: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/20/24 23:21:24.93
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:24.95
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:24.952
  Feb 20 23:21:24.954: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 02/20/24 23:21:26.342
  Feb 20 23:21:26.342: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-3083 --namespace=crd-publish-openapi-3083 create -f -'
  Feb 20 23:21:26.712: INFO: stderr: ""
  Feb 20 23:21:26.712: INFO: stdout: "e2e-test-crd-publish-openapi-6478-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Feb 20 23:21:26.712: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-3083 --namespace=crd-publish-openapi-3083 delete e2e-test-crd-publish-openapi-6478-crds test-cr'
  Feb 20 23:21:26.757: INFO: stderr: ""
  Feb 20 23:21:26.757: INFO: stdout: "e2e-test-crd-publish-openapi-6478-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  Feb 20 23:21:26.757: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-3083 --namespace=crd-publish-openapi-3083 apply -f -'
  Feb 20 23:21:27.016: INFO: stderr: ""
  Feb 20 23:21:27.016: INFO: stdout: "e2e-test-crd-publish-openapi-6478-crd.crd-publish-openapi-test-empty.example.com/test-cr created\n"
  Feb 20 23:21:27.016: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-3083 --namespace=crd-publish-openapi-3083 delete e2e-test-crd-publish-openapi-6478-crds test-cr'
  Feb 20 23:21:27.067: INFO: stderr: ""
  Feb 20 23:21:27.067: INFO: stdout: "e2e-test-crd-publish-openapi-6478-crd.crd-publish-openapi-test-empty.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR without validation schema @ 02/20/24 23:21:27.067
  Feb 20 23:21:27.067: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-3083 explain e2e-test-crd-publish-openapi-6478-crds'
  Feb 20 23:21:27.156: INFO: stderr: ""
  Feb 20 23:21:27.156: INFO: stdout: "GROUP:      crd-publish-openapi-test-empty.example.com\nKIND:       e2e-test-crd-publish-openapi-6478-crd\nVERSION:    v1\n\nDESCRIPTION:\n    <empty>\nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n\n"
  Feb 20 23:21:28.458: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-3083" for this suite. @ 02/20/24 23:21:28.464
• [3.543 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan RS created by deployment when deleteOptions.PropagationPolicy is Orphan [Conformance]
test/e2e/apimachinery/garbage_collector.go:538
  STEP: Creating a kubernetes client @ 02/20/24 23:21:28.473
  Feb 20 23:21:28.473: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/20/24 23:21:28.473
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:29.207
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:29.212
  STEP: create the deployment @ 02/20/24 23:21:29.218
  W0220 23:21:29.236635      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 02/20/24 23:21:29.236
  STEP: delete the deployment @ 02/20/24 23:21:29.749
  STEP: wait for deployment deletion to see if the garbage collector mistakenly deletes the rs @ 02/20/24 23:21:29.757
  STEP: Gathering metrics @ 02/20/24 23:21:30.327
  W0220 23:21:30.347220      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 20 23:21:30.347: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 20 23:21:30.347: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-4125" for this suite. @ 02/20/24 23:21:30.36
• [1.914 seconds]
------------------------------
S
------------------------------
[sig-network] Services should be able to change the type from ExternalName to ClusterIP [Conformance]
test/e2e/network/service.go:1416
  STEP: Creating a kubernetes client @ 02/20/24 23:21:30.388
  Feb 20 23:21:30.388: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:21:30.39
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:31.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:31.217
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-9118 @ 02/20/24 23:21:31.228
  STEP: changing the ExternalName service to type=ClusterIP @ 02/20/24 23:21:31.253
  STEP: creating replication controller externalname-service in namespace services-9118 @ 02/20/24 23:21:31.314
  I0220 23:21:31.343054      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-9118, replica count: 2
  I0220 23:21:34.395076      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:21:34.395: INFO: Creating new exec pod
  Feb 20 23:21:37.505: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9118 exec execpodqq7dx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Feb 20 23:21:37.619: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Feb 20 23:21:37.619: INFO: stdout: "externalname-service-qplgw"
  Feb 20 23:21:37.619: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9118 exec execpodqq7dx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.192 80'
  Feb 20 23:21:37.692: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.192 80\nConnection to 10.152.183.192 80 port [tcp/http] succeeded!\n"
  Feb 20 23:21:37.692: INFO: stdout: "externalname-service-qplgw"
  Feb 20 23:21:37.692: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:21:37.695: INFO: Cleaning up the ExternalName to ClusterIP test service
  STEP: Destroying namespace "services-9118" for this suite. @ 02/20/24 23:21:37.799
• [7.434 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl cluster-info should check if Kubernetes control plane services is included in cluster-info  [Conformance]
test/e2e/kubectl/kubectl.go:1316
  STEP: Creating a kubernetes client @ 02/20/24 23:21:37.823
  Feb 20 23:21:37.823: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:21:37.823
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:37.89
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:37.893
  STEP: validating cluster-info @ 02/20/24 23:21:37.895
  Feb 20 23:21:37.895: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6158 cluster-info'
  Feb 20 23:21:37.944: INFO: stderr: ""
  Feb 20 23:21:37.944: INFO: stdout: "\x1b[0;32mKubernetes control plane\x1b[0m is running at \x1b[0;33mhttps://10.152.183.1:443\x1b[0m\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n"
  Feb 20 23:21:37.944: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6158" for this suite. @ 02/20/24 23:21:37.947
• [0.210 seconds]
------------------------------
S
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:135
  STEP: Creating a kubernetes client @ 02/20/24 23:21:38.033
  Feb 20 23:21:38.033: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 02/20/24 23:21:38.035
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:38.805
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:38.809
  STEP: create the container to handle the HTTPGet hook request. @ 02/20/24 23:21:38.817
  STEP: create the pod with lifecycle hook @ 02/20/24 23:21:40.931
  STEP: check poststart hook @ 02/20/24 23:21:42.975
  STEP: delete the pod with lifecycle hook @ 02/20/24 23:21:42.991
  Feb 20 23:21:47.058: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-2969" for this suite. @ 02/20/24 23:21:47.065
• [9.043 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:214
  STEP: Creating a kubernetes client @ 02/20/24 23:21:47.076
  Feb 20 23:21:47.076: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:21:47.077
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:21:47.204
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:21:47.206
  STEP: Creating pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674 @ 02/20/24 23:21:47.208
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:21:49.229
  Feb 20 23:21:49.233: INFO: Initial restart count of pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 is 0
  Feb 20 23:21:49.237: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:21:51.248: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:21:53.257: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:21:55.267: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:21:57.281: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:21:59.290: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:01.302: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:03.314: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:05.326: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:07.340: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:09.353: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:11.364: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:13.376: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:15.388: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:17.394: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:19.406: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:21.418: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:23.429: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:25.441: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:27.454: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:29.465: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:31.477: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:33.489: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:35.494: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:37.508: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:39.513: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:41.517: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:43.529: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:45.540: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:47.554: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:49.567: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:51.579: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:53.591: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:55.603: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:57.608: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:22:59.665: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:01.677: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:03.685: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:05.689: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:07.702: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:09.714: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:11.726: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:13.739: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:15.743: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:17.756: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:19.769: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:21.785: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:23.798: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:25.803: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:27.817: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:29.829: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:31.842: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:33.856: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:35.860: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:37.873: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:39.878: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:41.890: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:43.901: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:45.911: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:47.925: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:49.937: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:51.950: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:53.953: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:56.007: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:23:58.020: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:00.032: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:02.045: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:04.056: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:06.068: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:08.083: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:10.095: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:12.106: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:14.118: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:16.122: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:18.127: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:20.139: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:22.152: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:24.164: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:26.178: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:28.236: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:30.248: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:32.260: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:34.272: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:36.283: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:38.289: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:40.300: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:42.314: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:44.327: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:46.332: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:48.345: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:50.397: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:52.409: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:54.422: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:56.434: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:24:58.447: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:00.459: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:02.472: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:04.484: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:06.497: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:08.511: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:10.524: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:12.535: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:14.551: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:16.562: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:18.577: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:20.589: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:22.599: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:24.612: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:26.624: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:28.638: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:30.649: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:32.662: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:34.682: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:36.695: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:38.699: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:40.727: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:42.738: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:44.751: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:46.764: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:48.779: INFO: Get pod test-webserver-6853d11e-55a1-4c11-b38a-fcadf1e5f884 in namespace container-probe-6674
  Feb 20 23:25:50.780: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:25:50.793
  STEP: Destroying namespace "container-probe-6674" for this suite. @ 02/20/24 23:25:50.853
• [243.796 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController should update/patch PodDisruptionBudget status [Conformance]
test/e2e/apps/disruption.go:164
  STEP: Creating a kubernetes client @ 02/20/24 23:25:50.873
  Feb 20 23:25:50.873: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption @ 02/20/24 23:25:50.873
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:25:51.057
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:25:51.059
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:25:51.068
  STEP: Updating PodDisruptionBudget status @ 02/20/24 23:25:53.082
  STEP: Waiting for all pods to be running @ 02/20/24 23:25:53.127
  Feb 20 23:25:53.134: INFO: running pods: 0 < 1
  STEP: locating a running pod @ 02/20/24 23:25:55.145
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:25:55.18
  STEP: Patching PodDisruptionBudget status @ 02/20/24 23:25:55.186
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:25:55.197
  Feb 20 23:25:55.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2491" for this suite. @ 02/20/24 23:25:55.202
• [4.336 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should guarantee kube-root-ca.crt exist in any namespace [Conformance]
test/e2e/auth/service_accounts.go:740
  STEP: Creating a kubernetes client @ 02/20/24 23:25:55.209
  Feb 20 23:25:55.209: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/20/24 23:25:55.21
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:25:55.737
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:25:55.74
  Feb 20 23:25:55.746: INFO: Got root ca configmap in namespace "svcaccounts-4427"
  Feb 20 23:25:55.754: INFO: Deleted root ca configmap in namespace "svcaccounts-4427"
  STEP: waiting for a new root ca configmap created @ 02/20/24 23:25:56.255
  Feb 20 23:25:56.265: INFO: Recreated root ca configmap in namespace "svcaccounts-4427"
  Feb 20 23:25:56.288: INFO: Updated root ca configmap in namespace "svcaccounts-4427"
  STEP: waiting for the root ca configmap reconciled @ 02/20/24 23:25:56.788
  Feb 20 23:25:56.799: INFO: Reconciled root ca configmap in namespace "svcaccounts-4427"
  Feb 20 23:25:56.799: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-4427" for this suite. @ 02/20/24 23:25:56.811
• [1.631 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a validating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:403
  STEP: Creating a kubernetes client @ 02/20/24 23:25:56.842
  Feb 20 23:25:56.842: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:25:56.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:25:57.203
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:25:57.21
  STEP: Setting up server cert @ 02/20/24 23:25:57.512
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:25:57.798
  STEP: Deploying the webhook pod @ 02/20/24 23:25:57.809
  STEP: Wait for the deployment to be ready @ 02/20/24 23:25:57.824
  Feb 20 23:25:57.829: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:25:59.865
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:25:59.891
  Feb 20 23:26:00.891: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a validating webhook configuration @ 02/20/24 23:26:00.896
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 02/20/24 23:26:00.913
  STEP: Updating a validating webhook configuration's rules to not include the create operation @ 02/20/24 23:26:00.918
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 02/20/24 23:26:00.928
  STEP: Patching a validating webhook configuration's rules to include the create operation @ 02/20/24 23:26:00.944
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 02/20/24 23:26:00.953
  Feb 20 23:26:01.089: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2257" for this suite. @ 02/20/24 23:26:01.147
  STEP: Destroying namespace "webhook-markers-7303" for this suite. @ 02/20/24 23:26:01.154
• [4.319 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all services are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:252
  STEP: Creating a kubernetes client @ 02/20/24 23:26:01.161
  Feb 20 23:26:01.161: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/20/24 23:26:01.161
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:01.619
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:01.623
  STEP: Creating a test namespace @ 02/20/24 23:26:01.626
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:01.736
  STEP: Creating a service in the namespace @ 02/20/24 23:26:01.739
  STEP: Deleting the namespace @ 02/20/24 23:26:01.787
  STEP: Waiting for the namespace to be removed. @ 02/20/24 23:26:01.796
  STEP: Recreating the namespace @ 02/20/24 23:26:07.802
  STEP: Verifying there is no service in the namespace @ 02/20/24 23:26:08.205
  Feb 20 23:26:08.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-6303" for this suite. @ 02/20/24 23:26:08.227
  STEP: Destroying namespace "nsdeletetest-5727" for this suite. @ 02/20/24 23:26:08.243
  Feb 20 23:26:08.247: INFO: Namespace nsdeletetest-5727 was already deleted
  STEP: Destroying namespace "nsdeletetest-3475" for this suite. @ 02/20/24 23:26:08.247
• [7.094 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a read only busybox container should not write to root filesystem [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:184
  STEP: Creating a kubernetes client @ 02/20/24 23:26:08.255
  Feb 20 23:26:08.255: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubelet-test @ 02/20/24 23:26:08.256
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:08.432
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:08.439
  Feb 20 23:26:10.525: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-8874" for this suite. @ 02/20/24 23:26:10.538
• [2.306 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replication controller. [Conformance]
test/e2e/apimachinery/resource_quota.go:395
  STEP: Creating a kubernetes client @ 02/20/24 23:26:10.563
  Feb 20 23:26:10.563: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/20/24 23:26:10.563
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:12.206
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:12.208
  STEP: Counting existing ResourceQuota @ 02/20/24 23:26:12.21
  STEP: Creating a ResourceQuota @ 02/20/24 23:26:17.228
  STEP: Ensuring resource quota status is calculated @ 02/20/24 23:26:17.25
  STEP: Creating a ReplicationController @ 02/20/24 23:26:19.254
  STEP: Ensuring resource quota status captures replication controller creation @ 02/20/24 23:26:19.276
  STEP: Deleting a ReplicationController @ 02/20/24 23:26:21.288
  STEP: Ensuring resource quota status released usage @ 02/20/24 23:26:21.315
  Feb 20 23:26:23.328: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8770" for this suite. @ 02/20/24 23:26:23.342
• [12.810 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD with validation schema [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:69
  STEP: Creating a kubernetes client @ 02/20/24 23:26:23.375
  Feb 20 23:26:23.375: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/20/24 23:26:23.377
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:24.052
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:24.054
  Feb 20 23:26:24.056: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: kubectl validation (kubectl create and apply) allows request with known and required properties @ 02/20/24 23:26:25.401
  Feb 20 23:26:25.401: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 create -f -'
  Feb 20 23:26:27.732: INFO: stderr: ""
  Feb 20 23:26:27.732: INFO: stdout: "e2e-test-crd-publish-openapi-2209-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Feb 20 23:26:27.732: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 delete e2e-test-crd-publish-openapi-2209-crds test-foo'
  Feb 20 23:26:27.826: INFO: stderr: ""
  Feb 20 23:26:27.826: INFO: stdout: "e2e-test-crd-publish-openapi-2209-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  Feb 20 23:26:27.826: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 apply -f -'
  Feb 20 23:26:28.089: INFO: stderr: ""
  Feb 20 23:26:28.089: INFO: stdout: "e2e-test-crd-publish-openapi-2209-crd.crd-publish-openapi-test-foo.example.com/test-foo created\n"
  Feb 20 23:26:28.089: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 delete e2e-test-crd-publish-openapi-2209-crds test-foo'
  Feb 20 23:26:28.134: INFO: stderr: ""
  Feb 20 23:26:28.135: INFO: stdout: "e2e-test-crd-publish-openapi-2209-crd.crd-publish-openapi-test-foo.example.com \"test-foo\" deleted\n"
  STEP: kubectl validation (kubectl create and apply) rejects request with value outside defined enum values @ 02/20/24 23:26:28.135
  Feb 20 23:26:28.135: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 create -f -'
  Feb 20 23:26:28.226: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request with unknown properties when disallowed by the schema @ 02/20/24 23:26:28.226
  Feb 20 23:26:28.226: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 create -f -'
  Feb 20 23:26:28.317: INFO: rc: 1
  Feb 20 23:26:28.317: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 apply -f -'
  Feb 20 23:26:28.406: INFO: rc: 1
  STEP: kubectl validation (kubectl create and apply) rejects request without required properties @ 02/20/24 23:26:28.406
  Feb 20 23:26:28.406: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 create -f -'
  Feb 20 23:26:28.502: INFO: rc: 1
  Feb 20 23:26:28.502: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 --namespace=crd-publish-openapi-4433 apply -f -'
  Feb 20 23:26:28.614: INFO: rc: 1
  STEP: kubectl explain works to explain CR properties @ 02/20/24 23:26:28.614
  Feb 20 23:26:28.614: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 explain e2e-test-crd-publish-openapi-2209-crds'
  Feb 20 23:26:28.706: INFO: stderr: ""
  Feb 20 23:26:28.706: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2209-crd\nVERSION:    v1\n\nDESCRIPTION:\n    Foo CRD for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Foo\n\n  status\t<Object>\n    Status of Foo\n\n\n"
  STEP: kubectl explain works to explain CR properties recursively @ 02/20/24 23:26:28.706
  Feb 20 23:26:28.706: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 explain e2e-test-crd-publish-openapi-2209-crds.metadata'
  Feb 20 23:26:28.795: INFO: stderr: ""
  Feb 20 23:26:28.795: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2209-crd\nVERSION:    v1\n\nFIELD: metadata <ObjectMeta>\n\nDESCRIPTION:\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n    ObjectMeta is metadata that all persisted resources must have, which\n    includes all objects users must create.\n    \nFIELDS:\n  annotations\t<map[string]string>\n    Annotations is an unstructured key value map stored with a resource that may\n    be set by external tools to store and retrieve arbitrary metadata. They are\n    not queryable and should be preserved when modifying objects. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations\n\n  creationTimestamp\t<string>\n    CreationTimestamp is a timestamp representing the server time when this\n    object was created. It is not guaranteed to be set in happens-before order\n    across separate operations. Clients may not set this value. It is\n    represented in RFC3339 form and is in UTC.\n    \n    Populated by the system. Read-only. Null for lists. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  deletionGracePeriodSeconds\t<integer>\n    Number of seconds allowed for this object to gracefully terminate before it\n    will be removed from the system. Only set when deletionTimestamp is also\n    set. May only be shortened. Read-only.\n\n  deletionTimestamp\t<string>\n    DeletionTimestamp is RFC 3339 date and time at which this resource will be\n    deleted. This field is set by the server when a graceful deletion is\n    requested by the user, and is not directly settable by a client. The\n    resource is expected to be deleted (no longer visible from resource lists,\n    and not reachable by name) after the time in this field, once the finalizers\n    list is empty. As long as the finalizers list contains items, deletion is\n    blocked. Once the deletionTimestamp is set, this value may not be unset or\n    be set further into the future, although it may be shortened or the resource\n    may be deleted prior to this time. For example, a user may request that a\n    pod is deleted in 30 seconds. The Kubelet will react by sending a graceful\n    termination signal to the containers in the pod. After that 30 seconds, the\n    Kubelet will send a hard termination signal (SIGKILL) to the container and\n    after cleanup, remove the pod from the API. In the presence of network\n    partitions, this object may still exist after this timestamp, until an\n    administrator or automated process can determine the resource is fully\n    terminated. If not set, graceful deletion of the object has not been\n    requested.\n    \n    Populated by the system when a graceful deletion is requested. Read-only.\n    More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  finalizers\t<[]string>\n    Must be empty before the object is deleted from the registry. Each entry is\n    an identifier for the responsible component that will remove the entry from\n    the list. If the deletionTimestamp of the object is non-nil, entries in this\n    list can only be removed. Finalizers may be processed and removed in any\n    order.  Order is NOT enforced because it introduces significant risk of\n    stuck finalizers. finalizers is a shared field, any actor with permission\n    can reorder it. If the finalizer list is processed in order, then this can\n    lead to a situation in which the component responsible for the first\n    finalizer in the list is waiting for a signal (field value, external system,\n    or other) produced by a component responsible for a finalizer later in the\n    list, resulting in a deadlock. Without enforced ordering finalizers are free\n    to order amongst themselves and are not vulnerable to ordering changes in\n    the list.\n\n  generateName\t<string>\n    GenerateName is an optional prefix, used by the server, to generate a unique\n    name ONLY IF the Name field has not been provided. If this field is used,\n    the name returned to the client will be different than the name passed. This\n    value will also be combined with a unique suffix. The provided value has the\n    same validation rules as the Name field, and may be truncated by the length\n    of the suffix required to make the value unique on the server.\n    \n    If this field is specified and the generated name exists, the server will\n    return a 409.\n    \n    Applied only if Name is not specified. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\n\n  generation\t<integer>\n    A sequence number representing a specific generation of the desired state.\n    Populated by the system. Read-only.\n\n  labels\t<map[string]string>\n    Map of string keys and values that can be used to organize and categorize\n    (scope and select) objects. May match selectors of replication controllers\n    and services. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/labels\n\n  managedFields\t<[]ManagedFieldsEntry>\n    ManagedFields maps workflow-id and version to the set of fields that are\n    managed by that workflow. This is mostly for internal housekeeping, and\n    users typically shouldn't need to set or understand this field. A workflow\n    can be the user's name, a controller's name, or the name of a specific apply\n    path like \"ci-cd\". The set of fields is always in the version that the\n    workflow used when modifying the object.\n\n  name\t<string>\n    Name must be unique within a namespace. Is required when creating resources,\n    although some resources may allow a client to request the generation of an\n    appropriate name automatically. Name is primarily intended for creation\n    idempotence and configuration definition. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names\n\n  namespace\t<string>\n    Namespace defines the space within which each name must be unique. An empty\n    namespace is equivalent to the \"default\" namespace, but \"default\" is the\n    canonical representation. Not all objects are required to be scoped to a\n    namespace - the value of this field for those objects will be empty.\n    \n    Must be a DNS_LABEL. Cannot be updated. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces\n\n  ownerReferences\t<[]OwnerReference>\n    List of objects depended by this object. If ALL objects in the list have\n    been deleted, this object will be garbage collected. If this object is\n    managed by a controller, then an entry in this list will point to this\n    controller, with the controller field set to true. There cannot be more than\n    one managing controller.\n\n  resourceVersion\t<string>\n    An opaque value that represents the internal version of this object that can\n    be used by clients to determine when objects have changed. May be used for\n    optimistic concurrency, change detection, and the watch operation on a\n    resource or set of resources. Clients must treat these values as opaque and\n    passed unmodified back to the server. They may only be valid for a\n    particular resource or set of resources.\n    \n    Populated by the system. Read-only. Value must be treated as opaque by\n    clients and . More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\n\n  selfLink\t<string>\n    Deprecated: selfLink is a legacy read-only field that is no longer populated\n    by the system.\n\n  uid\t<string>\n    UID is the unique in time and space value for this object. It is typically\n    generated by the server on successful creation of a resource and is not\n    allowed to change on PUT operations.\n    \n    Populated by the system. Read-only. More info:\n    https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids\n\n\n"
  Feb 20 23:26:28.796: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 explain e2e-test-crd-publish-openapi-2209-crds.spec'
  Feb 20 23:26:28.885: INFO: stderr: ""
  Feb 20 23:26:28.885: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2209-crd\nVERSION:    v1\n\nFIELD: spec <Object>\n\nDESCRIPTION:\n    Specification of Foo\n    \nFIELDS:\n  bars\t<[]Object>\n    List of Bars and their specs.\n\n\n"
  Feb 20 23:26:28.885: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 explain e2e-test-crd-publish-openapi-2209-crds.spec.bars'
  Feb 20 23:26:28.972: INFO: stderr: ""
  Feb 20 23:26:28.972: INFO: stdout: "GROUP:      crd-publish-openapi-test-foo.example.com\nKIND:       e2e-test-crd-publish-openapi-2209-crd\nVERSION:    v1\n\nFIELD: bars <[]Object>\n\nDESCRIPTION:\n    List of Bars and their specs.\n    \nFIELDS:\n  age\t<string>\n    Age of Bar.\n\n  bazs\t<[]string>\n    List of Bazs.\n\n  feeling\t<string>\n    Whether Bar is feeling great.\n\n  name\t<string> -required-\n    Name of Bar.\n\n\n"
  STEP: kubectl explain works to return error when explain is called on property that doesn't exist @ 02/20/24 23:26:28.972
  Feb 20 23:26:28.972: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-4433 explain e2e-test-crd-publish-openapi-2209-crds.spec.bars2'
  Feb 20 23:26:29.168: INFO: rc: 1
  Feb 20 23:26:30.438: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-4433" for this suite. @ 02/20/24 23:26:30.442
• [7.080 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should manage the lifecycle of a job [Conformance]
test/e2e/apps/job.go:713
  STEP: Creating a kubernetes client @ 02/20/24 23:26:30.455
  Feb 20 23:26:30.455: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/20/24 23:26:30.456
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:30.468
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:30.47
  STEP: Creating a suspended job @ 02/20/24 23:26:30.474
  STEP: Patching the Job @ 02/20/24 23:26:30.479
  STEP: Watching for Job to be patched @ 02/20/24 23:26:30.507
  Feb 20 23:26:30.508: INFO: Event ADDED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps] and annotations: map[]
  Feb 20 23:26:30.508: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps] and annotations: map[]
  Feb 20 23:26:30.508: INFO: Event MODIFIED found for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[]
  STEP: Updating the job @ 02/20/24 23:26:30.508
  STEP: Watching for Job to be updated @ 02/20/24 23:26:30.519
  Feb 20 23:26:30.521: INFO: Event MODIFIED found for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:30.521: INFO: Found Job annotations: map[string]string{"updated":"true"}
  STEP: Listing all Jobs with LabelSelector @ 02/20/24 23:26:30.521
  Feb 20 23:26:30.523: INFO: Job: e2e-zs2ps as labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched]
  STEP: Waiting for job to complete @ 02/20/24 23:26:30.523
  STEP: Delete a job collection with a labelselector @ 02/20/24 23:26:38.528
  STEP: Watching for Job to be deleted @ 02/20/24 23:26:38.548
  Feb 20 23:26:38.551: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.551: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.551: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.552: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.552: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.552: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.552: INFO: Event MODIFIED observed for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  Feb 20 23:26:38.552: INFO: Event DELETED found for Job e2e-zs2ps in namespace job-515 with labels: map[e2e-job-label:e2e-zs2ps e2e-zs2ps:patched] and annotations: map[updated:true]
  STEP: Relist jobs to confirm deletion @ 02/20/24 23:26:38.552
  Feb 20 23:26:38.558: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-515" for this suite. @ 02/20/24 23:26:38.567
• [8.171 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:47
  STEP: Creating a kubernetes client @ 02/20/24 23:26:38.627
  Feb 20 23:26:38.627: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:26:38.628
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:38.673
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:38.675
  STEP: Creating secret with name secret-test-4fa117e3-b9c9-494f-842a-2f91d9898c15 @ 02/20/24 23:26:38.676
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:26:38.683
  STEP: Saw pod success @ 02/20/24 23:26:42.706
  Feb 20 23:26:42.709: INFO: Trying to get logs from node control-plane pod pod-secrets-59284c41-ff2c-4b09-8060-6f8b444ffe75 container secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:26:42.723
  Feb 20 23:26:42.753: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-1614" for this suite. @ 02/20/24 23:26:42.756
• [4.152 seconds]
------------------------------
[sig-storage] Downward API volume should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:222
  STEP: Creating a kubernetes client @ 02/20/24 23:26:42.779
  Feb 20 23:26:42.779: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:26:42.78
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:42.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:42.815
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:26:42.83
  STEP: Saw pod success @ 02/20/24 23:26:46.852
  Feb 20 23:26:46.855: INFO: Trying to get logs from node control-plane pod downwardapi-volume-40e641d2-3ecf-452b-8fc5-91366d75817e container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:26:46.87
  Feb 20 23:26:46.895: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1697" for this suite. @ 02/20/24 23:26:46.898
• [4.128 seconds]
------------------------------
SSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] listing validating webhooks should work [Conformance]
test/e2e/apimachinery/webhook.go:572
  STEP: Creating a kubernetes client @ 02/20/24 23:26:46.908
  Feb 20 23:26:46.908: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:26:46.908
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:46.927
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:46.929
  STEP: Setting up server cert @ 02/20/24 23:26:46.976
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:26:47.349
  STEP: Deploying the webhook pod @ 02/20/24 23:26:47.361
  STEP: Wait for the deployment to be ready @ 02/20/24 23:26:47.379
  Feb 20 23:26:47.382: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  Feb 20 23:26:49.433: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 20, 23, 26, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 26, 47, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 26, 47, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 26, 47, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 02/20/24 23:26:51.437
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:26:51.448
  Feb 20 23:26:52.449: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Listing all of the created validation webhooks @ 02/20/24 23:26:52.606
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 02/20/24 23:26:52.628
  STEP: Deleting the collection of validation webhooks @ 02/20/24 23:26:52.646
  STEP: Creating a configMap that does not comply to the validation webhook rules @ 02/20/24 23:26:52.7
  Feb 20 23:26:52.711: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2205" for this suite. @ 02/20/24 23:26:52.752
  STEP: Destroying namespace "webhook-markers-5516" for this suite. @ 02/20/24 23:26:52.764
• [5.864 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support retrieving logs from the container over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:619
  STEP: Creating a kubernetes client @ 02/20/24 23:26:52.773
  Feb 20 23:26:52.773: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:26:52.773
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:52.787
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:52.788
  Feb 20 23:26:52.790: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: creating the pod @ 02/20/24 23:26:52.79
  STEP: submitting the pod to kubernetes @ 02/20/24 23:26:52.79
  Feb 20 23:26:54.812: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4154" for this suite. @ 02/20/24 23:26:54.815
• [2.058 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:222
  STEP: Creating a kubernetes client @ 02/20/24 23:26:54.834
  Feb 20 23:26:54.834: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:26:54.836
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:54.884
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:54.888
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:26:54.892
  STEP: Saw pod success @ 02/20/24 23:26:58.929
  Feb 20 23:26:58.933: INFO: Trying to get logs from node control-plane pod downwardapi-volume-bdf874cd-62af-4b41-bdcc-fce428e3301f container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:26:58.944
  Feb 20 23:26:58.970: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9568" for this suite. @ 02/20/24 23:26:58.973
• [4.145 seconds]
------------------------------
SSSSS
------------------------------
[sig-network] Services should test the lifecycle of an Endpoint [Conformance]
test/e2e/network/service.go:3142
  STEP: Creating a kubernetes client @ 02/20/24 23:26:58.979
  Feb 20 23:26:58.979: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:26:58.98
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:58.994
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:58.995
  STEP: creating an Endpoint @ 02/20/24 23:26:58.998
  STEP: waiting for available Endpoint @ 02/20/24 23:26:59.003
  STEP: listing all Endpoints @ 02/20/24 23:26:59.004
  STEP: updating the Endpoint @ 02/20/24 23:26:59.005
  STEP: fetching the Endpoint @ 02/20/24 23:26:59.012
  STEP: patching the Endpoint @ 02/20/24 23:26:59.013
  STEP: fetching the Endpoint @ 02/20/24 23:26:59.019
  STEP: deleting the Endpoint by Collection @ 02/20/24 23:26:59.02
  STEP: waiting for Endpoint deletion @ 02/20/24 23:26:59.026
  STEP: fetching the Endpoint @ 02/20/24 23:26:59.027
  Feb 20 23:26:59.028: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-7954" for this suite. @ 02/20/24 23:26:59.029
• [0.057 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert a non homogeneous list of CRs [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:176
  STEP: Creating a kubernetes client @ 02/20/24 23:26:59.037
  Feb 20 23:26:59.037: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-webhook @ 02/20/24 23:26:59.037
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:26:59.053
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:26:59.055
  STEP: Setting up server cert @ 02/20/24 23:26:59.056
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 02/20/24 23:26:59.226
  STEP: Deploying the custom resource conversion webhook pod @ 02/20/24 23:26:59.233
  STEP: Wait for the deployment to be ready @ 02/20/24 23:26:59.244
  Feb 20 23:26:59.248: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  Feb 20 23:27:01.282: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 20, 23, 26, 59, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 26, 59, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 26, 59, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 26, 59, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-crd-conversion-webhook-deployment-7ff47d8d4c\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 02/20/24 23:27:03.29
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:27:03.326
  Feb 20 23:27:04.326: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Feb 20 23:27:04.339: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Creating a v1 custom resource @ 02/20/24 23:27:06.923
  STEP: Create a v2 custom resource @ 02/20/24 23:27:06.937
  STEP: List CRs in v1 @ 02/20/24 23:27:06.943
  STEP: List CRs in v2 @ 02/20/24 23:27:06.948
  Feb 20 23:27:06.953: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-8682" for this suite. @ 02/20/24 23:27:07.545
• [8.519 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should contain environment variables for services [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:445
  STEP: Creating a kubernetes client @ 02/20/24 23:27:07.556
  Feb 20 23:27:07.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:27:07.556
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:07.576
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:07.577
  STEP: Saw pod success @ 02/20/24 23:27:13.67
  Feb 20 23:27:13.672: INFO: Trying to get logs from node worker pod client-envvars-84056c71-a3fc-42c3-b1ff-a58b6f250b80 container env3cont: <nil>
  STEP: delete the pod @ 02/20/24 23:27:13.681
  Feb 20 23:27:13.698: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-8180" for this suite. @ 02/20/24 23:27:13.7
• [6.150 seconds]
------------------------------
S
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:89
  STEP: Creating a kubernetes client @ 02/20/24 23:27:13.706
  Feb 20 23:27:13.706: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:27:13.707
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:13.725
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:13.726
  STEP: Creating configMap with name configmap-test-volume-map-b6ab00d5-2590-4370-a2d4-2b8ff5bedb85 @ 02/20/24 23:27:13.728
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:27:13.733
  STEP: Saw pod success @ 02/20/24 23:27:17.752
  Feb 20 23:27:17.758: INFO: Trying to get logs from node worker pod pod-configmaps-cda36e63-4fc9-41ae-b77c-2766aaa59111 container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:27:17.773
  Feb 20 23:27:17.825: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-8427" for this suite. @ 02/20/24 23:27:17.834
• [4.184 seconds]
------------------------------
SSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:107
  STEP: Creating a kubernetes client @ 02/20/24 23:27:17.89
  Feb 20 23:27:17.891: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:27:17.892
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:17.934
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:17.937
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 02/20/24 23:27:17.94
  STEP: Saw pod success @ 02/20/24 23:27:21.993
  Feb 20 23:27:22.000: INFO: Trying to get logs from node worker pod pod-dc408812-ba9b-4a6a-bb4f-79c9508183ba container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:27:22.014
  Feb 20 23:27:22.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2554" for this suite. @ 02/20/24 23:27:22.053
• [4.171 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should unconditionally reject operations on fail closed webhook [Conformance]
test/e2e/apimachinery/webhook.go:238
  STEP: Creating a kubernetes client @ 02/20/24 23:27:22.062
  Feb 20 23:27:22.062: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:27:22.063
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:22.082
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:22.085
  STEP: Setting up server cert @ 02/20/24 23:27:22.107
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:27:22.829
  STEP: Deploying the webhook pod @ 02/20/24 23:27:22.841
  STEP: Wait for the deployment to be ready @ 02/20/24 23:27:22.853
  Feb 20 23:27:22.857: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  Feb 20 23:27:24.893: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 20, 23, 27, 22, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 27, 22, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 27, 22, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 27, 22, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 02/20/24 23:27:26.922
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:27:26.965
  Feb 20 23:27:27.966: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering a webhook that server cannot talk to, with fail closed policy, via the AdmissionRegistration API @ 02/20/24 23:27:27.98
  STEP: create a namespace for the webhook @ 02/20/24 23:27:28.022
  STEP: create a configmap should be unconditionally rejected by the webhook @ 02/20/24 23:27:28.053
  Feb 20 23:27:28.057: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9405" for this suite. @ 02/20/24 23:27:28.111
  STEP: Destroying namespace "webhook-markers-3907" for this suite. @ 02/20/24 23:27:28.119
  STEP: Destroying namespace "fail-closed-namespace-9699" for this suite. @ 02/20/24 23:27:28.124
• [6.071 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should include webhook resources in discovery documents [Conformance]
test/e2e/apimachinery/webhook.go:119
  STEP: Creating a kubernetes client @ 02/20/24 23:27:28.134
  Feb 20 23:27:28.134: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:27:28.134
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:28.151
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:28.153
  STEP: Setting up server cert @ 02/20/24 23:27:28.214
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:27:28.521
  STEP: Deploying the webhook pod @ 02/20/24 23:27:28.53
  STEP: Wait for the deployment to be ready @ 02/20/24 23:27:28.543
  Feb 20 23:27:28.551: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:27:30.569
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:27:30.584
  Feb 20 23:27:31.584: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: fetching the /apis discovery document @ 02/20/24 23:27:31.596
  STEP: finding the admissionregistration.k8s.io API group in the /apis discovery document @ 02/20/24 23:27:31.599
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis discovery document @ 02/20/24 23:27:31.599
  STEP: fetching the /apis/admissionregistration.k8s.io discovery document @ 02/20/24 23:27:31.599
  STEP: finding the admissionregistration.k8s.io/v1 API group/version in the /apis/admissionregistration.k8s.io discovery document @ 02/20/24 23:27:31.601
  STEP: fetching the /apis/admissionregistration.k8s.io/v1 discovery document @ 02/20/24 23:27:31.601
  STEP: finding mutatingwebhookconfigurations and validatingwebhookconfigurations resources in the /apis/admissionregistration.k8s.io/v1 discovery document @ 02/20/24 23:27:31.604
  Feb 20 23:27:31.604: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-4369" for this suite. @ 02/20/24 23:27:31.678
  STEP: Destroying namespace "webhook-markers-3502" for this suite. @ 02/20/24 23:27:31.689
• [3.563 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:57
  STEP: Creating a kubernetes client @ 02/20/24 23:27:31.698
  Feb 20 23:27:31.698: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:27:31.698
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:31.715
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:31.716
  STEP: Creating configMap with name projected-configmap-test-volume-b54f6acb-9f73-4a70-a71f-48c8e70d4797 @ 02/20/24 23:27:31.718
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:27:31.723
  STEP: Saw pod success @ 02/20/24 23:27:35.737
  Feb 20 23:27:35.739: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-035a4771-47a6-4ead-97ad-4bf2eba41edb container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:27:35.743
  Feb 20 23:27:35.759: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-3909" for this suite. @ 02/20/24 23:27:35.761
• [4.069 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a deleted RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:156
  STEP: Creating a kubernetes client @ 02/20/24 23:27:35.767
  Feb 20 23:27:35.767: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename runtimeclass @ 02/20/24 23:27:35.768
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:35.782
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:35.784
  STEP: Deleting RuntimeClass runtimeclass-442-delete-me @ 02/20/24 23:27:35.793
  STEP: Waiting for the RuntimeClass to disappear @ 02/20/24 23:27:35.798
  Feb 20 23:27:35.803: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-442" for this suite. @ 02/20/24 23:27:35.805
• [0.044 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] updates the published spec when one version gets renamed [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:391
  STEP: Creating a kubernetes client @ 02/20/24 23:27:35.812
  Feb 20 23:27:35.812: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/20/24 23:27:35.813
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:35.83
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:35.832
  STEP: set up a multi version CRD @ 02/20/24 23:27:35.835
  Feb 20 23:27:35.836: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: rename a version @ 02/20/24 23:27:39.109
  STEP: check the new version name is served @ 02/20/24 23:27:39.126
  STEP: check the old version name is removed @ 02/20/24 23:27:39.953
  STEP: check the other version is not changed @ 02/20/24 23:27:40.612
  Feb 20 23:27:43.131: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9358" for this suite. @ 02/20/24 23:27:43.135
• [7.330 seconds]
------------------------------
S
------------------------------
[sig-apps] ReplicaSet should adopt matching pods on creation and release no longer matching pods [Conformance]
test/e2e/apps/replica_set.go:131
  STEP: Creating a kubernetes client @ 02/20/24 23:27:43.142
  Feb 20 23:27:43.142: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/20/24 23:27:43.142
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:43.155
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:43.157
  STEP: Given a Pod with a 'name' label pod-adoption-release is created @ 02/20/24 23:27:43.159
  STEP: When a replicaset with a matching selector is created @ 02/20/24 23:27:45.18
  STEP: Then the orphan pod is adopted @ 02/20/24 23:27:45.188
  STEP: When the matched label of one of its pods change @ 02/20/24 23:27:46.199
  Feb 20 23:27:46.206: INFO: Pod name pod-adoption-release: Found 1 pods out of 1
  STEP: Then the pod is released @ 02/20/24 23:27:46.238
  Feb 20 23:27:47.254: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-2542" for this suite. @ 02/20/24 23:27:47.264
• [4.140 seconds]
------------------------------
SSSS
------------------------------
[sig-node] NoExecuteTaintManager Single Pod [Serial] removing taint cancels eviction [Disruptive] [Conformance]
test/e2e/node/taints.go:290
  STEP: Creating a kubernetes client @ 02/20/24 23:27:47.283
  Feb 20 23:27:47.283: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename taint-single-pod @ 02/20/24 23:27:47.285
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:27:47.348
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:27:47.35
  Feb 20 23:27:47.351: INFO: Waiting up to 1m0s for all nodes to be ready
  Feb 20 23:28:47.371: INFO: Waiting for terminating namespaces to be deleted...
  Feb 20 23:28:47.379: INFO: Starting informer...
  STEP: Starting pod... @ 02/20/24 23:28:47.38
  Feb 20 23:28:47.616: INFO: Pod is running on control-plane. Tainting Node
  STEP: Trying to apply a taint on the Node @ 02/20/24 23:28:47.617
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 02/20/24 23:28:47.644
  STEP: Waiting short time to make sure Pod is queued for deletion @ 02/20/24 23:28:47.653
  Feb 20 23:28:47.654: INFO: Pod wasn't evicted. Proceeding
  Feb 20 23:28:47.654: INFO: Removing taint from Node
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 02/20/24 23:28:47.676
  STEP: Waiting some time to make sure that toleration time passed. @ 02/20/24 23:28:47.679
  Feb 20 23:30:02.682: INFO: Pod wasn't evicted. Test successful
  Feb 20 23:30:02.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "taint-single-pod-8823" for this suite. @ 02/20/24 23:30:02.685
• [135.413 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a tcp:8080 liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:183
  STEP: Creating a kubernetes client @ 02/20/24 23:30:02.698
  Feb 20 23:30:02.698: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:30:02.699
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:30:02.723
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:30:02.726
  STEP: Creating pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174 @ 02/20/24 23:30:02.728
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:30:04.751
  Feb 20 23:30:04.758: INFO: Initial restart count of pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 is 0
  Feb 20 23:30:04.775: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:06.784: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:08.793: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:10.802: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:12.810: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:14.818: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:16.826: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:18.834: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:20.843: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:22.851: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:24.859: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:26.868: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:28.876: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:30.886: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:32.893: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:34.903: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:36.911: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:38.919: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:40.938: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:42.945: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:44.952: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:46.956: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:48.963: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:50.972: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:52.980: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:54.988: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:56.996: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:30:59.005: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:01.014: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:03.021: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:05.030: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:07.033: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:09.040: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:11.049: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:13.052: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:15.058: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:17.064: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:19.072: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:21.081: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:23.089: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:25.092: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:27.095: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:29.102: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:31.111: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:33.119: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:35.127: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:37.130: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:39.167: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:41.177: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:43.182: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:45.190: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:47.197: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:49.204: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:51.213: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:53.216: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:55.224: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:57.232: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:31:59.235: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:01.244: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:03.252: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:05.259: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:07.262: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:09.266: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:11.276: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:13.283: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:15.290: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:17.299: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:19.303: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:21.311: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:23.320: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:25.328: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:27.336: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:29.339: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:31.348: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:33.357: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:35.361: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:37.369: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:39.375: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:41.400: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:43.462: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:45.470: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:47.477: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:49.486: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:51.496: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:53.499: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:55.507: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:57.515: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:32:59.523: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:01.532: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:03.541: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:05.548: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:07.557: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:09.565: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:11.569: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:13.575: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:15.578: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:17.586: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:19.594: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:21.603: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:23.611: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:25.619: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:27.626: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:29.634: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:31.644: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:33.653: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:35.662: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:37.671: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:39.678: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:41.688: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:43.690: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:45.737: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:47.741: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:49.749: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:51.758: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:53.767: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:55.769: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:57.777: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:33:59.785: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:34:01.795: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:34:03.803: INFO: Get pod liveness-e41d3b5d-c9d1-4fca-aa5f-a549bde953a5 in namespace container-probe-9174
  Feb 20 23:34:05.804: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:34:05.808
  STEP: Destroying namespace "container-probe-9174" for this suite. @ 02/20/24 23:34:05.83
• [243.143 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replicaset should have a working scale subresource [Conformance]
test/e2e/apps/replica_set.go:143
  STEP: Creating a kubernetes client @ 02/20/24 23:34:05.843
  Feb 20 23:34:05.843: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/20/24 23:34:05.844
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:05.868
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:05.87
  STEP: Creating replica set "test-rs" that asks for more than the allowed pod quota @ 02/20/24 23:34:05.871
  Feb 20 23:34:05.879: INFO: Pod name sample-pod: Found 0 pods out of 1
  Feb 20 23:34:10.887: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/20/24 23:34:10.887
  STEP: getting scale subresource @ 02/20/24 23:34:10.887
  STEP: updating a scale subresource @ 02/20/24 23:34:10.893
  STEP: verifying the replicaset Spec.Replicas was modified @ 02/20/24 23:34:10.911
  STEP: Patch a scale subresource @ 02/20/24 23:34:10.915
  Feb 20 23:34:10.933: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-5869" for this suite. @ 02/20/24 23:34:10.943
• [5.108 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should apply changes to a resourcequota status [Conformance]
test/e2e/apimachinery/resource_quota.go:1013
  STEP: Creating a kubernetes client @ 02/20/24 23:34:10.952
  Feb 20 23:34:10.952: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/20/24 23:34:10.952
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:10.984
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:10.986
  STEP: Creating resourceQuota "e2e-rq-status-7vr54" @ 02/20/24 23:34:10.993
  Feb 20 23:34:11.033: INFO: Resource quota "e2e-rq-status-7vr54" reports spec: hard cpu limit of 500m
  Feb 20 23:34:11.033: INFO: Resource quota "e2e-rq-status-7vr54" reports spec: hard memory limit of 500Mi
  STEP: Updating resourceQuota "e2e-rq-status-7vr54" /status @ 02/20/24 23:34:11.033
  STEP: Confirm /status for "e2e-rq-status-7vr54" resourceQuota via watch @ 02/20/24 23:34:11.055
  Feb 20 23:34:11.056: INFO: observed resourceQuota "e2e-rq-status-7vr54" in namespace "resourcequota-7302" with hard status: v1.ResourceList(nil)
  Feb 20 23:34:11.056: INFO: Found resourceQuota "e2e-rq-status-7vr54" in namespace "resourcequota-7302" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Feb 20 23:34:11.056: INFO: ResourceQuota "e2e-rq-status-7vr54" /status was updated
  STEP: Patching hard spec values for cpu & memory @ 02/20/24 23:34:11.057
  Feb 20 23:34:11.066: INFO: Resource quota "e2e-rq-status-7vr54" reports spec: hard cpu limit of 1
  Feb 20 23:34:11.066: INFO: Resource quota "e2e-rq-status-7vr54" reports spec: hard memory limit of 1Gi
  STEP: Patching "e2e-rq-status-7vr54" /status @ 02/20/24 23:34:11.066
  STEP: Confirm /status for "e2e-rq-status-7vr54" resourceQuota via watch @ 02/20/24 23:34:11.074
  Feb 20 23:34:11.075: INFO: observed resourceQuota "e2e-rq-status-7vr54" in namespace "resourcequota-7302" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:500, scale:-3}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500m", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:524288000, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"500Mi", Format:"BinarySI"}}
  Feb 20 23:34:11.075: INFO: Found resourceQuota "e2e-rq-status-7vr54" in namespace "resourcequota-7302" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:1, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:1073741824, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"1Gi", Format:"BinarySI"}}
  Feb 20 23:34:11.075: INFO: ResourceQuota "e2e-rq-status-7vr54" /status was patched
  STEP: Get "e2e-rq-status-7vr54" /status @ 02/20/24 23:34:11.075
  Feb 20 23:34:11.077: INFO: Resourcequota "e2e-rq-status-7vr54" reports status: hard cpu of 1
  Feb 20 23:34:11.077: INFO: Resourcequota "e2e-rq-status-7vr54" reports status: hard memory of 1Gi
  STEP: Repatching "e2e-rq-status-7vr54" /status before checking Spec is unchanged @ 02/20/24 23:34:11.078
  Feb 20 23:34:11.087: INFO: Resourcequota "e2e-rq-status-7vr54" reports status: hard cpu of 2
  Feb 20 23:34:11.087: INFO: Resourcequota "e2e-rq-status-7vr54" reports status: hard memory of 2Gi
  Feb 20 23:34:11.088: INFO: Found resourceQuota "e2e-rq-status-7vr54" in namespace "resourcequota-7302" with hard status: v1.ResourceList{"cpu":resource.Quantity{i:resource.int64Amount{value:2, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2", Format:"DecimalSI"}, "memory":resource.Quantity{i:resource.int64Amount{value:2147483648, scale:0}, d:resource.infDecAmount{Dec:(*inf.Dec)(nil)}, s:"2Gi", Format:"BinarySI"}}
  Feb 20 23:34:16.092: INFO: ResourceQuota "e2e-rq-status-7vr54" Spec was unchanged and /status reset
  Feb 20 23:34:16.092: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-7302" for this suite. @ 02/20/24 23:34:16.094
• [5.148 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:375
  STEP: Creating a kubernetes client @ 02/20/24 23:34:16.101
  Feb 20 23:34:16.101: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:34:16.102
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:16.116
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:16.118
  STEP: Creating configMap with name projected-configmap-test-volume-11bf2d06-03ba-4c41-9e50-16e08db285dc @ 02/20/24 23:34:16.119
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:34:16.124
  STEP: Saw pod success @ 02/20/24 23:34:20.15
  Feb 20 23:34:20.157: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-e59e6560-cb7f-42af-8e99-7894a68087fe container projected-configmap-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:34:20.194
  Feb 20 23:34:20.239: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8910" for this suite. @ 02/20/24 23:34:20.246
• [4.155 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for pods for Subdomain [Conformance]
test/e2e/network/dns.go:286
  STEP: Creating a kubernetes client @ 02/20/24 23:34:20.26
  Feb 20 23:34:20.260: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/20/24 23:34:20.261
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:20.275
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:20.277
  STEP: Creating a test headless service @ 02/20/24 23:34:20.279
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service-2.dns-6055.svc.cluster.local;sleep 1; done
   @ 02/20/24 23:34:20.285
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +notcp +noall +answer +search dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service-2.dns-6055.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service-2.dns-6055.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service-2.dns-6055.svc.cluster.local;sleep 1; done
   @ 02/20/24 23:34:20.285
  STEP: creating a pod to probe DNS @ 02/20/24 23:34:20.285
  STEP: submitting the pod to kubernetes @ 02/20/24 23:34:20.286
  STEP: retrieving the pod @ 02/20/24 23:34:22.312
  STEP: looking for the results for each expected name from probers @ 02/20/24 23:34:22.32
  Feb 20 23:34:22.327: INFO: Unable to read wheezy_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.331: INFO: Unable to read wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.335: INFO: Unable to read wheezy_udp@dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.338: INFO: Unable to read wheezy_tcp@dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.341: INFO: Unable to read jessie_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.344: INFO: Unable to read jessie_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.346: INFO: Unable to read jessie_udp@dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.348: INFO: Unable to read jessie_tcp@dns-test-service-2.dns-6055.svc.cluster.local from pod dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b: the server could not find the requested resource (get pods dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b)
  Feb 20 23:34:22.348: INFO: Lookups using dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b failed for: [wheezy_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local wheezy_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local wheezy_udp@dns-test-service-2.dns-6055.svc.cluster.local wheezy_tcp@dns-test-service-2.dns-6055.svc.cluster.local jessie_udp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local jessie_tcp@dns-querier-2.dns-test-service-2.dns-6055.svc.cluster.local jessie_udp@dns-test-service-2.dns-6055.svc.cluster.local jessie_tcp@dns-test-service-2.dns-6055.svc.cluster.local]

  Feb 20 23:34:22.352: INFO: Pod client logs for webserver: 
  Feb 20 23:34:22.360: INFO: Pod client logs for querier: 
  Feb 20 23:34:22.364: INFO: Pod client logs for jessie-querier: 
  Feb 20 23:34:27.407: INFO: DNS probes using dns-6055/dns-test-1ef12e6d-1dcd-4484-b86f-85f12b494b7b succeeded

  Feb 20 23:34:27.407: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:34:27.409
  STEP: deleting the test headless service @ 02/20/24 23:34:27.422
  STEP: Destroying namespace "dns-6055" for this suite. @ 02/20/24 23:34:27.445
• [7.191 seconds]
------------------------------
S
------------------------------
[sig-storage] EmptyDir volumes volume on tmpfs should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:87
  STEP: Creating a kubernetes client @ 02/20/24 23:34:27.451
  Feb 20 23:34:27.451: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:34:27.452
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:27.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:27.468
  STEP: Creating a pod to test emptydir volume type on tmpfs @ 02/20/24 23:34:27.469
  STEP: Saw pod success @ 02/20/24 23:34:31.508
  Feb 20 23:34:31.532: INFO: Trying to get logs from node control-plane pod pod-e12f58e0-3f4a-4303-b14a-f72a1a90fa9f container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:34:31.536
  Feb 20 23:34:31.550: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-2366" for this suite. @ 02/20/24 23:34:31.552
• [4.107 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] FieldValidation should detect duplicates in a CR when preserving unknown fields [Conformance]
test/e2e/apimachinery/field_validation.go:622
  STEP: Creating a kubernetes client @ 02/20/24 23:34:31.559
  Feb 20 23:34:31.559: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/20/24 23:34:31.559
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:31.576
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:31.577
  Feb 20 23:34:31.579: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  W0220 23:34:34.141476      22 warnings.go:70] unknown field "alpha"
  W0220 23:34:34.141503      22 warnings.go:70] unknown field "beta"
  W0220 23:34:34.141508      22 warnings.go:70] unknown field "delta"
  W0220 23:34:34.141512      22 warnings.go:70] unknown field "epsilon"
  W0220 23:34:34.141515      22 warnings.go:70] unknown field "gamma"
  Feb 20 23:34:34.699: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-4089" for this suite. @ 02/20/24 23:34:34.729
• [3.187 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should support CSIVolumeSource in Pod API [Conformance]
test/e2e/storage/csi_inline.go:50
  STEP: Creating a kubernetes client @ 02/20/24 23:34:34.748
  Feb 20 23:34:34.748: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename csiinlinevolumes @ 02/20/24 23:34:34.75
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:34.789
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:34.792
  STEP: creating @ 02/20/24 23:34:34.795
  STEP: getting @ 02/20/24 23:34:34.813
  STEP: listing in namespace @ 02/20/24 23:34:34.815
  STEP: patching @ 02/20/24 23:34:34.818
  STEP: deleting @ 02/20/24 23:34:34.828
  Feb 20 23:34:34.837: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-9756" for this suite. @ 02/20/24 23:34:34.84
• [0.099 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected secret should be consumable in multiple volumes in a pod [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:119
  STEP: Creating a kubernetes client @ 02/20/24 23:34:34.847
  Feb 20 23:34:34.847: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:34:34.848
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:34.865
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:34.867
  STEP: Creating secret with name projected-secret-test-fe9974e8-cdff-4b1f-9ceb-d772e1d9befd @ 02/20/24 23:34:34.868
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:34:34.873
  STEP: Saw pod success @ 02/20/24 23:34:38.901
  Feb 20 23:34:38.908: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-8347ec59-4e4f-4c7e-90e6-418fb3df01fa container secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:34:38.923
  Feb 20 23:34:38.975: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1444" for this suite. @ 02/20/24 23:34:38.984
• [4.147 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from ExternalName to NodePort [Conformance]
test/e2e/network/service.go:1455
  STEP: Creating a kubernetes client @ 02/20/24 23:34:38.995
  Feb 20 23:34:38.995: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:34:38.995
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:34:39.017
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:34:39.019
  STEP: creating a service externalname-service with the type=ExternalName in namespace services-7201 @ 02/20/24 23:34:39.02
  STEP: changing the ExternalName service to type=NodePort @ 02/20/24 23:34:39.028
  STEP: creating replication controller externalname-service in namespace services-7201 @ 02/20/24 23:34:39.047
  I0220 23:34:39.054394      22 runners.go:197] Created replication controller with name: externalname-service, namespace: services-7201, replica count: 2
  I0220 23:34:42.105955      22 runners.go:197] externalname-service Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:34:42.106: INFO: Creating new exec pod
  Feb 20 23:34:45.140: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Feb 20 23:34:45.262: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:45.262: INFO: stdout: ""
  Feb 20 23:34:46.262: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Feb 20 23:34:46.396: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:46.396: INFO: stdout: ""
  Feb 20 23:34:47.263: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Feb 20 23:34:47.393: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:47.393: INFO: stdout: ""
  Feb 20 23:34:48.262: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 externalname-service 80'
  Feb 20 23:34:48.390: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 externalname-service 80\nConnection to externalname-service 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:48.390: INFO: stdout: "externalname-service-x6vn9"
  Feb 20 23:34:48.390: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.122 80'
  Feb 20 23:34:48.470: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.122 80\nConnection to 10.152.183.122 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:48.470: INFO: stdout: ""
  Feb 20 23:34:49.471: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.122 80'
  Feb 20 23:34:49.586: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.122 80\nConnection to 10.152.183.122 80 port [tcp/http] succeeded!\n"
  Feb 20 23:34:49.586: INFO: stdout: "externalname-service-x6vn9"
  Feb 20 23:34:49.586: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.210 31506'
  Feb 20 23:34:49.656: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.210 31506\nConnection to 10.100.138.210 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:49.656: INFO: stdout: "externalname-service-x6vn9"
  Feb 20 23:34:49.656: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:49.724: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:49.724: INFO: stdout: ""
  Feb 20 23:34:50.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:50.837: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:50.837: INFO: stdout: ""
  Feb 20 23:34:51.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:51.873: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:51.873: INFO: stdout: ""
  Feb 20 23:34:52.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:52.879: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:52.879: INFO: stdout: ""
  Feb 20 23:34:53.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:53.864: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:53.864: INFO: stdout: ""
  Feb 20 23:34:54.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:54.856: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:54.856: INFO: stdout: ""
  Feb 20 23:34:55.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:55.796: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:55.796: INFO: stdout: ""
  Feb 20 23:34:56.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:56.855: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:56.855: INFO: stdout: ""
  Feb 20 23:34:57.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:57.843: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:57.843: INFO: stdout: ""
  Feb 20 23:34:58.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:58.846: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:58.846: INFO: stdout: ""
  Feb 20 23:34:59.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:34:59.886: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:34:59.886: INFO: stdout: ""
  Feb 20 23:35:00.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:00.800: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:00.800: INFO: stdout: ""
  Feb 20 23:35:01.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:01.861: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:01.861: INFO: stdout: ""
  Feb 20 23:35:02.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:02.803: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:02.803: INFO: stdout: ""
  Feb 20 23:35:03.724: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:03.898: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:03.898: INFO: stdout: ""
  Feb 20 23:35:04.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:04.844: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:04.844: INFO: stdout: ""
  Feb 20 23:35:05.725: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-7201 exec execpodjn27d -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31506'
  Feb 20 23:35:05.803: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31506\nConnection to 10.100.138.108 31506 port [tcp/*] succeeded!\n"
  Feb 20 23:35:05.803: INFO: stdout: "externalname-service-x6vn9"
  Feb 20 23:35:05.803: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:35:05.805: INFO: Cleaning up the ExternalName to NodePort test service
  STEP: Destroying namespace "services-7201" for this suite. @ 02/20/24 23:35:05.829
• [26.841 seconds]
------------------------------
S
------------------------------
[sig-apps] Deployment RollingUpdateDeployment should delete old pods and create new ones [Conformance]
test/e2e/apps/deployment.go:105
  STEP: Creating a kubernetes client @ 02/20/24 23:35:05.836
  Feb 20 23:35:05.836: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/20/24 23:35:05.837
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:05.851
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:05.853
  Feb 20 23:35:05.854: INFO: Creating replica set "test-rolling-update-controller" (going to be adopted)
  Feb 20 23:35:05.861: INFO: Pod name sample-pod: Found 0 pods out of 1
  Feb 20 23:35:10.868: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/20/24 23:35:10.868
  Feb 20 23:35:10.868: INFO: Creating deployment "test-rolling-update-deployment"
  Feb 20 23:35:10.885: INFO: Ensuring deployment "test-rolling-update-deployment" gets the next revision from the one the adopted replica set "test-rolling-update-controller" has
  Feb 20 23:35:10.894: INFO: new replicaset for deployment "test-rolling-update-deployment" is yet to be created
  Feb 20 23:35:12.898: INFO: Ensuring status for deployment "test-rolling-update-deployment" is the expected
  Feb 20 23:35:12.899: INFO: Ensuring deployment "test-rolling-update-deployment" has one old replica set (the one it adopted)
  Feb 20 23:35:12.903: INFO: Deployment "test-rolling-update-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9637",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a670cac6-d1da-49d3-9602-071687bc192b",
      ResourceVersion: (string) (len=5) "12020",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844068910,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=10) "sample-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=10) "sample-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=10) "sample-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=82) "ReplicaSet \"test-rolling-update-deployment-7f5c55c64\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 20 23:35:12.905: INFO: New ReplicaSet "test-rolling-update-deployment-7f5c55c64" of Deployment "test-rolling-update-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9637",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "f68c41ca-0a5b-41d0-b69b-c2f1c2c26597",
      ResourceVersion: (string) (len=5) "12010",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844068910,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305833"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "a670cac6-d1da-49d3-9602-071687bc192b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=783) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 36 37 30 63 61  63 36 2d 64 31 64 61 2d  |\"a670cac6-d1da-|
              00000120  34 39 64 33 2d 39 36 30  32 2d 30 37 31 36 38 37  |49d3-9602-071687|
              00000130  62 63 31 39 32 62 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |bc192b\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 61 67 6e 68 6f 73 74  |name\":\"agnhost|
              000001f0  5c 22 7d 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |\"}":{".":{},"f:|
              00000200  69 6d 61 67 65 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |image":{},"f:ima|
              00000210  67 65 50 75 6c 6c 50 6f  6c 69 63 79 22 3a 7b 7d  |gePullPolicy":{}|
              00000220  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000230  72 65 73 6f 75 72 63 65  73 22 3a 7b 7d 2c 22 66  |resources":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 4d 65 73 73 61  67 65 50 61 74 68 22 3a  |ionMessagePath":|
              00000270  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000280  6e 4d 65 73 73 61 67 65  50 6f 6c 69 63 79 22 3a  |nMessagePolicy":|
              00000290  7b 7d 7d 7d 2c 22 66 3a  64 6e 73 50 6f 6c 69 63  |{}}},"f:dnsPolic|
              000002a0  79 22 3a 7b 7d 2c 22 66  3a 72 65 73 74 61 72 74  |y":{},"f:restart|
              000002b0  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 73 63  |Policy":{},"f:sc|
              000002c0  68 65 64 75 6c 65 72 4e  61 6d 65 22 3a 7b 7d 2c  |hedulerName":{},|
              000002d0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000002e0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000002f0  61 74 69 6f 6e 47 72 61  63 65 50 65 72 69 6f 64  |ationGracePeriod|
              00000300  53 65 63 6f 6e 64 73 22  3a 7b 7d 7d 7d 7d 7d     |Seconds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 20 23:35:12.906: INFO: All old ReplicaSets of Deployment "test-rolling-update-deployment":
  Feb 20 23:35:12.906: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-rolling-update-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-9637",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02736367-b1a9-4d4e-8525-997cff11944e",
      ResourceVersion: (string) (len=5) "12018",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844068905,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=19) "3546343826724305832"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=30) "test-rolling-update-deployment",
          UID: (types.UID) (len=36) "a670cac6-d1da-49d3-9602-071687bc192b",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068905,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=533) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  2c 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |,"f:labels":{"."|
              00000060  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000070  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              00000080  73 70 65 63 22 3a 7b 22  66 3a 73 65 6c 65 63 74  |spec":{"f:select|
              00000090  6f 72 22 3a 7b 7d 2c 22  66 3a 74 65 6d 70 6c 61  |or":{},"f:templa|
              000000a0  74 65 22 3a 7b 22 66 3a  6d 65 74 61 64 61 74 61  |te":{"f:metadata|
              000000b0  22 3a 7b 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |":{"f:labels":{"|
              000000c0  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              000000d0  7d 2c 22 66 3a 70 6f 64  22 3a 7b 7d 7d 7d 2c 22  |},"f:pod":{}}},"|
              000000e0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000f0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              00000100  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              00000110  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000120  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000130  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000140  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000150  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 74 65  |ources":{},"f:te|
              00000160  72 6d 69 6e 61 74 69 6f  6e 4d 65 73 73 61 67 65  |rminationMessage|
              00000170  50 61 74 68 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |Path":{},"f:term|
              00000180  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 6f  |inationMessagePo|
              00000190  6c 69 63 79 22 3a 7b 7d  7d 7d 2c 22 66 3a 64 6e  |licy":{}}},"f:dn|
              000001a0  73 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 72  |sPolicy":{},"f:r|
              000001b0  65 73 74 61 72 74 50 6f  6c 69 63 79 22 3a 7b 7d  |estartPolicy":{}|
              000001c0  2c 22 66 3a 73 63 68 65  64 75 6c 65 72 4e 61 6d  |,"f:schedulerNam|
              000001d0  65 22 3a 7b 7d 2c 22 66  3a 73 65 63 75 72 69 74  |e":{},"f:securit|
              000001e0  79 43 6f 6e 74 65 78 74  22 3a 7b 7d 2c 22 66 3a  |yContext":{},"f:|
              000001f0  74 65 72 6d 69 6e 61 74  69 6f 6e 47 72 61 63 65  |terminationGrace|
              00000200  50 65 72 69 6f 64 53 65  63 6f 6e 64 73 22 3a 7b  |PeriodSeconds":{|
              00000210  7d 7d 7d 7d 7d                                    |}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=242) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 66 3a 64 65 70 6c 6f  79 6d 65 6e 74 2e 6b 75  |"f:deployment.ku|
              00000030  62 65 72 6e 65 74 65 73  2e 69 6f 2f 64 65 73 69  |bernetes.io/desi|
              00000040  72 65 64 2d 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |red-replicas":{}|
              00000050  2c 22 66 3a 64 65 70 6c  6f 79 6d 65 6e 74 2e 6b  |,"f:deployment.k|
              00000060  75 62 65 72 6e 65 74 65  73 2e 69 6f 2f 6d 61 78  |ubernetes.io/max|
              00000070  2d 72 65 70 6c 69 63 61  73 22 3a 7b 7d 7d 2c 22  |-replicas":{}},"|
              00000080  66 3a 6f 77 6e 65 72 52  65 66 65 72 65 6e 63 65  |f:ownerReference|
              00000090  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 6b 3a 7b 5c  |s":{".":{},"k:{\|
              000000a0  22 75 69 64 5c 22 3a 5c  22 61 36 37 30 63 61 63  |"uid\":\"a670cac|
              000000b0  36 2d 64 31 64 61 2d 34  39 64 33 2d 39 36 30 32  |6-d1da-49d3-9602|
              000000c0  2d 30 37 31 36 38 37 62  63 31 39 32 62 5c 22 7d  |-071687bc192b\"}|
              000000d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000000e0  7b 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |{"f:replicas":{}|
              000000f0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=10) "sample-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=10) "sample-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 20 23:35:12.909: INFO: Pod "test-rolling-update-deployment-7f5c55c64-zb4fb" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=46) "test-rolling-update-deployment-7f5c55c64-zb4fb",
      GenerateName: (string) (len=41) "test-rolling-update-deployment-7f5c55c64-",
      Namespace: (string) (len=15) "deployment-9637",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e24c6a4e-b7af-4b7e-801c-87b9f4aa7b0e",
      ResourceVersion: (string) (len=5) "12008",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844068910,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=10) "sample-pod",
        (string) (len=17) "pod-template-hash": (string) (len=9) "7f5c55c64"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.167/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.167/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "c8bf993656c514a06ac8b9a7d28659b5ddac3bab46d12c7ce9f7cdc4cf5d6295"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=40) "test-rolling-update-deployment-7f5c55c64",
          UID: (types.UID) (len=36) "f68c41ca-0a5b-41d0-b69b-c2f1c2c26597",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 66 36  38 63 34 31 63 61 2d 30  |d\":\"f68c41ca-0|
              00000090  61 35 62 2d 34 31 64 30  2d 62 36 39 62 2d 63 32  |a5b-41d0-b69b-c2|
              000000a0  66 31 63 32 63 32 36 35  39 37 5c 22 7d 22 3a 7b  |f1c2c26597\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 36 37 5c 22 7d 22  |10.1.235.167\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-k9z8x",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-k9z8x",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068911,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068912,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844068910,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.167",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.167"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844068911,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844068912,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://45d18c1312eb204e31835aa953794faea85ea07adfb022431ae07a22dc56325b",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 20 23:35:12.909: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-9637" for this suite. @ 02/20/24 23:35:12.912
• [7.089 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Containers should use the image defaults if command and args are blank [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:41
  STEP: Creating a kubernetes client @ 02/20/24 23:35:12.925
  Feb 20 23:35:12.925: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename containers @ 02/20/24 23:35:12.926
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:12.947
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:12.949
  Feb 20 23:35:15.012: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-8128" for this suite. @ 02/20/24 23:35:15.016
• [2.102 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Update Demo should create and stop a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:341
  STEP: Creating a kubernetes client @ 02/20/24 23:35:15.028
  Feb 20 23:35:15.028: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:35:15.029
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:15.044
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:15.046
  STEP: creating a replication controller @ 02/20/24 23:35:15.047
  Feb 20 23:35:15.048: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 create -f -'
  Feb 20 23:35:15.396: INFO: stderr: ""
  Feb 20 23:35:15.396: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 02/20/24 23:35:15.396
  Feb 20 23:35:15.396: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:35:15.498: INFO: stderr: ""
  Feb 20 23:35:15.498: INFO: stdout: "update-demo-nautilus-n5kg7 "
  STEP: Replicas for name=update-demo: expected=2 actual=1 @ 02/20/24 23:35:15.498
  Feb 20 23:35:20.499: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:35:20.563: INFO: stderr: ""
  Feb 20 23:35:20.564: INFO: stdout: "update-demo-nautilus-n5kg7 update-demo-nautilus-q8pws "
  Feb 20 23:35:20.564: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-n5kg7 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:35:20.616: INFO: stderr: ""
  Feb 20 23:35:20.616: INFO: stdout: ""
  Feb 20 23:35:20.616: INFO: update-demo-nautilus-n5kg7 is created but not running
  Feb 20 23:35:25.616: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:35:25.707: INFO: stderr: ""
  Feb 20 23:35:25.707: INFO: stdout: "update-demo-nautilus-n5kg7 update-demo-nautilus-q8pws "
  Feb 20 23:35:25.707: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-n5kg7 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:35:25.776: INFO: stderr: ""
  Feb 20 23:35:25.776: INFO: stdout: ""
  Feb 20 23:35:25.776: INFO: update-demo-nautilus-n5kg7 is created but not running
  Feb 20 23:35:30.777: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:35:30.861: INFO: stderr: ""
  Feb 20 23:35:30.861: INFO: stdout: "update-demo-nautilus-q8pws update-demo-nautilus-n5kg7 "
  Feb 20 23:35:30.861: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-q8pws -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:35:30.908: INFO: stderr: ""
  Feb 20 23:35:30.908: INFO: stdout: "true"
  Feb 20 23:35:30.908: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-q8pws -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:35:30.952: INFO: stderr: ""
  Feb 20 23:35:30.952: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:35:30.952: INFO: validating pod update-demo-nautilus-q8pws
  Feb 20 23:35:30.955: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:35:30.955: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:35:30.955: INFO: update-demo-nautilus-q8pws is verified up and running
  Feb 20 23:35:30.955: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-n5kg7 -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:35:30.994: INFO: stderr: ""
  Feb 20 23:35:30.994: INFO: stdout: "true"
  Feb 20 23:35:30.994: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods update-demo-nautilus-n5kg7 -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:35:31.035: INFO: stderr: ""
  Feb 20 23:35:31.035: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:35:31.035: INFO: validating pod update-demo-nautilus-n5kg7
  Feb 20 23:35:31.038: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:35:31.038: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:35:31.038: INFO: update-demo-nautilus-n5kg7 is verified up and running
  STEP: using delete to clean up resources @ 02/20/24 23:35:31.038
  Feb 20 23:35:31.038: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 delete --grace-period=0 --force -f -'
  Feb 20 23:35:31.087: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:35:31.087: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Feb 20 23:35:31.087: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get rc,svc -l name=update-demo --no-headers'
  Feb 20 23:35:31.136: INFO: stderr: "No resources found in kubectl-3596 namespace.\n"
  Feb 20 23:35:31.136: INFO: stdout: ""
  Feb 20 23:35:31.136: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3596 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Feb 20 23:35:31.199: INFO: stderr: ""
  Feb 20 23:35:31.199: INFO: stdout: ""
  Feb 20 23:35:31.199: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3596" for this suite. @ 02/20/24 23:35:31.202
• [16.748 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:167
  STEP: Creating a kubernetes client @ 02/20/24 23:35:31.776
  Feb 20 23:35:31.776: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:35:31.785
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:32.152
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:32.16
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 02/20/24 23:35:32.169
  STEP: Saw pod success @ 02/20/24 23:35:36.24
  Feb 20 23:35:36.266: INFO: Trying to get logs from node control-plane pod pod-805c6bca-375d-4036-a206-adfe1f19f1e5 container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:35:36.27
  Feb 20 23:35:36.291: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5001" for this suite. @ 02/20/24 23:35:36.292
• [4.521 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete pods created by rc when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:321
  STEP: Creating a kubernetes client @ 02/20/24 23:35:36.299
  Feb 20 23:35:36.299: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/20/24 23:35:36.299
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:36.316
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:36.32
  STEP: create the rc @ 02/20/24 23:35:36.324
  W0220 23:35:36.333070      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 02/20/24 23:35:41.337
  STEP: wait for all pods to be garbage collected @ 02/20/24 23:35:41.347
  STEP: Gathering metrics @ 02/20/24 23:35:46.366
  W0220 23:35:46.378574      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 20 23:35:46.378: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 20 23:35:46.378: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-5118" for this suite. @ 02/20/24 23:35:46.387
• [10.106 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny pod and configmap creation [Conformance]
test/e2e/apimachinery/webhook.go:199
  STEP: Creating a kubernetes client @ 02/20/24 23:35:46.407
  Feb 20 23:35:46.408: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:35:46.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:35:46.435
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:35:46.437
  STEP: Setting up server cert @ 02/20/24 23:35:46.465
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:35:46.751
  STEP: Deploying the webhook pod @ 02/20/24 23:35:46.758
  STEP: Wait for the deployment to be ready @ 02/20/24 23:35:46.771
  Feb 20 23:35:46.774: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  Feb 20 23:35:48.803: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 20, 23, 35, 46, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 35, 46, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 35, 46, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 35, 46, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  STEP: Deploying the webhook service @ 02/20/24 23:35:50.811
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:35:50.912
  Feb 20 23:35:51.913: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 02/20/24 23:35:51.928
  STEP: create a pod that should be denied by the webhook @ 02/20/24 23:35:51.957
  STEP: create a pod that causes the webhook to hang @ 02/20/24 23:35:51.967
  STEP: create a configmap that should be denied by the webhook @ 02/20/24 23:36:01.977
  STEP: create a configmap that should be admitted by the webhook @ 02/20/24 23:36:02.005
  STEP: update (PUT) the admitted configmap to a non-compliant one should be rejected by the webhook @ 02/20/24 23:36:02.034
  STEP: update (PATCH) the admitted configmap to a non-compliant one should be rejected by the webhook @ 02/20/24 23:36:02.044
  STEP: create a namespace that bypass the webhook @ 02/20/24 23:36:02.051
  STEP: create a configmap that violates the webhook policy but is in a whitelisted namespace @ 02/20/24 23:36:02.078
  Feb 20 23:36:02.096: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-9659" for this suite. @ 02/20/24 23:36:02.153
  STEP: Destroying namespace "webhook-markers-7653" for this suite. @ 02/20/24 23:36:02.163
  STEP: Destroying namespace "exempted-namespace-3548" for this suite. @ 02/20/24 23:36:02.17
• [15.770 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] patching/updating a mutating webhook should work [Conformance]
test/e2e/apimachinery/webhook.go:498
  STEP: Creating a kubernetes client @ 02/20/24 23:36:02.178
  Feb 20 23:36:02.178: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:36:02.178
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:36:02.192
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:36:02.194
  STEP: Setting up server cert @ 02/20/24 23:36:02.218
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:36:02.404
  STEP: Deploying the webhook pod @ 02/20/24 23:36:02.411
  STEP: Wait for the deployment to be ready @ 02/20/24 23:36:02.426
  Feb 20 23:36:02.429: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:36:04.449
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:36:04.48
  Feb 20 23:36:05.480: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Creating a mutating webhook configuration @ 02/20/24 23:36:05.486
  STEP: Updating a mutating webhook configuration's rules to not include the create operation @ 02/20/24 23:36:05.528
  STEP: Creating a configMap that should not be mutated @ 02/20/24 23:36:05.535
  STEP: Patching a mutating webhook configuration's rules to include the create operation @ 02/20/24 23:36:05.547
  STEP: Creating a configMap that should be mutated @ 02/20/24 23:36:05.553
  Feb 20 23:36:05.576: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-471" for this suite. @ 02/20/24 23:36:05.618
  STEP: Destroying namespace "webhook-markers-428" for this suite. @ 02/20/24 23:36:05.628
• [3.460 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should perform rolling updates and roll backs of template modifications [Conformance]
test/e2e/apps/statefulset.go:320
  STEP: Creating a kubernetes client @ 02/20/24 23:36:05.638
  Feb 20 23:36:05.638: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/20/24 23:36:05.639
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:36:05.653
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:36:05.655
  STEP: Creating service test in namespace statefulset-7755 @ 02/20/24 23:36:05.659
  STEP: Creating a new StatefulSet @ 02/20/24 23:36:05.666
  Feb 20 23:36:05.681: INFO: Found 0 stateful pods, waiting for 3
  Feb 20 23:36:15.685: INFO: Waiting for pod ss2-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:36:15.685: INFO: Waiting for pod ss2-1 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:36:15.685: INFO: Waiting for pod ss2-2 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:36:15.692: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7755 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:36:15.765: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:36:15.765: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:36:15.765: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  STEP: Updating StatefulSet template: update image from registry.k8s.io/e2e-test-images/httpd:2.4.38-4 to registry.k8s.io/e2e-test-images/httpd:2.4.39-4 @ 02/20/24 23:36:25.774
  Feb 20 23:36:25.794: INFO: Updating stateful set ss2
  STEP: Creating a new revision @ 02/20/24 23:36:25.794
  STEP: Updating Pods in reverse ordinal order @ 02/20/24 23:36:35.819
  Feb 20 23:36:35.827: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7755 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:36:35.967: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:36:35.967: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:36:35.967: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:36:46.015: INFO: Waiting for StatefulSet statefulset-7755/ss2 to complete update
  STEP: Rolling back to a previous revision @ 02/20/24 23:36:56.034
  Feb 20 23:36:56.034: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7755 exec ss2-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:36:56.185: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:36:56.185: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:36:56.185: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss2-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:37:06.253: INFO: Updating stateful set ss2
  STEP: Rolling back update in reverse ordinal order @ 02/20/24 23:37:16.288
  Feb 20 23:37:16.297: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7755 exec ss2-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:37:16.404: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:37:16.404: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:37:16.404: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss2-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:37:26.443: INFO: Deleting all statefulset in ns statefulset-7755
  Feb 20 23:37:26.450: INFO: Scaling statefulset ss2 to 0
  Feb 20 23:37:36.490: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:37:36.498: INFO: Deleting statefulset ss2
  Feb 20 23:37:36.544: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-7755" for this suite. @ 02/20/24 23:37:36.553
• [90.931 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet Replace and Patch tests [Conformance]
test/e2e/apps/replica_set.go:154
  STEP: Creating a kubernetes client @ 02/20/24 23:37:36.57
  Feb 20 23:37:36.570: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/20/24 23:37:36.571
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:36.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:36.6
  Feb 20 23:37:36.609: INFO: Pod name sample-pod: Found 0 pods out of 1
  Feb 20 23:37:41.634: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/20/24 23:37:41.634
  STEP: Scaling up "test-rs" replicaset  @ 02/20/24 23:37:41.634
  Feb 20 23:37:41.649: INFO: Updating replica set "test-rs"
  STEP: patching the ReplicaSet @ 02/20/24 23:37:41.65
  Feb 20 23:37:41.658: INFO: observed ReplicaSet test-rs in namespace replicaset-9035 with ReadyReplicas 1, AvailableReplicas 1
  Feb 20 23:37:41.678: INFO: observed ReplicaSet test-rs in namespace replicaset-9035 with ReadyReplicas 1, AvailableReplicas 1
  Feb 20 23:37:41.709: INFO: observed ReplicaSet test-rs in namespace replicaset-9035 with ReadyReplicas 1, AvailableReplicas 1
  Feb 20 23:37:41.719: INFO: observed ReplicaSet test-rs in namespace replicaset-9035 with ReadyReplicas 1, AvailableReplicas 1
  Feb 20 23:37:43.233: INFO: observed ReplicaSet test-rs in namespace replicaset-9035 with ReadyReplicas 2, AvailableReplicas 2
  Feb 20 23:37:43.279: INFO: observed Replicaset test-rs in namespace replicaset-9035 with ReadyReplicas 3 found true
  Feb 20 23:37:43.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-9035" for this suite. @ 02/20/24 23:37:43.281
• [6.719 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should receive events on concurrent watches in same order [Conformance]
test/e2e/apimachinery/watch.go:334
  STEP: Creating a kubernetes client @ 02/20/24 23:37:43.29
  Feb 20 23:37:43.290: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename watch @ 02/20/24 23:37:43.29
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:43.304
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:43.306
  STEP: getting a starting resourceVersion @ 02/20/24 23:37:43.308
  STEP: starting a background goroutine to produce watch events @ 02/20/24 23:37:43.309
  STEP: creating watches starting from each resource version of the events produced and verifying they all receive resource versions in the same order @ 02/20/24 23:37:43.309
  Feb 20 23:37:46.308: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-2196" for this suite. @ 02/20/24 23:37:46.345
• [3.121 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Security Context When creating a container with runAsUser should run the container with uid 65534 [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:347
  STEP: Creating a kubernetes client @ 02/20/24 23:37:46.413
  Feb 20 23:37:46.413: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context-test @ 02/20/24 23:37:46.415
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:46.463
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:46.469
  Feb 20 23:37:50.504: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-2947" for this suite. @ 02/20/24 23:37:50.512
• [4.118 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Downward API volume should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:131
  STEP: Creating a kubernetes client @ 02/20/24 23:37:50.53
  Feb 20 23:37:50.530: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:37:50.532
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:50.557
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:50.559
  STEP: Creating the pod @ 02/20/24 23:37:50.561
  Feb 20 23:37:53.150: INFO: Successfully updated pod "labelsupdate91970ab3-27ca-4ce3-b9c6-3206c5037ba9"
  Feb 20 23:37:55.181: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3347" for this suite. @ 02/20/24 23:37:55.189
• [4.681 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from file when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:248
  STEP: Creating a kubernetes client @ 02/20/24 23:37:55.213
  Feb 20 23:37:55.214: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-runtime @ 02/20/24 23:37:55.216
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:55.26
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:55.262
  STEP: create the container @ 02/20/24 23:37:55.264
  W0220 23:37:55.273711      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 02/20/24 23:37:55.273
  STEP: get the container status @ 02/20/24 23:37:59.308
  STEP: the container should be terminated @ 02/20/24 23:37:59.311
  STEP: the termination message should be set @ 02/20/24 23:37:59.311
  Feb 20 23:37:59.311: INFO: Expected: &{OK} to match Container's Termination Message: OK --
  STEP: delete the container @ 02/20/24 23:37:59.311
  Feb 20 23:37:59.329: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-6463" for this suite. @ 02/20/24 23:37:59.344
• [4.144 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Guestbook application should create and stop a working application  [Conformance]
test/e2e/kubectl/kubectl.go:396
  STEP: Creating a kubernetes client @ 02/20/24 23:37:59.359
  Feb 20 23:37:59.359: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:37:59.36
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:37:59.378
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:37:59.38
  STEP: creating all guestbook components @ 02/20/24 23:37:59.382
  Feb 20 23:37:59.382: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-replica
    labels:
      app: agnhost
      role: replica
      tier: backend
  spec:
    ports:
    - port: 6379
    selector:
      app: agnhost
      role: replica
      tier: backend

  Feb 20 23:37:59.382: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:37:59.708: INFO: stderr: ""
  Feb 20 23:37:59.708: INFO: stdout: "service/agnhost-replica created\n"
  Feb 20 23:37:59.708: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: agnhost-primary
    labels:
      app: agnhost
      role: primary
      tier: backend
  spec:
    ports:
    - port: 6379
      targetPort: 6379
    selector:
      app: agnhost
      role: primary
      tier: backend

  Feb 20 23:37:59.708: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:37:59.950: INFO: stderr: ""
  Feb 20 23:37:59.950: INFO: stdout: "service/agnhost-primary created\n"
  Feb 20 23:37:59.950: INFO: apiVersion: v1
  kind: Service
  metadata:
    name: frontend
    labels:
      app: guestbook
      tier: frontend
  spec:
    # if your cluster supports it, uncomment the following to automatically create
    # an external load-balanced IP for the frontend service.
    # type: LoadBalancer
    ports:
    - port: 80
    selector:
      app: guestbook
      tier: frontend

  Feb 20 23:37:59.950: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:38:00.146: INFO: stderr: ""
  Feb 20 23:38:00.146: INFO: stdout: "service/frontend created\n"
  Feb 20 23:38:00.147: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: frontend
  spec:
    replicas: 3
    selector:
      matchLabels:
        app: guestbook
        tier: frontend
    template:
      metadata:
        labels:
          app: guestbook
          tier: frontend
      spec:
        containers:
        - name: guestbook-frontend
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--backend-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 80

  Feb 20 23:38:00.147: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:38:00.291: INFO: stderr: ""
  Feb 20 23:38:00.291: INFO: stdout: "deployment.apps/frontend created\n"
  Feb 20 23:38:00.291: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-primary
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: agnhost
        role: primary
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: primary
          tier: backend
      spec:
        containers:
        - name: primary
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Feb 20 23:38:00.292: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:38:00.430: INFO: stderr: ""
  Feb 20 23:38:00.430: INFO: stdout: "deployment.apps/agnhost-primary created\n"
  Feb 20 23:38:00.430: INFO: apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: agnhost-replica
  spec:
    replicas: 2
    selector:
      matchLabels:
        app: agnhost
        role: replica
        tier: backend
    template:
      metadata:
        labels:
          app: agnhost
          role: replica
          tier: backend
      spec:
        containers:
        - name: replica
          image: registry.k8s.io/e2e-test-images/agnhost:2.45
          args: [ "guestbook", "--replicaof", "agnhost-primary", "--http-port", "6379" ]
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
          - containerPort: 6379

  Feb 20 23:38:00.430: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 create -f -'
  Feb 20 23:38:00.564: INFO: stderr: ""
  Feb 20 23:38:00.564: INFO: stdout: "deployment.apps/agnhost-replica created\n"
  STEP: validating guestbook app @ 02/20/24 23:38:00.564
  Feb 20 23:38:00.564: INFO: Waiting for all frontend pods to be Running.
  Feb 20 23:38:05.615: INFO: Waiting for frontend to serve content.
  Feb 20 23:38:05.634: INFO: Trying to add a new entry to the guestbook.
  Feb 20 23:38:05.643: INFO: Verifying that added entry can be retrieved.
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.647
  Feb 20 23:38:05.647: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:05.739: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:05.739: INFO: stdout: "service \"agnhost-replica\" force deleted\n"
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.739
  Feb 20 23:38:05.739: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:05.803: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:05.803: INFO: stdout: "service \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.803
  Feb 20 23:38:05.803: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:05.880: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:05.880: INFO: stdout: "service \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.88
  Feb 20 23:38:05.880: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:05.930: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:05.930: INFO: stdout: "deployment.apps \"frontend\" force deleted\n"
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.93
  Feb 20 23:38:05.930: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:05.977: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:05.977: INFO: stdout: "deployment.apps \"agnhost-primary\" force deleted\n"
  STEP: using delete to clean up resources @ 02/20/24 23:38:05.977
  Feb 20 23:38:05.977: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2993 delete --grace-period=0 --force -f -'
  Feb 20 23:38:06.073: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:38:06.073: INFO: stdout: "deployment.apps \"agnhost-replica\" force deleted\n"
  Feb 20 23:38:06.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2993" for this suite. @ 02/20/24 23:38:06.076
• [6.728 seconds]
------------------------------
[sig-storage] Downward API volume should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:208
  STEP: Creating a kubernetes client @ 02/20/24 23:38:06.087
  Feb 20 23:38:06.088: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:38:06.088
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:06.114
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:06.116
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:38:06.118
  STEP: Saw pod success @ 02/20/24 23:38:10.144
  Feb 20 23:38:10.151: INFO: Trying to get logs from node control-plane pod downwardapi-volume-6f7ffec3-8f99-48ae-a078-524dbfbaf0b1 container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:38:10.167
  Feb 20 23:38:10.215: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7417" for this suite. @ 02/20/24 23:38:10.22
• [4.141 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] KubeletManagedEtcHosts should test kubelet managed /etc/hosts file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/kubelet_etc_hosts.go:64
  STEP: Creating a kubernetes client @ 02/20/24 23:38:10.229
  Feb 20 23:38:10.229: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename e2e-kubelet-etc-hosts @ 02/20/24 23:38:10.229
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:10.244
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:10.247
  STEP: Setting up the test @ 02/20/24 23:38:10.249
  STEP: Creating hostNetwork=false pod @ 02/20/24 23:38:10.249
  STEP: Creating hostNetwork=true pod @ 02/20/24 23:38:14.275
  STEP: Running the test @ 02/20/24 23:38:16.3
  STEP: Verifying /etc/hosts of container is kubelet-managed for pod with hostNetwork=false @ 02/20/24 23:38:16.3
  Feb 20 23:38:16.300: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.300: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.300: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.300: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Feb 20 23:38:16.338: INFO: Exec stderr: ""
  Feb 20 23:38:16.338: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.338: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.338: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.338: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Feb 20 23:38:16.370: INFO: Exec stderr: ""
  Feb 20 23:38:16.370: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.370: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.371: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.371: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Feb 20 23:38:16.400: INFO: Exec stderr: ""
  Feb 20 23:38:16.400: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.400: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.400: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.401: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Feb 20 23:38:16.431: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts of container is not kubelet-managed since container specifies /etc/hosts mount @ 02/20/24 23:38:16.431
  Feb 20 23:38:16.431: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.431: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.431: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.431: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Feb 20 23:38:16.461: INFO: Exec stderr: ""
  Feb 20 23:38:16.461: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-pod ContainerName:busybox-3 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.461: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.461: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.461: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-3&container=busybox-3&stderr=true&stdout=true)
  Feb 20 23:38:16.491: INFO: Exec stderr: ""
  STEP: Verifying /etc/hosts content of container is not kubelet-managed for pod with hostNetwork=true @ 02/20/24 23:38:16.491
  Feb 20 23:38:16.491: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.491: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.492: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.492: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Feb 20 23:38:16.523: INFO: Exec stderr: ""
  Feb 20 23:38:16.523: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-host-network-pod ContainerName:busybox-1 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.523: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.524: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.524: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-1&container=busybox-1&stderr=true&stdout=true)
  Feb 20 23:38:16.554: INFO: Exec stderr: ""
  Feb 20 23:38:16.554: INFO: ExecWithOptions {Command:[cat /etc/hosts] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.554: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.554: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.554: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Feb 20 23:38:16.580: INFO: Exec stderr: ""
  Feb 20 23:38:16.580: INFO: ExecWithOptions {Command:[cat /etc/hosts-original] Namespace:e2e-kubelet-etc-hosts-7303 PodName:test-host-network-pod ContainerName:busybox-2 Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:38:16.580: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:38:16.581: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:38:16.581: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/e2e-kubelet-etc-hosts-7303/pods/test-host-network-pod/exec?command=cat&command=%2Fetc%2Fhosts-original&container=busybox-2&container=busybox-2&stderr=true&stdout=true)
  Feb 20 23:38:16.611: INFO: Exec stderr: ""
  Feb 20 23:38:16.612: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "e2e-kubelet-etc-hosts-7303" for this suite. @ 02/20/24 23:38:16.614
• [6.391 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:74
  STEP: Creating a kubernetes client @ 02/20/24 23:38:16.62
  Feb 20 23:38:16.620: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:38:16.62
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:16.637
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:16.638
  STEP: Creating configMap with name projected-configmap-test-volume-994df605-9523-433c-a080-872676d027f4 @ 02/20/24 23:38:16.639
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:38:16.644
  STEP: Saw pod success @ 02/20/24 23:38:20.667
  Feb 20 23:38:20.669: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-7e6c0d03-a0c1-44ca-93dc-e178971e7d5b container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:38:20.677
  Feb 20 23:38:20.708: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-2813" for this suite. @ 02/20/24 23:38:20.713
• [4.103 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:197
  STEP: Creating a kubernetes client @ 02/20/24 23:38:20.725
  Feb 20 23:38:20.725: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:38:20.727
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:20.753
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:20.757
  STEP: Creating a pod to test emptydir 0644 on node default medium @ 02/20/24 23:38:20.76
  STEP: Saw pod success @ 02/20/24 23:38:24.791
  Feb 20 23:38:24.798: INFO: Trying to get logs from node control-plane pod pod-e50b21ae-3fe4-4536-8763-54a070ff06ea container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:38:24.816
  Feb 20 23:38:24.847: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8757" for this suite. @ 02/20/24 23:38:24.85
• [4.132 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should be able to deny attaching pod [Conformance]
test/e2e/apimachinery/webhook.go:210
  STEP: Creating a kubernetes client @ 02/20/24 23:38:24.858
  Feb 20 23:38:24.858: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:38:24.859
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:24.872
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:24.874
  STEP: Setting up server cert @ 02/20/24 23:38:24.9
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:38:25.18
  STEP: Deploying the webhook pod @ 02/20/24 23:38:25.187
  STEP: Wait for the deployment to be ready @ 02/20/24 23:38:25.199
  Feb 20 23:38:25.202: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:38:27.224
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:38:27.255
  Feb 20 23:38:28.256: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the webhook via the AdmissionRegistration API @ 02/20/24 23:38:28.268
  STEP: create a pod @ 02/20/24 23:38:28.315
  STEP: 'kubectl attach' the pod, should be denied by the webhook @ 02/20/24 23:38:30.343
  Feb 20 23:38:30.344: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=webhook-398 attach --namespace=webhook-398 to-be-attached-pod -i -c=container1'
  Feb 20 23:38:30.428: INFO: rc: 1
  Feb 20 23:38:30.428: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-398" for this suite. @ 02/20/24 23:38:30.482
  STEP: Destroying namespace "webhook-markers-5342" for this suite. @ 02/20/24 23:38:30.49
• [5.640 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] Servers with support for Table transformation should return a 406 for a backend which does not implement metadata [Conformance]
test/e2e/apimachinery/table_conversion.go:154
  STEP: Creating a kubernetes client @ 02/20/24 23:38:30.498
  Feb 20 23:38:30.498: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename tables @ 02/20/24 23:38:30.498
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:30.517
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:30.518
  Feb 20 23:38:30.520: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "tables-2117" for this suite. @ 02/20/24 23:38:30.522
• [0.029 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] Secrets optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:205
  STEP: Creating a kubernetes client @ 02/20/24 23:38:30.527
  Feb 20 23:38:30.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:38:30.528
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:30.547
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:30.548
  STEP: Creating secret with name s-test-opt-del-dec16de6-4675-498b-b6d0-d61db62b6207 @ 02/20/24 23:38:30.551
  STEP: Creating secret with name s-test-opt-upd-9427b24e-51bc-40cb-87f1-dede4a3202b9 @ 02/20/24 23:38:30.555
  STEP: Creating the pod @ 02/20/24 23:38:30.56
  STEP: Deleting secret s-test-opt-del-dec16de6-4675-498b-b6d0-d61db62b6207 @ 02/20/24 23:38:32.618
  STEP: Updating secret s-test-opt-upd-9427b24e-51bc-40cb-87f1-dede4a3202b9 @ 02/20/24 23:38:32.626
  STEP: Creating secret with name s-test-opt-create-52c1f9c1-054c-44df-9a93-a48035a44b6f @ 02/20/24 23:38:32.632
  STEP: waiting to observe update in volume @ 02/20/24 23:38:32.637
  Feb 20 23:38:34.687: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-3480" for this suite. @ 02/20/24 23:38:34.696
• [4.184 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Watchers should observe an object deletion if it stops meeting the requirements of the selector [Conformance]
test/e2e/apimachinery/watch.go:257
  STEP: Creating a kubernetes client @ 02/20/24 23:38:34.712
  Feb 20 23:38:34.712: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename watch @ 02/20/24 23:38:34.713
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:34.757
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:34.763
  STEP: creating a watch on configmaps with a certain label @ 02/20/24 23:38:34.768
  STEP: creating a new configmap @ 02/20/24 23:38:34.77
  STEP: modifying the configmap once @ 02/20/24 23:38:34.778
  STEP: changing the label value of the configmap @ 02/20/24 23:38:34.788
  STEP: Expecting to observe a delete notification for the watched object @ 02/20/24 23:38:34.798
  Feb 20 23:38:34.798: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14037 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:34 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:38:34.798: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14038 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:34 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:38:34.798: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14039 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:34 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time @ 02/20/24 23:38:34.799
  STEP: Expecting not to observe a notification because the object no longer meets the selector's requirements @ 02/20/24 23:38:34.81
  STEP: changing the label value of the configmap back @ 02/20/24 23:38:44.815
  STEP: modifying the configmap a third time @ 02/20/24 23:38:44.841
  STEP: deleting the configmap @ 02/20/24 23:38:44.862
  STEP: Expecting to observe an add notification for the watched object when the label value was restored @ 02/20/24 23:38:44.879
  Feb 20 23:38:44.879: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14113 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:44 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:38:44.880: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14114 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:44 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:38:44.880: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-label-changed  watch-3847  2be5ed86-cf57-4a4e-bea3-d5b5bd8f6d09 14115 0 2024-02-20 23:38:34 +0000 UTC <nil> <nil> map[watch-this-configmap:label-changed-and-restored] map[] [] [] [{e2e.test Update v1 2024-02-20 23:38:44 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 3,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:38:44.880: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-3847" for this suite. @ 02/20/24 23:38:44.889
• [10.196 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with downward pod [Conformance]
test/e2e/storage/subpath.go:91
  STEP: Creating a kubernetes client @ 02/20/24 23:38:44.91
  Feb 20 23:38:44.910: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subpath @ 02/20/24 23:38:44.912
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:38:44.947
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:38:44.95
  STEP: Setting up data @ 02/20/24 23:38:44.952
  STEP: Creating pod pod-subpath-test-downwardapi-c7k8 @ 02/20/24 23:38:44.967
  STEP: Creating a pod to test atomic-volume-subpath @ 02/20/24 23:38:44.967
  STEP: Saw pod success @ 02/20/24 23:39:09.089
  Feb 20 23:39:09.096: INFO: Trying to get logs from node control-plane pod pod-subpath-test-downwardapi-c7k8 container test-container-subpath-downwardapi-c7k8: <nil>
  STEP: delete the pod @ 02/20/24 23:39:09.112
  STEP: Deleting pod pod-subpath-test-downwardapi-c7k8 @ 02/20/24 23:39:09.162
  Feb 20 23:39:09.162: INFO: Deleting pod "pod-subpath-test-downwardapi-c7k8" in namespace "subpath-7950"
  Feb 20 23:39:09.169: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-7950" for this suite. @ 02/20/24 23:39:09.174
• [24.274 seconds]
------------------------------
SS
------------------------------
[sig-apps] Job should adopt matching orphans and release non-matching pods [Conformance]
test/e2e/apps/job.go:513
  STEP: Creating a kubernetes client @ 02/20/24 23:39:09.185
  Feb 20 23:39:09.185: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/20/24 23:39:09.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:09.207
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:09.209
  STEP: Creating a job @ 02/20/24 23:39:09.211
  STEP: Ensuring active pods == parallelism @ 02/20/24 23:39:09.222
  STEP: Orphaning one of the Job's Pods @ 02/20/24 23:39:11.227
  Feb 20 23:39:11.763: INFO: Successfully updated pod "adopt-release-z5hf4"
  STEP: Checking that the Job readopts the Pod @ 02/20/24 23:39:11.763
  STEP: Removing the labels from the Job's Pod @ 02/20/24 23:39:13.782
  Feb 20 23:39:14.292: INFO: Successfully updated pod "adopt-release-z5hf4"
  STEP: Checking that the Job releases the Pod @ 02/20/24 23:39:14.292
  Feb 20 23:39:16.298: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-1192" for this suite. @ 02/20/24 23:39:16.301
• [7.123 seconds]
------------------------------
[sig-api-machinery] Namespaces [Serial] should ensure that all pods are removed when a namespace is deleted [Conformance]
test/e2e/apimachinery/namespace.go:243
  STEP: Creating a kubernetes client @ 02/20/24 23:39:16.308
  Feb 20 23:39:16.308: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/20/24 23:39:16.31
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:16.323
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:16.325
  STEP: Creating a test namespace @ 02/20/24 23:39:16.327
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:16.343
  STEP: Creating a pod in the namespace @ 02/20/24 23:39:16.345
  STEP: Waiting for the pod to have running status @ 02/20/24 23:39:16.353
  STEP: Deleting the namespace @ 02/20/24 23:39:20.37
  STEP: Waiting for the namespace to be removed. @ 02/20/24 23:39:20.392
  STEP: Recreating the namespace @ 02/20/24 23:39:31.398
  STEP: Verifying there are no pods in the namespace @ 02/20/24 23:39:31.448
  Feb 20 23:39:31.454: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-8502" for this suite. @ 02/20/24 23:39:31.462
  STEP: Destroying namespace "nsdeletetest-1658" for this suite. @ 02/20/24 23:39:31.477
  Feb 20 23:39:31.484: INFO: Namespace nsdeletetest-1658 was already deleted
  STEP: Destroying namespace "nsdeletetest-8103" for this suite. @ 02/20/24 23:39:31.484
• [15.190 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-architecture] Conformance Tests should have at least two untainted nodes [Conformance]
test/e2e/architecture/conformance.go:39
  STEP: Creating a kubernetes client @ 02/20/24 23:39:31.5
  Feb 20 23:39:31.500: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename conformance-tests @ 02/20/24 23:39:31.501
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:31.522
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:31.524
  STEP: Getting node addresses @ 02/20/24 23:39:31.525
  Feb 20 23:39:31.525: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  Feb 20 23:39:31.528: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "conformance-tests-3654" for this suite. @ 02/20/24 23:39:31.53
• [0.036 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should validate Deployment Status endpoints [Conformance]
test/e2e/apps/deployment.go:488
  STEP: Creating a kubernetes client @ 02/20/24 23:39:31.539
  Feb 20 23:39:31.540: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/20/24 23:39:31.54
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:31.557
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:31.559
  STEP: creating a Deployment @ 02/20/24 23:39:31.562
  Feb 20 23:39:31.562: INFO: Creating simple deployment test-deployment-r5x6k
  Feb 20 23:39:31.571: INFO: new replicaset for deployment "test-deployment-r5x6k" is yet to be created
  STEP: Getting /status @ 02/20/24 23:39:33.598
  Feb 20 23:39:33.607: INFO: Deployment test-deployment-r5x6k has Conditions: [{Available True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:32 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.} {Progressing True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-r5x6k-5d576bd769" has successfully progressed.}]
  STEP: updating Deployment Status @ 02/20/24 23:39:33.607
  Feb 20 23:39:33.624: INFO: updatedStatus.Conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 39, 32, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 39, 32, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 20, 23, 39, 32, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 20, 23, 39, 31, 0, time.Local), Reason:"NewReplicaSetAvailable", Message:"ReplicaSet \"test-deployment-r5x6k-5d576bd769\" has successfully progressed."}, v1.DeploymentCondition{Type:"StatusUpdate", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the Deployment status to be updated @ 02/20/24 23:39:33.624
  Feb 20 23:39:33.626: INFO: Observed &Deployment event: ADDED
  Feb 20 23:39:33.626: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-r5x6k-5d576bd769"}
  Feb 20 23:39:33.626: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.626: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-r5x6k-5d576bd769"}
  Feb 20 23:39:33.626: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Feb 20 23:39:33.626: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.626: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Feb 20 23:39:33.626: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-r5x6k-5d576bd769" is progressing.}
  Feb 20 23:39:33.627: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.627: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:32 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Feb 20 23:39:33.627: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-r5x6k-5d576bd769" has successfully progressed.}
  Feb 20 23:39:33.627: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.627: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:32 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Feb 20 23:39:33.627: INFO: Observed Deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-r5x6k-5d576bd769" has successfully progressed.}
  Feb 20 23:39:33.627: INFO: Found Deployment test-deployment-r5x6k in namespace deployment-1589 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 20 23:39:33.627: INFO: Deployment test-deployment-r5x6k has an updated status
  STEP: patching the Statefulset Status @ 02/20/24 23:39:33.627
  Feb 20 23:39:33.627: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Feb 20 23:39:33.636: INFO: Patched status conditions: []v1.DeploymentCondition{v1.DeploymentCondition{Type:"StatusPatched", Status:"True", LastUpdateTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Deployment status to be patched @ 02/20/24 23:39:33.636
  Feb 20 23:39:33.638: INFO: Observed &Deployment event: ADDED
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-r5x6k-5d576bd769"}
  Feb 20 23:39:33.638: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetCreated Created new replica set "test-deployment-r5x6k-5d576bd769"}
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Feb 20 23:39:33.638: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available False 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC MinimumReplicasUnavailable Deployment does not have minimum availability.}
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:31 +0000 UTC 2024-02-20 23:39:31 +0000 UTC ReplicaSetUpdated ReplicaSet "test-deployment-r5x6k-5d576bd769" is progressing.}
  Feb 20 23:39:33.638: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:32 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-r5x6k-5d576bd769" has successfully progressed.}
  Feb 20 23:39:33.638: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Available True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:32 +0000 UTC MinimumReplicasAvailable Deployment has minimum availability.}
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {Progressing True 2024-02-20 23:39:32 +0000 UTC 2024-02-20 23:39:31 +0000 UTC NewReplicaSetAvailable ReplicaSet "test-deployment-r5x6k-5d576bd769" has successfully progressed.}
  Feb 20 23:39:33.638: INFO: Observed deployment test-deployment-r5x6k in namespace deployment-1589 with annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 20 23:39:33.639: INFO: Observed &Deployment event: MODIFIED
  Feb 20 23:39:33.639: INFO: Found deployment test-deployment-r5x6k in namespace deployment-1589 with labels: map[e2e:testing name:httpd] annotations: map[deployment.kubernetes.io/revision:1] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC 0001-01-01 00:00:00 +0000 UTC  }
  Feb 20 23:39:33.639: INFO: Deployment test-deployment-r5x6k has a patched status
  Feb 20 23:39:33.641: INFO: Deployment "test-deployment-r5x6k":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=21) "test-deployment-r5x6k",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1589",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "41e76cdf-d0d1-40f8-812c-c1d2710e1ccb",
      ResourceVersion: (string) (len=5) "14380",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844069171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=657) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              00000030  6e 61 6d 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |name":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  70 72 6f 67 72 65 73 73  |ec":{"f:progress|
              00000050  44 65 61 64 6c 69 6e 65  53 65 63 6f 6e 64 73 22  |DeadlineSeconds"|
              00000060  3a 7b 7d 2c 22 66 3a 72  65 70 6c 69 63 61 73 22  |:{},"f:replicas"|
              00000070  3a 7b 7d 2c 22 66 3a 72  65 76 69 73 69 6f 6e 48  |:{},"f:revisionH|
              00000080  69 73 74 6f 72 79 4c 69  6d 69 74 22 3a 7b 7d 2c  |istoryLimit":{},|
              00000090  22 66 3a 73 65 6c 65 63  74 6f 72 22 3a 7b 7d 2c  |"f:selector":{},|
              000000a0  22 66 3a 73 74 72 61 74  65 67 79 22 3a 7b 22 66  |"f:strategy":{"f|
              000000b0  3a 72 6f 6c 6c 69 6e 67  55 70 64 61 74 65 22 3a  |:rollingUpdate":|
              000000c0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6d 61 78 53 75  |{".":{},"f:maxSu|
              000000d0  72 67 65 22 3a 7b 7d 2c  22 66 3a 6d 61 78 55 6e  |rge":{},"f:maxUn|
              000000e0  61 76 61 69 6c 61 62 6c  65 22 3a 7b 7d 7d 2c 22  |available":{}},"|
              000000f0  66 3a 74 79 70 65 22 3a  7b 7d 7d 2c 22 66 3a 74  |f:type":{}},"f:t|
              00000100  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000110  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              00000120  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 65 32  |s":{".":{},"f:e2|
              00000130  65 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |e":{},"f:name":{|
              00000140  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              00000150  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000160  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              00000170  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              00000180  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000190  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              000001a0  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              000001b0  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              000001c0  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              000001d0  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              000001e0  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000210  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000220  69 63 79 22 3a 7b 7d 2c  22 66 3a 72 65 73 74 61  |icy":{},"f:resta|
              00000230  72 74 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |rtPolicy":{},"f:|
              00000240  73 63 68 65 64 75 6c 65  72 4e 61 6d 65 22 3a 7b  |schedulerName":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 47  72 61 63 65 50 65 72 69  |inationGracePeri|
              00000280  6f 64 53 65 63 6f 6e 64  73 22 3a 7b 7d 7d 7d 7d  |odSeconds":{}}}}|
              00000290  7d                                                |}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=224) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |ions":{},"f:obse|
              00000090  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              000000a0  7b 7d 2c 22 66 3a 72 65  61 64 79 52 65 70 6c 69  |{},"f:readyRepli|
              000000b0  63 61 73 22 3a 7b 7d 2c  22 66 3a 72 65 70 6c 69  |cas":{},"f:repli|
              000000c0  63 61 73 22 3a 7b 7d 2c  22 66 3a 75 70 64 61 74  |cas":{},"f:updat|
              000000d0  65 64 52 65 70 6c 69 63  61 73 22 3a 7b 7d 7d 7d  |edReplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069173,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=147) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 53 74 61 74  |{\"type\":\"Stat|
              00000030  75 73 50 61 74 63 68 65  64 5c 22 7d 22 3a 7b 22  |usPatched\"}":{"|
              00000040  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |.":{},"f:lastTra|
              00000050  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000060  22 66 3a 6c 61 73 74 55  70 64 61 74 65 54 69 6d  |"f:lastUpdateTim|
              00000070  65 22 3a 7b 7d 2c 22 66  3a 73 74 61 74 75 73 22  |e":{},"f:status"|
              00000080  3a 7b 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |:{},"f:type":{}}|
              00000090  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=1) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=13) "StatusPatched",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 20 23:39:33.644: INFO: New ReplicaSet "test-deployment-r5x6k-5d576bd769" of Deployment "test-deployment-r5x6k":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-r5x6k-5d576bd769",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-1589",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "746f30da-2e69-4edf-88f5-9123d0df0639",
      ResourceVersion: (string) (len=5) "14374",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844069171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769",
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=21) "test-deployment-r5x6k",
          UID: (types.UID) (len=36) "41e76cdf-d0d1-40f8-812c-c1d2710e1ccb",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=803) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 65 32 65  22 3a 7b 7d 2c 22 66 3a  |},"f:e2e":{},"f:|
              000000d0  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 70 6f 64 2d  |name":{},"f:pod-|
              000000e0  74 65 6d 70 6c 61 74 65  2d 68 61 73 68 22 3a 7b  |template-hash":{|
              000000f0  7d 7d 2c 22 66 3a 6f 77  6e 65 72 52 65 66 65 72  |}},"f:ownerRefer|
              00000100  65 6e 63 65 73 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |ences":{".":{},"|
              00000110  6b 3a 7b 5c 22 75 69 64  5c 22 3a 5c 22 34 31 65  |k:{\"uid\":\"41e|
              00000120  37 36 63 64 66 2d 64 30  64 31 2d 34 30 66 38 2d  |76cdf-d0d1-40f8-|
              00000130  38 31 32 63 2d 63 31 64  32 37 31 30 65 31 63 63  |812c-c1d2710e1cc|
              00000140  62 5c 22 7d 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |b\"}":{}}},"f:sp|
              00000150  65 63 22 3a 7b 22 66 3a  72 65 70 6c 69 63 61 73  |ec":{"f:replicas|
              00000160  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000170  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000180  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000190  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              000001a0  3a 7b 7d 2c 22 66 3a 65  32 65 22 3a 7b 7d 2c 22  |:{},"f:e2e":{},"|
              000001b0  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 70 6f  |f:name":{},"f:po|
              000001c0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001d0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000001e0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000001f0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 68  |"k:{\"name\":\"h|
              00000200  74 74 70 64 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |ttpd\"}":{".":{}|
              00000210  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000220  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000230  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000240  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000250  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000260  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000270  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000280  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000290  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              000002a0  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              000002b0  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              000002c0  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              000002d0  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              000002e0  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000002f0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              00000300  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              00000310  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              00000320  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=3) {
          (string) (len=3) "e2e": (string) (len=7) "testing",
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=3) {
            (string) (len=3) "e2e": (string) (len=7) "testing",
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 20 23:39:33.646: INFO: Pod "test-deployment-r5x6k-5d576bd769-7ppsb" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=38) "test-deployment-r5x6k-5d576bd769-7ppsb",
      GenerateName: (string) (len=33) "test-deployment-r5x6k-5d576bd769-",
      Namespace: (string) (len=15) "deployment-1589",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "627d14fe-7481-4c28-a137-58c9b40f0175",
      ResourceVersion: (string) (len=5) "14373",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844069171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=3) {
        (string) (len=3) "e2e": (string) (len=7) "testing",
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d576bd769"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.171.104/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "a674858a4abf690f583255c301d5af1ea8447567832a679f482149ee95e9df7f",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.171.104/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=32) "test-deployment-r5x6k-5d576bd769",
          UID: (types.UID) (len=36) "746f30da-2e69-4edf-88f5-9123d0df0639",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=548) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 65 32 65 22 3a 7b 7d  |.":{},"f:e2e":{}|
              00000040  2c 22 66 3a 6e 61 6d 65  22 3a 7b 7d 2c 22 66 3a  |,"f:name":{},"f:|
              00000050  70 6f 64 2d 74 65 6d 70  6c 61 74 65 2d 68 61 73  |pod-template-has|
              00000060  68 22 3a 7b 7d 7d 2c 22  66 3a 6f 77 6e 65 72 52  |h":{}},"f:ownerR|
              00000070  65 66 65 72 65 6e 63 65  73 22 3a 7b 22 2e 22 3a  |eferences":{".":|
              00000080  7b 7d 2c 22 6b 3a 7b 5c  22 75 69 64 5c 22 3a 5c  |{},"k:{\"uid\":\|
              00000090  22 37 34 36 66 33 30 64  61 2d 32 65 36 39 2d 34  |"746f30da-2e69-4|
              000000a0  65 64 66 2d 38 38 66 35  2d 39 31 32 33 64 30 64  |edf-88f5-9123d0d|
              000000b0  66 30 36 33 39 5c 22 7d  22 3a 7b 7d 7d 7d 2c 22  |f0639\"}":{}}},"|
              000000c0  66 3a 73 70 65 63 22 3a  7b 22 66 3a 63 6f 6e 74  |f:spec":{"f:cont|
              000000d0  61 69 6e 65 72 73 22 3a  7b 22 6b 3a 7b 5c 22 6e  |ainers":{"k:{\"n|
              000000e0  61 6d 65 5c 22 3a 5c 22  68 74 74 70 64 5c 22 7d  |ame\":\"httpd\"}|
              000000f0  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 66 3a 69 6d 61  |":{".":{},"f:ima|
              00000100  67 65 22 3a 7b 7d 2c 22  66 3a 69 6d 61 67 65 50  |ge":{},"f:imageP|
              00000110  75 6c 6c 50 6f 6c 69 63  79 22 3a 7b 7d 2c 22 66  |ullPolicy":{},"f|
              00000120  3a 6e 61 6d 65 22 3a 7b  7d 2c 22 66 3a 72 65 73  |:name":{},"f:res|
              00000130  6f 75 72 63 65 73 22 3a  7b 7d 2c 22 66 3a 73 65  |ources":{},"f:se|
              00000140  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000150  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000160  4d 65 73 73 61 67 65 50  61 74 68 22 3a 7b 7d 2c  |MessagePath":{},|
              00000170  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000180  73 73 61 67 65 50 6f 6c  69 63 79 22 3a 7b 7d 7d  |ssagePolicy":{}}|
              00000190  7d 2c 22 66 3a 64 6e 73  50 6f 6c 69 63 79 22 3a  |},"f:dnsPolicy":|
              000001a0  7b 7d 2c 22 66 3a 65 6e  61 62 6c 65 53 65 72 76  |{},"f:enableServ|
              000001b0  69 63 65 4c 69 6e 6b 73  22 3a 7b 7d 2c 22 66 3a  |iceLinks":{},"f:|
              000001c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000001d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000001e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000001f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000200  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000210  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000220  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 31 30 34 5c 22 7d 22  |10.1.171.104\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-rg6jp",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-rg6jp",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069172,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069171,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.171.104",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.171.104"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844069171,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844069172,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://b5ad6dcb7ba57e6aac538d0822e35c0152f735aa8ba73692e0f27ba2368df676",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 20 23:39:33.647: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-1589" for this suite. @ 02/20/24 23:39:33.649
• [2.123 seconds]
------------------------------
SSSSSS
------------------------------
[sig-apps] Job should create pods for an Indexed job with completion indexes and specified hostname [Conformance]
test/e2e/apps/job.go:370
  STEP: Creating a kubernetes client @ 02/20/24 23:39:33.663
  Feb 20 23:39:33.663: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/20/24 23:39:33.664
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:33.676
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:33.678
  STEP: Creating Indexed job @ 02/20/24 23:39:33.68
  STEP: Ensuring job reaches completions @ 02/20/24 23:39:33.685
  STEP: Ensuring pods with index for job exist @ 02/20/24 23:39:43.693
  Feb 20 23:39:43.703: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-9833" for this suite. @ 02/20/24 23:39:43.711
• [10.065 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should get and update a ReplicationController scale [Conformance]
test/e2e/apps/rc.go:424
  STEP: Creating a kubernetes client @ 02/20/24 23:39:43.733
  Feb 20 23:39:43.733: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/20/24 23:39:43.735
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:43.772
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:43.775
  STEP: Creating ReplicationController "e2e-rc-l9kns" @ 02/20/24 23:39:43.778
  Feb 20 23:39:43.785: INFO: Get Replication Controller "e2e-rc-l9kns" to confirm replicas
  Feb 20 23:39:44.787: INFO: Get Replication Controller "e2e-rc-l9kns" to confirm replicas
  Feb 20 23:39:44.794: INFO: Found 1 replicas for "e2e-rc-l9kns" replication controller
  STEP: Getting scale subresource for ReplicationController "e2e-rc-l9kns" @ 02/20/24 23:39:44.794
  STEP: Updating a scale subresource @ 02/20/24 23:39:44.8
  STEP: Verifying replicas where modified for replication controller "e2e-rc-l9kns" @ 02/20/24 23:39:44.817
  Feb 20 23:39:44.817: INFO: Get Replication Controller "e2e-rc-l9kns" to confirm replicas
  Feb 20 23:39:45.824: INFO: Get Replication Controller "e2e-rc-l9kns" to confirm replicas
  Feb 20 23:39:45.826: INFO: Found 2 replicas for "e2e-rc-l9kns" replication controller
  Feb 20 23:39:45.826: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-9568" for this suite. @ 02/20/24 23:39:45.828
• [2.101 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should reject a Pod requesting a non-existent RuntimeClass [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:55
  STEP: Creating a kubernetes client @ 02/20/24 23:39:45.834
  Feb 20 23:39:45.834: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename runtimeclass @ 02/20/24 23:39:45.834
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:45.849
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:45.851
  Feb 20 23:39:45.857: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-4549" for this suite. @ 02/20/24 23:39:45.859
• [0.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl replace should update a single-container pod's image  [Conformance]
test/e2e/kubectl/kubectl.go:1741
  STEP: Creating a kubernetes client @ 02/20/24 23:39:45.865
  Feb 20 23:39:45.865: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:39:45.866
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:45.89
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:45.892
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 02/20/24 23:39:45.894
  Feb 20 23:39:45.894: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-699 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Feb 20 23:39:46.061: INFO: stderr: ""
  Feb 20 23:39:46.061: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod is running @ 02/20/24 23:39:46.061
  STEP: verifying the pod e2e-test-httpd-pod was created @ 02/20/24 23:39:51.113
  Feb 20 23:39:51.113: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-699 get pod e2e-test-httpd-pod -o json'
  Feb 20 23:39:51.234: INFO: stderr: ""
  Feb 20 23:39:51.234: INFO: stdout: "{\n    \"apiVersion\": \"v1\",\n    \"kind\": \"Pod\",\n    \"metadata\": {\n        \"annotations\": {\n            \"cni.projectcalico.org/containerID\": \"47fa41fa1e8af24a59b0606723cc072b0ec94a919b92ed8c411dc3daad192d86\",\n            \"cni.projectcalico.org/podIP\": \"10.1.171.108/32\",\n            \"cni.projectcalico.org/podIPs\": \"10.1.171.108/32\"\n        },\n        \"creationTimestamp\": \"2024-02-20T23:39:45Z\",\n        \"labels\": {\n            \"run\": \"e2e-test-httpd-pod\"\n        },\n        \"name\": \"e2e-test-httpd-pod\",\n        \"namespace\": \"kubectl-699\",\n        \"resourceVersion\": \"14577\",\n        \"uid\": \"1ddf21a9-054c-4a9a-b38d-959d702258f1\"\n    },\n    \"spec\": {\n        \"containers\": [\n            {\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imagePullPolicy\": \"IfNotPresent\",\n                \"name\": \"e2e-test-httpd-pod\",\n                \"resources\": {},\n                \"terminationMessagePath\": \"/dev/termination-log\",\n                \"terminationMessagePolicy\": \"File\",\n                \"volumeMounts\": [\n                    {\n                        \"mountPath\": \"/var/run/secrets/kubernetes.io/serviceaccount\",\n                        \"name\": \"kube-api-access-q5pjn\",\n                        \"readOnly\": true\n                    }\n                ]\n            }\n        ],\n        \"dnsPolicy\": \"ClusterFirst\",\n        \"enableServiceLinks\": true,\n        \"nodeName\": \"worker\",\n        \"preemptionPolicy\": \"PreemptLowerPriority\",\n        \"priority\": 0,\n        \"restartPolicy\": \"Always\",\n        \"schedulerName\": \"default-scheduler\",\n        \"securityContext\": {},\n        \"serviceAccount\": \"default\",\n        \"serviceAccountName\": \"default\",\n        \"terminationGracePeriodSeconds\": 30,\n        \"tolerations\": [\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/not-ready\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            },\n            {\n                \"effect\": \"NoExecute\",\n                \"key\": \"node.kubernetes.io/unreachable\",\n                \"operator\": \"Exists\",\n                \"tolerationSeconds\": 300\n            }\n        ],\n        \"volumes\": [\n            {\n                \"name\": \"kube-api-access-q5pjn\",\n                \"projected\": {\n                    \"defaultMode\": 420,\n                    \"sources\": [\n                        {\n                            \"serviceAccountToken\": {\n                                \"expirationSeconds\": 3607,\n                                \"path\": \"token\"\n                            }\n                        },\n                        {\n                            \"configMap\": {\n                                \"items\": [\n                                    {\n                                        \"key\": \"ca.crt\",\n                                        \"path\": \"ca.crt\"\n                                    }\n                                ],\n                                \"name\": \"kube-root-ca.crt\"\n                            }\n                        },\n                        {\n                            \"downwardAPI\": {\n                                \"items\": [\n                                    {\n                                        \"fieldRef\": {\n                                            \"apiVersion\": \"v1\",\n                                            \"fieldPath\": \"metadata.namespace\"\n                                        },\n                                        \"path\": \"namespace\"\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    },\n    \"status\": {\n        \"conditions\": [\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-02-20T23:39:46Z\",\n                \"status\": \"True\",\n                \"type\": \"Initialized\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-02-20T23:39:47Z\",\n                \"status\": \"True\",\n                \"type\": \"Ready\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-02-20T23:39:47Z\",\n                \"status\": \"True\",\n                \"type\": \"ContainersReady\"\n            },\n            {\n                \"lastProbeTime\": null,\n                \"lastTransitionTime\": \"2024-02-20T23:39:46Z\",\n                \"status\": \"True\",\n                \"type\": \"PodScheduled\"\n            }\n        ],\n        \"containerStatuses\": [\n            {\n                \"containerID\": \"containerd://a46775d481601cbaf485bb08f8e904af31bba3c488c2f7788215b092a9629943\",\n                \"image\": \"registry.k8s.io/e2e-test-images/httpd:2.4.38-4\",\n                \"imageID\": \"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22\",\n                \"lastState\": {},\n                \"name\": \"e2e-test-httpd-pod\",\n                \"ready\": true,\n                \"restartCount\": 0,\n                \"started\": true,\n                \"state\": {\n                    \"running\": {\n                        \"startedAt\": \"2024-02-20T23:39:47Z\"\n                    }\n                }\n            }\n        ],\n        \"hostIP\": \"10.100.138.108\",\n        \"phase\": \"Running\",\n        \"podIP\": \"10.1.171.108\",\n        \"podIPs\": [\n            {\n                \"ip\": \"10.1.171.108\"\n            }\n        ],\n        \"qosClass\": \"BestEffort\",\n        \"startTime\": \"2024-02-20T23:39:46Z\"\n    }\n}\n"
  STEP: replace the image in the pod @ 02/20/24 23:39:51.234
  Feb 20 23:39:51.234: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-699 replace -f -'
  Feb 20 23:39:51.421: INFO: stderr: ""
  Feb 20 23:39:51.421: INFO: stdout: "pod/e2e-test-httpd-pod replaced\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/busybox:1.29-4 @ 02/20/24 23:39:51.421
  Feb 20 23:39:51.427: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-699 delete pods e2e-test-httpd-pod'
  Feb 20 23:39:52.786: INFO: stderr: ""
  Feb 20 23:39:52.787: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Feb 20 23:39:52.787: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-699" for this suite. @ 02/20/24 23:39:52.79
• [6.933 seconds]
------------------------------
SSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop exec hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:152
  STEP: Creating a kubernetes client @ 02/20/24 23:39:52.799
  Feb 20 23:39:52.799: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 02/20/24 23:39:52.799
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:39:52.817
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:39:52.82
  STEP: create the container to handle the HTTPGet hook request. @ 02/20/24 23:39:52.823
  STEP: create the pod with lifecycle hook @ 02/20/24 23:39:54.845
  STEP: delete the pod with lifecycle hook @ 02/20/24 23:39:56.881
  STEP: check prestop hook @ 02/20/24 23:40:00.927
  Feb 20 23:40:00.941: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-3664" for this suite. @ 02/20/24 23:40:00.949
• [8.175 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not cause race condition when used for configmaps [Serial] [Conformance]
test/e2e/storage/empty_dir_wrapper.go:188
  STEP: Creating a kubernetes client @ 02/20/24 23:40:00.976
  Feb 20 23:40:00.976: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir-wrapper @ 02/20/24 23:40:00.978
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:40:01.018
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:40:01.022
  STEP: Creating 50 configmaps @ 02/20/24 23:40:01.026
  STEP: Creating RC which spawns configmap-volume pods @ 02/20/24 23:40:01.511
  Feb 20 23:40:01.546: INFO: Pod name wrapped-volume-race-b23b7c43-ccef-45e8-903a-208d91814a45: Found 0 pods out of 5
  Feb 20 23:40:06.565: INFO: Pod name wrapped-volume-race-b23b7c43-ccef-45e8-903a-208d91814a45: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 02/20/24 23:40:06.565
  STEP: Creating RC which spawns configmap-volume pods @ 02/20/24 23:40:06.617
  Feb 20 23:40:06.644: INFO: Pod name wrapped-volume-race-6c65b2d7-4f55-4513-bbc1-d3dfc9a025cf: Found 0 pods out of 5
  Feb 20 23:40:11.677: INFO: Pod name wrapped-volume-race-6c65b2d7-4f55-4513-bbc1-d3dfc9a025cf: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 02/20/24 23:40:11.677
  STEP: Creating RC which spawns configmap-volume pods @ 02/20/24 23:40:11.714
  Feb 20 23:40:11.738: INFO: Pod name wrapped-volume-race-9d4ce36c-2a13-4a0c-af21-723e198488ac: Found 0 pods out of 5
  Feb 20 23:40:16.807: INFO: Pod name wrapped-volume-race-9d4ce36c-2a13-4a0c-af21-723e198488ac: Found 5 pods out of 5
  STEP: Ensuring each pod is running @ 02/20/24 23:40:16.807
  Feb 20 23:40:16.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController wrapped-volume-race-9d4ce36c-2a13-4a0c-af21-723e198488ac in namespace emptydir-wrapper-8256, will wait for the garbage collector to delete the pods @ 02/20/24 23:40:16.82
  Feb 20 23:40:16.897: INFO: Deleting ReplicationController wrapped-volume-race-9d4ce36c-2a13-4a0c-af21-723e198488ac took: 23.925828ms
  Feb 20 23:40:16.999: INFO: Terminating ReplicationController wrapped-volume-race-9d4ce36c-2a13-4a0c-af21-723e198488ac pods took: 101.914046ms
  STEP: deleting ReplicationController wrapped-volume-race-6c65b2d7-4f55-4513-bbc1-d3dfc9a025cf in namespace emptydir-wrapper-8256, will wait for the garbage collector to delete the pods @ 02/20/24 23:40:18.2
  Feb 20 23:40:18.281: INFO: Deleting ReplicationController wrapped-volume-race-6c65b2d7-4f55-4513-bbc1-d3dfc9a025cf took: 26.62398ms
  Feb 20 23:40:18.482: INFO: Terminating ReplicationController wrapped-volume-race-6c65b2d7-4f55-4513-bbc1-d3dfc9a025cf pods took: 200.896891ms
  STEP: deleting ReplicationController wrapped-volume-race-b23b7c43-ccef-45e8-903a-208d91814a45 in namespace emptydir-wrapper-8256, will wait for the garbage collector to delete the pods @ 02/20/24 23:40:20.482
  Feb 20 23:40:20.548: INFO: Deleting ReplicationController wrapped-volume-race-b23b7c43-ccef-45e8-903a-208d91814a45 took: 9.156863ms
  Feb 20 23:40:20.649: INFO: Terminating ReplicationController wrapped-volume-race-b23b7c43-ccef-45e8-903a-208d91814a45 pods took: 100.191623ms
  STEP: Cleaning up the configMaps @ 02/20/24 23:40:22.349
  STEP: Destroying namespace "emptydir-wrapper-8256" for this suite. @ 02/20/24 23:40:22.65
• [21.681 seconds]
------------------------------
S
------------------------------
[sig-storage] ConfigMap should be consumable in multiple volumes in the same pod [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:423
  STEP: Creating a kubernetes client @ 02/20/24 23:40:22.657
  Feb 20 23:40:22.657: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:40:22.657
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:40:22.672
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:40:22.674
  STEP: Creating configMap with name configmap-test-volume-9fda233b-1c5e-46f2-ae8a-3869d35bf091 @ 02/20/24 23:40:22.677
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:40:22.682
  STEP: Saw pod success @ 02/20/24 23:40:26.708
  Feb 20 23:40:26.714: INFO: Trying to get logs from node control-plane pod pod-configmaps-a7835c0b-2372-4ab3-9dcd-69c01f39f578 container configmap-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:40:26.729
  Feb 20 23:40:26.778: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-524" for this suite. @ 02/20/24 23:40:26.786
• [4.140 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support pod.Spec.SecurityContext.RunAsUser And pod.Spec.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:129
  STEP: Creating a kubernetes client @ 02/20/24 23:40:26.805
  Feb 20 23:40:26.805: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context @ 02/20/24 23:40:26.806
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:40:26.822
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:40:26.824
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 02/20/24 23:40:26.826
  STEP: Saw pod success @ 02/20/24 23:40:30.85
  Feb 20 23:40:30.857: INFO: Trying to get logs from node control-plane pod security-context-0e50b9e2-f0cd-433c-9ab1-7332628a659c container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:40:30.876
  Feb 20 23:40:30.926: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-7073" for this suite. @ 02/20/24 23:40:30.934
• [4.142 seconds]
------------------------------
[sig-network] EndpointSlice should create and delete Endpoints and EndpointSlices for a Service with a selector specified [Conformance]
test/e2e/network/endpointslice.go:104
  STEP: Creating a kubernetes client @ 02/20/24 23:40:30.947
  Feb 20 23:40:30.947: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename endpointslice @ 02/20/24 23:40:30.948
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:40:30.968
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:40:30.97
  Feb 20 23:40:35.063: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-4382" for this suite. @ 02/20/24 23:40:35.072
• [4.148 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:527
  STEP: Creating a kubernetes client @ 02/20/24 23:40:35.101
  Feb 20 23:40:35.101: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:40:35.103
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:40:35.145
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:40:35.147
  STEP: Creating pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666 @ 02/20/24 23:40:35.15
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:40:37.167
  Feb 20 23:40:37.181: INFO: Initial restart count of pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a is 0
  Feb 20 23:40:37.187: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:39.228: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:41.235: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:43.244: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:45.252: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:47.259: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:49.263: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:51.271: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:53.281: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:55.289: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:57.292: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:40:59.296: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:01.305: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:03.308: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:05.316: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:07.324: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:09.332: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:11.340: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:13.359: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:15.367: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:17.375: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:19.382: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:21.387: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:23.396: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:25.404: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:27.411: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:29.418: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:31.427: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:33.436: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:35.439: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:37.447: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:39.457: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:41.466: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:43.477: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:45.484: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:47.491: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:49.500: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:51.503: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:53.512: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:55.520: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:57.529: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:41:59.537: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:01.545: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:03.554: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:05.562: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:07.570: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:09.578: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:11.586: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:13.590: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:15.597: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:17.604: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:19.613: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:21.621: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:23.630: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:25.633: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:27.636: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:29.677: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:31.685: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:33.694: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:35.699: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:37.706: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:39.714: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:41.723: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:43.733: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:45.736: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:47.743: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:49.752: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:51.760: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:53.769: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:55.772: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:57.779: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:42:59.788: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:01.792: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:03.801: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:05.809: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:07.813: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:09.821: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:11.830: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:13.838: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:15.846: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:17.853: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:19.861: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:21.869: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:23.879: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:25.885: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:27.893: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:29.901: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:31.909: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:33.917: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:35.926: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:37.934: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:39.942: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:41.946: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:43.949: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:45.999: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:48.001: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:50.009: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:52.017: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:54.020: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:56.028: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:43:58.035: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:00.043: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:02.050: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:04.060: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:06.068: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:08.076: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:10.080: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:12.088: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:14.095: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:16.121: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:18.130: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:20.137: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:22.144: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:24.147: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:26.155: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:28.162: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:30.178: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:32.186: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:34.195: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:36.202: INFO: Get pod test-grpc-d0410830-3511-44d4-b3b2-9d171929738a in namespace container-probe-3666
  Feb 20 23:44:38.204: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:44:38.213
  STEP: Destroying namespace "container-probe-3666" for this suite. @ 02/20/24 23:44:38.253
• [243.170 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide DNS for the cluster  [Conformance]
test/e2e/network/dns.go:50
  STEP: Creating a kubernetes client @ 02/20/24 23:44:38.272
  Feb 20 23:44:38.272: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/20/24 23:44:38.272
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:44:38.291
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:44:38.293
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 02/20/24 23:44:38.294
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@kubernetes.default.svc.cluster.local;check="$$(dig +tcp +noall +answer +search kubernetes.default.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@kubernetes.default.svc.cluster.local;sleep 1; done
   @ 02/20/24 23:44:38.294
  STEP: creating a pod to probe DNS @ 02/20/24 23:44:38.294
  STEP: submitting the pod to kubernetes @ 02/20/24 23:44:38.294
  STEP: retrieving the pod @ 02/20/24 23:44:40.313
  STEP: looking for the results for each expected name from probers @ 02/20/24 23:44:40.32
  Feb 20 23:44:40.357: INFO: DNS probes using dns-1378/dns-test-4545a622-cd72-45cd-81e1-28d4a3877642 succeeded

  Feb 20 23:44:40.357: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:44:40.366
  STEP: Destroying namespace "dns-1378" for this suite. @ 02/20/24 23:44:40.41
• [2.149 seconds]
------------------------------
SSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command (container entrypoint) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:75
  STEP: Creating a kubernetes client @ 02/20/24 23:44:40.421
  Feb 20 23:44:40.421: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename containers @ 02/20/24 23:44:40.422
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:44:40.441
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:44:40.443
  STEP: Creating a pod to test override command @ 02/20/24 23:44:40.444
  STEP: Saw pod success @ 02/20/24 23:44:44.473
  Feb 20 23:44:44.479: INFO: Trying to get logs from node control-plane pod client-containers-d04789b4-38b9-4897-a7ff-6c42f40c66a3 container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:44:44.514
  Feb 20 23:44:44.564: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-521" for this suite. @ 02/20/24 23:44:44.572
• [4.168 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields in an embedded object [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:236
  STEP: Creating a kubernetes client @ 02/20/24 23:44:44.591
  Feb 20 23:44:44.591: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/20/24 23:44:44.593
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:44:44.618
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:44:44.62
  Feb 20 23:44:44.622: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 02/20/24 23:44:45.901
  Feb 20 23:44:45.901: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-9035 --namespace=crd-publish-openapi-9035 create -f -'
  Feb 20 23:44:46.227: INFO: stderr: ""
  Feb 20 23:44:46.227: INFO: stdout: "e2e-test-crd-publish-openapi-9947-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Feb 20 23:44:46.227: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-9035 --namespace=crd-publish-openapi-9035 delete e2e-test-crd-publish-openapi-9947-crds test-cr'
  Feb 20 23:44:46.334: INFO: stderr: ""
  Feb 20 23:44:46.334: INFO: stdout: "e2e-test-crd-publish-openapi-9947-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  Feb 20 23:44:46.334: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-9035 --namespace=crd-publish-openapi-9035 apply -f -'
  Feb 20 23:44:46.443: INFO: stderr: ""
  Feb 20 23:44:46.443: INFO: stdout: "e2e-test-crd-publish-openapi-9947-crd.crd-publish-openapi-test-unknown-in-nested.example.com/test-cr created\n"
  Feb 20 23:44:46.443: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-9035 --namespace=crd-publish-openapi-9035 delete e2e-test-crd-publish-openapi-9947-crds test-cr'
  Feb 20 23:44:46.490: INFO: stderr: ""
  Feb 20 23:44:46.490: INFO: stdout: "e2e-test-crd-publish-openapi-9947-crd.crd-publish-openapi-test-unknown-in-nested.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 02/20/24 23:44:46.491
  Feb 20 23:44:46.491: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-9035 explain e2e-test-crd-publish-openapi-9947-crds'
  Feb 20 23:44:46.575: INFO: stderr: ""
  Feb 20 23:44:46.575: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-in-nested.example.com\nKIND:       e2e-test-crd-publish-openapi-9947-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties in nested field for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  Feb 20 23:44:47.871: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-9035" for this suite. @ 02/20/24 23:44:47.875
• [3.289 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should support sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:77
  STEP: Creating a kubernetes client @ 02/20/24 23:44:47.881
  Feb 20 23:44:47.881: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sysctl @ 02/20/24 23:44:47.881
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:44:47.895
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:44:47.897
  STEP: Creating a pod with the kernel.shm_rmid_forced sysctl @ 02/20/24 23:44:47.898
  STEP: Watching for error events or started pod @ 02/20/24 23:44:47.905
  STEP: Waiting for pod completion @ 02/20/24 23:44:49.908
  STEP: Checking that the pod succeeded @ 02/20/24 23:44:51.913
  STEP: Getting logs from the pod @ 02/20/24 23:44:51.913
  STEP: Checking that the sysctl is actually updated @ 02/20/24 23:44:51.917
  Feb 20 23:44:51.917: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-9635" for this suite. @ 02/20/24 23:44:51.919
• [4.045 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test when starting a container that exits should run with the expected status [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:52
  STEP: Creating a kubernetes client @ 02/20/24 23:44:51.926
  Feb 20 23:44:51.926: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-runtime @ 02/20/24 23:44:51.927
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:44:51.945
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:44:51.947
  STEP: Container 'terminate-cmd-rpa': should get the expected 'RestartCount' @ 02/20/24 23:44:51.955
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Phase' @ 02/20/24 23:45:07.047
  STEP: Container 'terminate-cmd-rpa': should get the expected 'Ready' condition @ 02/20/24 23:45:07.052
  STEP: Container 'terminate-cmd-rpa': should get the expected 'State' @ 02/20/24 23:45:07.058
  STEP: Container 'terminate-cmd-rpa': should be possible to delete [NodeConformance] @ 02/20/24 23:45:07.058
  STEP: Container 'terminate-cmd-rpof': should get the expected 'RestartCount' @ 02/20/24 23:45:07.084
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Phase' @ 02/20/24 23:45:10.106
  STEP: Container 'terminate-cmd-rpof': should get the expected 'Ready' condition @ 02/20/24 23:45:12.126
  STEP: Container 'terminate-cmd-rpof': should get the expected 'State' @ 02/20/24 23:45:12.142
  STEP: Container 'terminate-cmd-rpof': should be possible to delete [NodeConformance] @ 02/20/24 23:45:12.142
  STEP: Container 'terminate-cmd-rpn': should get the expected 'RestartCount' @ 02/20/24 23:45:12.194
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Phase' @ 02/20/24 23:45:13.2
  STEP: Container 'terminate-cmd-rpn': should get the expected 'Ready' condition @ 02/20/24 23:45:15.216
  STEP: Container 'terminate-cmd-rpn': should get the expected 'State' @ 02/20/24 23:45:15.23
  STEP: Container 'terminate-cmd-rpn': should be possible to delete [NodeConformance] @ 02/20/24 23:45:15.23
  Feb 20 23:45:15.275: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-577" for this suite. @ 02/20/24 23:45:15.292
• [23.373 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] should include custom resource definition resources in discovery documents [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:198
  STEP: Creating a kubernetes client @ 02/20/24 23:45:15.302
  Feb 20 23:45:15.302: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename custom-resource-definition @ 02/20/24 23:45:15.303
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:45:15.321
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:45:15.323
  STEP: fetching the /apis discovery document @ 02/20/24 23:45:15.324
  STEP: finding the apiextensions.k8s.io API group in the /apis discovery document @ 02/20/24 23:45:15.324
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis discovery document @ 02/20/24 23:45:15.324
  STEP: fetching the /apis/apiextensions.k8s.io discovery document @ 02/20/24 23:45:15.324
  STEP: finding the apiextensions.k8s.io/v1 API group/version in the /apis/apiextensions.k8s.io discovery document @ 02/20/24 23:45:15.325
  STEP: fetching the /apis/apiextensions.k8s.io/v1 discovery document @ 02/20/24 23:45:15.325
  STEP: finding customresourcedefinitions resources in the /apis/apiextensions.k8s.io/v1 discovery document @ 02/20/24 23:45:15.325
  Feb 20 23:45:15.325: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-2946" for this suite. @ 02/20/24 23:45:15.327
• [0.032 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to switch session affinity for NodePort service [LinuxOnly] [Conformance]
test/e2e/network/service.go:2224
  STEP: Creating a kubernetes client @ 02/20/24 23:45:15.335
  Feb 20 23:45:15.335: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:45:15.336
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:45:15.366
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:45:15.37
  STEP: creating service in namespace services-9349 @ 02/20/24 23:45:15.373
  STEP: creating service affinity-nodeport-transition in namespace services-9349 @ 02/20/24 23:45:15.374
  STEP: creating replication controller affinity-nodeport-transition in namespace services-9349 @ 02/20/24 23:45:15.406
  I0220 23:45:15.414806      22 runners.go:197] Created replication controller with name: affinity-nodeport-transition, namespace: services-9349, replica count: 3
  I0220 23:45:18.466267      22 runners.go:197] affinity-nodeport-transition Pods: 3 out of 3 created, 3 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:45:18.471: INFO: Creating new exec pod
  Feb 20 23:45:21.486: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 affinity-nodeport-transition 80'
  Feb 20 23:45:21.574: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 affinity-nodeport-transition 80\nConnection to affinity-nodeport-transition 80 port [tcp/http] succeeded!\n"
  Feb 20 23:45:21.574: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:45:21.575: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.62 80'
  Feb 20 23:45:21.642: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.62 80\nConnection to 10.152.183.62 80 port [tcp/http] succeeded!\n"
  Feb 20 23:45:21.642: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:45:21.642: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.210 30880'
  Feb 20 23:45:21.710: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.210 30880\nConnection to 10.100.138.210 30880 port [tcp/*] succeeded!\n"
  Feb 20 23:45:21.710: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:45:21.710: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 30880'
  Feb 20 23:45:21.779: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 30880\nConnection to 10.100.138.108 30880 port [tcp/*] succeeded!\n"
  Feb 20 23:45:21.779: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 20 23:45:21.786: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.210:30880/ ; done'
  Feb 20 23:45:21.899: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n"
  Feb 20 23:45:21.899: INFO: stdout: "\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb"
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:21.899: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:21.907: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.210:30880/ ; done'
  Feb 20 23:45:22.015: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n"
  Feb 20 23:45:22.015: INFO: stdout: "\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-7ndr8\naffinity-nodeport-transition-ph2qb\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-7ndr8"
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-ph2qb
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:22.015: INFO: Received response from host: affinity-nodeport-transition-7ndr8
  Feb 20 23:45:52.017: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-9349 exec execpod-affinity9l4wm -- /bin/sh -x -c for i in $(seq 0 15); do echo; curl -q -s --connect-timeout 2 http://10.100.138.210:30880/ ; done'
  Feb 20 23:45:52.162: INFO: stderr: "+ seq 0 15\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n+ echo\n+ curl -q -s --connect-timeout 2 http://10.100.138.210:30880/\n"
  Feb 20 23:45:52.162: INFO: stdout: "\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l\naffinity-nodeport-transition-lkq7l"
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Received response from host: affinity-nodeport-transition-lkq7l
  Feb 20 23:45:52.162: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:45:52.164: INFO: Cleaning up the exec pod
  STEP: deleting ReplicationController affinity-nodeport-transition in namespace services-9349, will wait for the garbage collector to delete the pods @ 02/20/24 23:45:52.177
  Feb 20 23:45:52.238: INFO: Deleting ReplicationController affinity-nodeport-transition took: 7.731306ms
  Feb 20 23:45:52.339: INFO: Terminating ReplicationController affinity-nodeport-transition pods took: 100.447717ms
  STEP: Destroying namespace "services-9349" for this suite. @ 02/20/24 23:45:55.496
• [40.169 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:163
  STEP: Creating a kubernetes client @ 02/20/24 23:45:55.508
  Feb 20 23:45:55.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:45:55.509
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:45:55.541
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:45:55.542
  STEP: Creating the pod @ 02/20/24 23:45:55.544
  Feb 20 23:45:58.121: INFO: Successfully updated pod "annotationupdate95128a1d-4023-4e81-b5ae-01a4cf7fbe59"
  Feb 20 23:46:02.176: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7448" for this suite. @ 02/20/24 23:46:02.185
• [6.702 seconds]
------------------------------
SS
------------------------------
[sig-instrumentation] Events API should delete a collection of events [Conformance]
test/e2e/instrumentation/events.go:207
  STEP: Creating a kubernetes client @ 02/20/24 23:46:02.211
  Feb 20 23:46:02.211: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename events @ 02/20/24 23:46:02.213
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:46:02.24
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:46:02.241
  STEP: Create set of events @ 02/20/24 23:46:02.243
  STEP: get a list of Events with a label in the current namespace @ 02/20/24 23:46:02.259
  STEP: delete a list of events @ 02/20/24 23:46:02.261
  Feb 20 23:46:02.261: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 02/20/24 23:46:02.278
  Feb 20 23:46:02.279: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-6519" for this suite. @ 02/20/24 23:46:02.281
• [0.077 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should orphan pods created by rc if delete options say so [Conformance]
test/e2e/apimachinery/garbage_collector.go:379
  STEP: Creating a kubernetes client @ 02/20/24 23:46:02.287
  Feb 20 23:46:02.287: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/20/24 23:46:02.288
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:46:02.3
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:46:02.302
  STEP: create the rc @ 02/20/24 23:46:02.306
  W0220 23:46:02.311613      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: delete the rc @ 02/20/24 23:46:12.388
  STEP: wait for the rc to be deleted @ 02/20/24 23:46:12.536
  STEP: wait for 30 seconds to see if the garbage collector mistakenly deletes the pods @ 02/20/24 23:46:17.563
  STEP: Gathering metrics @ 02/20/24 23:46:47.589
  W0220 23:46:47.593415      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 20 23:46:47.593: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 20 23:46:47.593: INFO: Deleting pod "simpletest.rc-qm5l8" in namespace "gc-1886"
  Feb 20 23:46:47.622: INFO: Deleting pod "simpletest.rc-2jz5l" in namespace "gc-1886"
  Feb 20 23:46:47.644: INFO: Deleting pod "simpletest.rc-xxgv4" in namespace "gc-1886"
  Feb 20 23:46:47.672: INFO: Deleting pod "simpletest.rc-8mqxd" in namespace "gc-1886"
  Feb 20 23:46:47.697: INFO: Deleting pod "simpletest.rc-jx7zp" in namespace "gc-1886"
  Feb 20 23:46:47.719: INFO: Deleting pod "simpletest.rc-xzjxs" in namespace "gc-1886"
  Feb 20 23:46:47.742: INFO: Deleting pod "simpletest.rc-txbdn" in namespace "gc-1886"
  Feb 20 23:46:47.764: INFO: Deleting pod "simpletest.rc-29klq" in namespace "gc-1886"
  Feb 20 23:46:47.788: INFO: Deleting pod "simpletest.rc-29bkx" in namespace "gc-1886"
  Feb 20 23:46:47.807: INFO: Deleting pod "simpletest.rc-rh6t4" in namespace "gc-1886"
  Feb 20 23:46:47.829: INFO: Deleting pod "simpletest.rc-xm829" in namespace "gc-1886"
  Feb 20 23:46:47.848: INFO: Deleting pod "simpletest.rc-49mcc" in namespace "gc-1886"
  Feb 20 23:46:47.880: INFO: Deleting pod "simpletest.rc-klfm8" in namespace "gc-1886"
  Feb 20 23:46:47.914: INFO: Deleting pod "simpletest.rc-n5tkc" in namespace "gc-1886"
  Feb 20 23:46:48.049: INFO: Deleting pod "simpletest.rc-sgl2s" in namespace "gc-1886"
  Feb 20 23:46:48.187: INFO: Deleting pod "simpletest.rc-jmnk6" in namespace "gc-1886"
  Feb 20 23:46:48.239: INFO: Deleting pod "simpletest.rc-xqdd6" in namespace "gc-1886"
  Feb 20 23:46:48.339: INFO: Deleting pod "simpletest.rc-pstc4" in namespace "gc-1886"
  Feb 20 23:46:48.498: INFO: Deleting pod "simpletest.rc-mdftc" in namespace "gc-1886"
  Feb 20 23:46:48.588: INFO: Deleting pod "simpletest.rc-h4cz6" in namespace "gc-1886"
  Feb 20 23:46:48.685: INFO: Deleting pod "simpletest.rc-wd666" in namespace "gc-1886"
  Feb 20 23:46:48.737: INFO: Deleting pod "simpletest.rc-ftr64" in namespace "gc-1886"
  Feb 20 23:46:48.830: INFO: Deleting pod "simpletest.rc-hz6ms" in namespace "gc-1886"
  Feb 20 23:46:48.881: INFO: Deleting pod "simpletest.rc-grgqh" in namespace "gc-1886"
  Feb 20 23:46:48.945: INFO: Deleting pod "simpletest.rc-vxswj" in namespace "gc-1886"
  Feb 20 23:46:49.151: INFO: Deleting pod "simpletest.rc-mbcpj" in namespace "gc-1886"
  Feb 20 23:46:49.326: INFO: Deleting pod "simpletest.rc-cg9cq" in namespace "gc-1886"
  Feb 20 23:46:49.433: INFO: Deleting pod "simpletest.rc-sqxvx" in namespace "gc-1886"
  Feb 20 23:46:49.515: INFO: Deleting pod "simpletest.rc-dq4v8" in namespace "gc-1886"
  Feb 20 23:46:49.583: INFO: Deleting pod "simpletest.rc-dfntg" in namespace "gc-1886"
  Feb 20 23:46:49.641: INFO: Deleting pod "simpletest.rc-x6wq5" in namespace "gc-1886"
  Feb 20 23:46:49.690: INFO: Deleting pod "simpletest.rc-sdt5j" in namespace "gc-1886"
  Feb 20 23:46:49.768: INFO: Deleting pod "simpletest.rc-6zlpn" in namespace "gc-1886"
  Feb 20 23:46:49.811: INFO: Deleting pod "simpletest.rc-8ph87" in namespace "gc-1886"
  Feb 20 23:46:49.891: INFO: Deleting pod "simpletest.rc-qxsg8" in namespace "gc-1886"
  Feb 20 23:46:49.927: INFO: Deleting pod "simpletest.rc-bk5pm" in namespace "gc-1886"
  Feb 20 23:46:49.980: INFO: Deleting pod "simpletest.rc-qc9vk" in namespace "gc-1886"
  Feb 20 23:46:50.130: INFO: Deleting pod "simpletest.rc-k8ftk" in namespace "gc-1886"
  Feb 20 23:46:50.201: INFO: Deleting pod "simpletest.rc-58gjq" in namespace "gc-1886"
  Feb 20 23:46:50.237: INFO: Deleting pod "simpletest.rc-4pp7g" in namespace "gc-1886"
  Feb 20 23:46:50.264: INFO: Deleting pod "simpletest.rc-qwkk6" in namespace "gc-1886"
  Feb 20 23:46:50.302: INFO: Deleting pod "simpletest.rc-zbwkq" in namespace "gc-1886"
  Feb 20 23:46:50.353: INFO: Deleting pod "simpletest.rc-vf7ck" in namespace "gc-1886"
  Feb 20 23:46:50.401: INFO: Deleting pod "simpletest.rc-s8g4g" in namespace "gc-1886"
  Feb 20 23:46:50.497: INFO: Deleting pod "simpletest.rc-rzgbl" in namespace "gc-1886"
  Feb 20 23:46:50.553: INFO: Deleting pod "simpletest.rc-vdpp6" in namespace "gc-1886"
  Feb 20 23:46:50.657: INFO: Deleting pod "simpletest.rc-zcc6k" in namespace "gc-1886"
  Feb 20 23:46:50.748: INFO: Deleting pod "simpletest.rc-h9r98" in namespace "gc-1886"
  Feb 20 23:46:50.903: INFO: Deleting pod "simpletest.rc-sgx6l" in namespace "gc-1886"
  Feb 20 23:46:50.992: INFO: Deleting pod "simpletest.rc-lw4tp" in namespace "gc-1886"
  Feb 20 23:46:51.074: INFO: Deleting pod "simpletest.rc-whwkh" in namespace "gc-1886"
  Feb 20 23:46:51.167: INFO: Deleting pod "simpletest.rc-rnmn4" in namespace "gc-1886"
  Feb 20 23:46:51.226: INFO: Deleting pod "simpletest.rc-hq44m" in namespace "gc-1886"
  Feb 20 23:46:51.276: INFO: Deleting pod "simpletest.rc-np8vt" in namespace "gc-1886"
  Feb 20 23:46:51.312: INFO: Deleting pod "simpletest.rc-z9hqc" in namespace "gc-1886"
  Feb 20 23:46:51.360: INFO: Deleting pod "simpletest.rc-464b4" in namespace "gc-1886"
  Feb 20 23:46:51.395: INFO: Deleting pod "simpletest.rc-58k9d" in namespace "gc-1886"
  Feb 20 23:46:51.431: INFO: Deleting pod "simpletest.rc-5f77m" in namespace "gc-1886"
  Feb 20 23:46:51.486: INFO: Deleting pod "simpletest.rc-cqqsn" in namespace "gc-1886"
  Feb 20 23:46:51.566: INFO: Deleting pod "simpletest.rc-csz44" in namespace "gc-1886"
  Feb 20 23:46:51.709: INFO: Deleting pod "simpletest.rc-7gg6h" in namespace "gc-1886"
  Feb 20 23:46:51.744: INFO: Deleting pod "simpletest.rc-d5v42" in namespace "gc-1886"
  Feb 20 23:46:51.817: INFO: Deleting pod "simpletest.rc-p6vq4" in namespace "gc-1886"
  Feb 20 23:46:51.879: INFO: Deleting pod "simpletest.rc-59pgk" in namespace "gc-1886"
  Feb 20 23:46:51.930: INFO: Deleting pod "simpletest.rc-rvmj7" in namespace "gc-1886"
  Feb 20 23:46:51.998: INFO: Deleting pod "simpletest.rc-4f7vx" in namespace "gc-1886"
  Feb 20 23:46:52.068: INFO: Deleting pod "simpletest.rc-jjm98" in namespace "gc-1886"
  Feb 20 23:46:52.091: INFO: Deleting pod "simpletest.rc-bsmh7" in namespace "gc-1886"
  Feb 20 23:46:52.154: INFO: Deleting pod "simpletest.rc-26m47" in namespace "gc-1886"
  Feb 20 23:46:52.264: INFO: Deleting pod "simpletest.rc-swhtg" in namespace "gc-1886"
  Feb 20 23:46:52.385: INFO: Deleting pod "simpletest.rc-bcsgf" in namespace "gc-1886"
  Feb 20 23:46:52.482: INFO: Deleting pod "simpletest.rc-bzc9z" in namespace "gc-1886"
  Feb 20 23:46:52.549: INFO: Deleting pod "simpletest.rc-989l7" in namespace "gc-1886"
  Feb 20 23:46:52.682: INFO: Deleting pod "simpletest.rc-7sdzn" in namespace "gc-1886"
  Feb 20 23:46:52.731: INFO: Deleting pod "simpletest.rc-sn4bm" in namespace "gc-1886"
  Feb 20 23:46:52.762: INFO: Deleting pod "simpletest.rc-gz48n" in namespace "gc-1886"
  Feb 20 23:46:52.860: INFO: Deleting pod "simpletest.rc-2bpzs" in namespace "gc-1886"
  Feb 20 23:46:52.927: INFO: Deleting pod "simpletest.rc-266xt" in namespace "gc-1886"
  Feb 20 23:46:53.078: INFO: Deleting pod "simpletest.rc-rnwrk" in namespace "gc-1886"
  Feb 20 23:46:53.161: INFO: Deleting pod "simpletest.rc-thwwb" in namespace "gc-1886"
  Feb 20 23:46:53.217: INFO: Deleting pod "simpletest.rc-8xhjs" in namespace "gc-1886"
  Feb 20 23:46:53.316: INFO: Deleting pod "simpletest.rc-x7ltk" in namespace "gc-1886"
  Feb 20 23:46:53.373: INFO: Deleting pod "simpletest.rc-pqj5q" in namespace "gc-1886"
  Feb 20 23:46:53.422: INFO: Deleting pod "simpletest.rc-dp5p9" in namespace "gc-1886"
  Feb 20 23:46:53.549: INFO: Deleting pod "simpletest.rc-jxphb" in namespace "gc-1886"
  Feb 20 23:46:53.598: INFO: Deleting pod "simpletest.rc-pl4w7" in namespace "gc-1886"
  Feb 20 23:46:53.656: INFO: Deleting pod "simpletest.rc-tjg4d" in namespace "gc-1886"
  Feb 20 23:46:53.723: INFO: Deleting pod "simpletest.rc-jb2j2" in namespace "gc-1886"
  Feb 20 23:46:53.814: INFO: Deleting pod "simpletest.rc-mxxdf" in namespace "gc-1886"
  Feb 20 23:46:53.852: INFO: Deleting pod "simpletest.rc-q7nbv" in namespace "gc-1886"
  Feb 20 23:46:53.897: INFO: Deleting pod "simpletest.rc-jwdpl" in namespace "gc-1886"
  Feb 20 23:46:53.980: INFO: Deleting pod "simpletest.rc-jp2dx" in namespace "gc-1886"
  Feb 20 23:46:54.035: INFO: Deleting pod "simpletest.rc-pf5q9" in namespace "gc-1886"
  Feb 20 23:46:54.102: INFO: Deleting pod "simpletest.rc-2t8sh" in namespace "gc-1886"
  Feb 20 23:46:54.221: INFO: Deleting pod "simpletest.rc-np8gg" in namespace "gc-1886"
  Feb 20 23:46:54.258: INFO: Deleting pod "simpletest.rc-2jjqd" in namespace "gc-1886"
  Feb 20 23:46:54.329: INFO: Deleting pod "simpletest.rc-sjq4r" in namespace "gc-1886"
  Feb 20 23:46:54.390: INFO: Deleting pod "simpletest.rc-jvls2" in namespace "gc-1886"
  Feb 20 23:46:54.448: INFO: Deleting pod "simpletest.rc-77dzv" in namespace "gc-1886"
  Feb 20 23:46:54.539: INFO: Deleting pod "simpletest.rc-zkp6h" in namespace "gc-1886"
  Feb 20 23:46:54.633: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1886" for this suite. @ 02/20/24 23:46:54.637
• [52.362 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should provide secure master service  [Conformance]
test/e2e/network/service.go:775
  STEP: Creating a kubernetes client @ 02/20/24 23:46:54.65
  Feb 20 23:46:54.650: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:46:54.651
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:46:54.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:46:54.722
  Feb 20 23:46:54.730: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1545" for this suite. @ 02/20/24 23:46:54.741
• [0.118 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Should recreate evicted statefulset [Conformance]
test/e2e/apps/statefulset.go:792
  STEP: Creating a kubernetes client @ 02/20/24 23:46:54.769
  Feb 20 23:46:54.769: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/20/24 23:46:54.769
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:46:54.878
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:46:54.88
  STEP: Creating service test in namespace statefulset-7970 @ 02/20/24 23:46:54.882
  STEP: Looking for a node to schedule stateful set and pod @ 02/20/24 23:46:54.896
  STEP: Creating pod with conflicting port in namespace statefulset-7970 @ 02/20/24 23:46:54.902
  STEP: Waiting until pod test-pod will start running in namespace statefulset-7970 @ 02/20/24 23:46:54.933
  STEP: Creating statefulset with conflicting port in namespace statefulset-7970 @ 02/20/24 23:47:04.972
  STEP: Waiting until stateful pod ss-0 will be recreated and deleted at least once in namespace statefulset-7970 @ 02/20/24 23:47:04.992
  Feb 20 23:47:05.073: INFO: Observed stateful pod in namespace: statefulset-7970, name: ss-0, uid: 4eaf755b-f983-4cd4-bd9b-850e39ae3a7c, status phase: Pending. Waiting for statefulset controller to delete.
  Feb 20 23:47:05.434: INFO: Observed stateful pod in namespace: statefulset-7970, name: ss-0, uid: 4eaf755b-f983-4cd4-bd9b-850e39ae3a7c, status phase: Failed. Waiting for statefulset controller to delete.
  Feb 20 23:47:05.462: INFO: Observed stateful pod in namespace: statefulset-7970, name: ss-0, uid: 4eaf755b-f983-4cd4-bd9b-850e39ae3a7c, status phase: Failed. Waiting for statefulset controller to delete.
  Feb 20 23:47:05.490: INFO: Observed delete event for stateful pod ss-0 in namespace statefulset-7970
  STEP: Removing pod with conflicting port in namespace statefulset-7970 @ 02/20/24 23:47:05.491
  STEP: Waiting when stateful pod ss-0 will be recreated in namespace statefulset-7970 and will be in running state @ 02/20/24 23:47:05.571
  Feb 20 23:47:07.590: INFO: Deleting all statefulset in ns statefulset-7970
  Feb 20 23:47:07.623: INFO: Scaling statefulset ss to 0
  Feb 20 23:47:17.698: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:47:17.706: INFO: Deleting statefulset ss
  Feb 20 23:47:17.736: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-7970" for this suite. @ 02/20/24 23:47:17.74
• [22.986 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] ConfigMap binary data should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:175
  STEP: Creating a kubernetes client @ 02/20/24 23:47:17.755
  Feb 20 23:47:17.755: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:47:17.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:17.788
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:17.79
  STEP: Creating configMap with name configmap-test-upd-3af6ba34-c820-4559-865b-f300948c5aac @ 02/20/24 23:47:17.794
  STEP: Creating the pod @ 02/20/24 23:47:17.8
  STEP: Waiting for pod with text data @ 02/20/24 23:47:19.827
  STEP: Waiting for pod with binary data @ 02/20/24 23:47:19.837
  Feb 20 23:47:19.843: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3391" for this suite. @ 02/20/24 23:47:19.846
• [2.096 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Pods should delete a collection of pods [Conformance]
test/e2e/common/node/pods.go:846
  STEP: Creating a kubernetes client @ 02/20/24 23:47:19.852
  Feb 20 23:47:19.852: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:47:19.853
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:19.87
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:19.872
  STEP: Create set of pods @ 02/20/24 23:47:19.873
  Feb 20 23:47:19.880: INFO: created test-pod-1
  Feb 20 23:47:19.887: INFO: created test-pod-2
  Feb 20 23:47:19.894: INFO: created test-pod-3
  STEP: waiting for all 3 pods to be running @ 02/20/24 23:47:19.894
  STEP: waiting for all pods to be deleted @ 02/20/24 23:47:21.971
  Feb 20 23:47:21.974: INFO: Pod quantity 3 is different from expected quantity 0
  Feb 20 23:47:22.977: INFO: Pod quantity 3 is different from expected quantity 0
  Feb 20 23:47:23.977: INFO: Pod quantity 3 is different from expected quantity 0
  Feb 20 23:47:24.977: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-4638" for this suite. @ 02/20/24 23:47:24.98
• [5.134 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl api-versions should check if v1 is in available api versions  [Conformance]
test/e2e/kubectl/kubectl.go:830
  STEP: Creating a kubernetes client @ 02/20/24 23:47:24.987
  Feb 20 23:47:24.987: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:47:24.988
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:25.024
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:25.026
  STEP: validating api versions @ 02/20/24 23:47:25.029
  Feb 20 23:47:25.029: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-158 api-versions'
  Feb 20 23:47:25.100: INFO: stderr: ""
  Feb 20 23:47:25.100: INFO: stdout: "admissionregistration.k8s.io/v1\napiextensions.k8s.io/v1\napiregistration.k8s.io/v1\napps/v1\nauthentication.k8s.io/v1\nauthorization.k8s.io/v1\nautoscaling/v1\nautoscaling/v2\nbatch/v1\ncertificates.k8s.io/v1\ncoordination.k8s.io/v1\ncrd.projectcalico.org/v1\ndiscovery.k8s.io/v1\nevents.k8s.io/v1\nflowcontrol.apiserver.k8s.io/v1beta2\nflowcontrol.apiserver.k8s.io/v1beta3\nnetworking.k8s.io/v1\nnode.k8s.io/v1\npolicy/v1\nrbac.authorization.k8s.io/v1\nscheduling.k8s.io/v1\nstorage.k8s.io/v1\nv1\n"
  Feb 20 23:47:25.100: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-158" for this suite. @ 02/20/24 23:47:25.102
• [0.123 seconds]
------------------------------
SS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:79
  STEP: Creating a kubernetes client @ 02/20/24 23:47:25.11
  Feb 20 23:47:25.110: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:47:25.11
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:25.143
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:25.145
  STEP: Creating secret with name secret-test-map-840c313a-46b2-4c77-90e2-59bef0f7f465 @ 02/20/24 23:47:25.147
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:47:25.156
  STEP: Saw pod success @ 02/20/24 23:47:29.188
  Feb 20 23:47:29.190: INFO: Trying to get logs from node control-plane pod pod-secrets-e054350a-c526-43fd-9328-10c7dcfc7a75 container secret-volume-test: <nil>
  STEP: delete the pod @ 02/20/24 23:47:29.194
  Feb 20 23:47:29.216: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2059" for this suite. @ 02/20/24 23:47:29.219
• [4.117 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to start watching from a specific resource version [Conformance]
test/e2e/apimachinery/watch.go:142
  STEP: Creating a kubernetes client @ 02/20/24 23:47:29.23
  Feb 20 23:47:29.230: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename watch @ 02/20/24 23:47:29.231
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:29.252
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:29.255
  STEP: creating a new configmap @ 02/20/24 23:47:29.257
  STEP: modifying the configmap once @ 02/20/24 23:47:29.262
  STEP: modifying the configmap a second time @ 02/20/24 23:47:29.27
  STEP: deleting the configmap @ 02/20/24 23:47:29.279
  STEP: creating a watch on configmaps from the resource version returned by the first update @ 02/20/24 23:47:29.285
  STEP: Expecting to observe notifications for all changes to the configmap after the first update @ 02/20/24 23:47:29.285
  Feb 20 23:47:29.285: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-772  3edb9003-370d-434a-b2ac-f061a1e90163 19156 0 2024-02-20 23:47:29 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-02-20 23:47:29 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:47:29.286: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-resource-version  watch-772  3edb9003-370d-434a-b2ac-f061a1e90163 19157 0 2024-02-20 23:47:29 +0000 UTC <nil> <nil> map[watch-this-configmap:from-resource-version] map[] [] [] [{e2e.test Update v1 2024-02-20 23:47:29 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:47:29.286: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-772" for this suite. @ 02/20/24 23:47:29.288
• [0.065 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should delete a collection of services [Conformance]
test/e2e/network/service.go:3552
  STEP: Creating a kubernetes client @ 02/20/24 23:47:29.296
  Feb 20 23:47:29.296: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/20/24 23:47:29.297
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:29.32
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:29.322
  STEP: creating a collection of services @ 02/20/24 23:47:29.323
  Feb 20 23:47:29.324: INFO: Creating e2e-svc-a-hb9gb
  Feb 20 23:47:29.339: INFO: Creating e2e-svc-b-l9j2h
  Feb 20 23:47:29.350: INFO: Creating e2e-svc-c-7ftjd
  STEP: deleting service collection @ 02/20/24 23:47:29.371
  Feb 20 23:47:29.399: INFO: Collection of services has been deleted
  Feb 20 23:47:29.399: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-6040" for this suite. @ 02/20/24 23:47:29.403
• [0.113 seconds]
------------------------------
SSS
------------------------------
[sig-auth] Certificates API [Privileged:ClusterAdmin] should support CSR API operations [Conformance]
test/e2e/auth/certificates.go:200
  STEP: Creating a kubernetes client @ 02/20/24 23:47:29.41
  Feb 20 23:47:29.410: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename certificates @ 02/20/24 23:47:29.41
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:29.437
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:29.439
  STEP: getting /apis @ 02/20/24 23:47:29.875
  STEP: getting /apis/certificates.k8s.io @ 02/20/24 23:47:29.877
  STEP: getting /apis/certificates.k8s.io/v1 @ 02/20/24 23:47:29.877
  STEP: creating @ 02/20/24 23:47:29.878
  STEP: getting @ 02/20/24 23:47:29.905
  STEP: listing @ 02/20/24 23:47:29.907
  STEP: watching @ 02/20/24 23:47:29.91
  Feb 20 23:47:29.910: INFO: starting watch
  STEP: patching @ 02/20/24 23:47:29.911
  STEP: updating @ 02/20/24 23:47:29.919
  Feb 20 23:47:29.924: INFO: waiting for watch events with expected annotations
  Feb 20 23:47:29.924: INFO: saw patched and updated annotations
  STEP: getting /approval @ 02/20/24 23:47:29.925
  STEP: patching /approval @ 02/20/24 23:47:29.926
  STEP: updating /approval @ 02/20/24 23:47:29.934
  STEP: getting /status @ 02/20/24 23:47:29.94
  STEP: patching /status @ 02/20/24 23:47:29.942
  STEP: updating /status @ 02/20/24 23:47:29.95
  STEP: deleting @ 02/20/24 23:47:29.956
  STEP: deleting a collection @ 02/20/24 23:47:29.967
  Feb 20 23:47:29.981: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "certificates-5222" for this suite. @ 02/20/24 23:47:29.983
• [0.580 seconds]
------------------------------
SSS
------------------------------
[sig-node] PodTemplates should delete a collection of pod templates [Conformance]
test/e2e/common/node/podtemplates.go:122
  STEP: Creating a kubernetes client @ 02/20/24 23:47:29.99
  Feb 20 23:47:29.990: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename podtemplate @ 02/20/24 23:47:29.991
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:30.005
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:30.007
  STEP: Create set of pod templates @ 02/20/24 23:47:30.009
  Feb 20 23:47:30.014: INFO: created test-podtemplate-1
  Feb 20 23:47:30.023: INFO: created test-podtemplate-2
  Feb 20 23:47:30.028: INFO: created test-podtemplate-3
  STEP: get a list of pod templates with a label in the current namespace @ 02/20/24 23:47:30.028
  STEP: delete collection of pod templates @ 02/20/24 23:47:30.03
  Feb 20 23:47:30.030: INFO: requesting DeleteCollection of pod templates
  STEP: check that the list of pod templates matches the requested quantity @ 02/20/24 23:47:30.05
  Feb 20 23:47:30.050: INFO: requesting list of pod templates to confirm quantity
  Feb 20 23:47:30.052: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-7432" for this suite. @ 02/20/24 23:47:30.055
• [0.111 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should allow activeDeadlineSeconds to be updated [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:399
  STEP: Creating a kubernetes client @ 02/20/24 23:47:30.102
  Feb 20 23:47:30.102: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/20/24 23:47:30.103
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:30.142
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:30.146
  STEP: creating the pod @ 02/20/24 23:47:30.17
  STEP: submitting the pod to kubernetes @ 02/20/24 23:47:30.17
  W0220 23:47:30.183080      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: verifying the pod is in kubernetes @ 02/20/24 23:47:32.191
  STEP: updating the pod @ 02/20/24 23:47:32.192
  Feb 20 23:47:32.704: INFO: Successfully updated pod "pod-update-activedeadlineseconds-f6109c30-5e8d-437b-b4f7-a773d20a2dc9"
  Feb 20 23:47:36.723: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6840" for this suite. @ 02/20/24 23:47:36.73
• [6.645 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicaSet should list and delete a collection of ReplicaSets [Conformance]
test/e2e/apps/replica_set.go:165
  STEP: Creating a kubernetes client @ 02/20/24 23:47:36.753
  Feb 20 23:47:36.753: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/20/24 23:47:36.755
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:36.784
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:36.788
  STEP: Create a ReplicaSet @ 02/20/24 23:47:36.79
  STEP: Verify that the required pods have come up @ 02/20/24 23:47:36.8
  Feb 20 23:47:36.803: INFO: Pod name sample-pod: Found 0 pods out of 3
  Feb 20 23:47:41.812: INFO: Pod name sample-pod: Found 3 pods out of 3
  STEP: ensuring each pod is running @ 02/20/24 23:47:41.812
  Feb 20 23:47:41.819: INFO: Replica Status: {Replicas:3 FullyLabeledReplicas:3 ReadyReplicas:3 AvailableReplicas:3 ObservedGeneration:1 Conditions:[]}
  STEP: Listing all ReplicaSets @ 02/20/24 23:47:41.819
  STEP: DeleteCollection of the ReplicaSets @ 02/20/24 23:47:41.826
  STEP: After DeleteCollection verify that ReplicaSets have been deleted @ 02/20/24 23:47:41.84
  Feb 20 23:47:41.844: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-634" for this suite. @ 02/20/24 23:47:41.848
• [5.107 seconds]
------------------------------
[sig-cli] Kubectl client Update Demo should scale a replication controller  [Conformance]
test/e2e/kubectl/kubectl.go:354
  STEP: Creating a kubernetes client @ 02/20/24 23:47:41.86
  Feb 20 23:47:41.860: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:47:41.861
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:47:41.906
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:47:41.909
  STEP: creating a replication controller @ 02/20/24 23:47:41.911
  Feb 20 23:47:41.911: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 create -f -'
  Feb 20 23:47:42.150: INFO: stderr: ""
  Feb 20 23:47:42.150: INFO: stdout: "replicationcontroller/update-demo-nautilus created\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 02/20/24 23:47:42.15
  Feb 20 23:47:42.150: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:47:42.205: INFO: stderr: ""
  Feb 20 23:47:42.205: INFO: stdout: ""
  STEP: Replicas for name=update-demo: expected=2 actual=0 @ 02/20/24 23:47:42.205
  Feb 20 23:47:47.205: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:47:47.276: INFO: stderr: ""
  Feb 20 23:47:47.276: INFO: stdout: "update-demo-nautilus-qwdvb update-demo-nautilus-65r4r "
  Feb 20 23:47:47.276: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:47:47.324: INFO: stderr: ""
  Feb 20 23:47:47.324: INFO: stdout: "true"
  Feb 20 23:47:47.324: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:47:47.368: INFO: stderr: ""
  Feb 20 23:47:47.368: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:47:47.368: INFO: validating pod update-demo-nautilus-qwdvb
  Feb 20 23:47:47.372: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:47:47.372: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:47:47.372: INFO: update-demo-nautilus-qwdvb is verified up and running
  Feb 20 23:47:47.372: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-65r4r -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:47:47.416: INFO: stderr: ""
  Feb 20 23:47:47.416: INFO: stdout: "true"
  Feb 20 23:47:47.416: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-65r4r -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:47:47.456: INFO: stderr: ""
  Feb 20 23:47:47.456: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:47:47.456: INFO: validating pod update-demo-nautilus-65r4r
  Feb 20 23:47:47.459: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:47:47.459: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:47:47.459: INFO: update-demo-nautilus-65r4r is verified up and running
  STEP: scaling down the replication controller @ 02/20/24 23:47:47.459
  Feb 20 23:47:47.460: INFO: scanned /root for discovery docs: <nil>
  Feb 20 23:47:47.460: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 scale rc update-demo-nautilus --replicas=1 --timeout=5m'
  Feb 20 23:47:48.519: INFO: stderr: ""
  Feb 20 23:47:48.519: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 02/20/24 23:47:48.519
  Feb 20 23:47:48.519: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:47:48.564: INFO: stderr: ""
  Feb 20 23:47:48.565: INFO: stdout: "update-demo-nautilus-qwdvb update-demo-nautilus-65r4r "
  STEP: Replicas for name=update-demo: expected=1 actual=2 @ 02/20/24 23:47:48.565
  Feb 20 23:47:53.566: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:47:53.664: INFO: stderr: ""
  Feb 20 23:47:53.664: INFO: stdout: "update-demo-nautilus-qwdvb "
  Feb 20 23:47:53.664: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:47:53.708: INFO: stderr: ""
  Feb 20 23:47:53.708: INFO: stdout: "true"
  Feb 20 23:47:53.708: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:47:53.751: INFO: stderr: ""
  Feb 20 23:47:53.751: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:47:53.751: INFO: validating pod update-demo-nautilus-qwdvb
  Feb 20 23:47:53.753: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:47:53.753: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:47:53.753: INFO: update-demo-nautilus-qwdvb is verified up and running
  STEP: scaling up the replication controller @ 02/20/24 23:47:53.753
  Feb 20 23:47:53.754: INFO: scanned /root for discovery docs: <nil>
  Feb 20 23:47:53.754: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 scale rc update-demo-nautilus --replicas=2 --timeout=5m'
  Feb 20 23:47:54.812: INFO: stderr: ""
  Feb 20 23:47:54.812: INFO: stdout: "replicationcontroller/update-demo-nautilus scaled\n"
  STEP: waiting for all containers in name=update-demo pods to come up. @ 02/20/24 23:47:54.812
  Feb 20 23:47:54.812: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:47:54.860: INFO: stderr: ""
  Feb 20 23:47:54.860: INFO: stdout: "update-demo-nautilus-qwdvb update-demo-nautilus-mvwkv "
  Feb 20 23:47:54.860: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:47:54.900: INFO: stderr: ""
  Feb 20 23:47:54.900: INFO: stdout: "true"
  Feb 20 23:47:54.900: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:47:54.939: INFO: stderr: ""
  Feb 20 23:47:54.939: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:47:54.939: INFO: validating pod update-demo-nautilus-qwdvb
  Feb 20 23:47:54.941: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:47:54.941: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:47:54.941: INFO: update-demo-nautilus-qwdvb is verified up and running
  Feb 20 23:47:54.941: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-mvwkv -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:47:54.983: INFO: stderr: ""
  Feb 20 23:47:54.984: INFO: stdout: ""
  Feb 20 23:47:54.984: INFO: update-demo-nautilus-mvwkv is created but not running
  Feb 20 23:47:59.985: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -o template --template={{range.items}}{{.metadata.name}} {{end}} -l name=update-demo'
  Feb 20 23:48:00.082: INFO: stderr: ""
  Feb 20 23:48:00.082: INFO: stdout: "update-demo-nautilus-qwdvb update-demo-nautilus-mvwkv "
  Feb 20 23:48:00.082: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:48:00.144: INFO: stderr: ""
  Feb 20 23:48:00.144: INFO: stdout: "true"
  Feb 20 23:48:00.144: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-qwdvb -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:48:00.193: INFO: stderr: ""
  Feb 20 23:48:00.193: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:48:00.193: INFO: validating pod update-demo-nautilus-qwdvb
  Feb 20 23:48:00.195: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:48:00.195: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:48:00.195: INFO: update-demo-nautilus-qwdvb is verified up and running
  Feb 20 23:48:00.195: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-mvwkv -o template --template={{if (exists . "status" "containerStatuses")}}{{range .status.containerStatuses}}{{if (and (eq .name "update-demo") (exists . "state" "running"))}}true{{end}}{{end}}{{end}}'
  Feb 20 23:48:00.235: INFO: stderr: ""
  Feb 20 23:48:00.235: INFO: stdout: "true"
  Feb 20 23:48:00.235: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods update-demo-nautilus-mvwkv -o template --template={{if (exists . "spec" "containers")}}{{range .spec.containers}}{{if eq .name "update-demo"}}{{.image}}{{end}}{{end}}{{end}}'
  Feb 20 23:48:00.275: INFO: stderr: ""
  Feb 20 23:48:00.275: INFO: stdout: "registry.k8s.io/e2e-test-images/nautilus:1.7"
  Feb 20 23:48:00.275: INFO: validating pod update-demo-nautilus-mvwkv
  Feb 20 23:48:00.278: INFO: got data: {
    "image": "nautilus.jpg"
  }

  Feb 20 23:48:00.278: INFO: Unmarshalled json jpg/img => {nautilus.jpg} , expecting nautilus.jpg .
  Feb 20 23:48:00.278: INFO: update-demo-nautilus-mvwkv is verified up and running
  STEP: using delete to clean up resources @ 02/20/24 23:48:00.278
  Feb 20 23:48:00.278: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 delete --grace-period=0 --force -f -'
  Feb 20 23:48:00.325: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 20 23:48:00.325: INFO: stdout: "replicationcontroller \"update-demo-nautilus\" force deleted\n"
  Feb 20 23:48:00.325: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get rc,svc -l name=update-demo --no-headers'
  Feb 20 23:48:00.373: INFO: stderr: "No resources found in kubectl-778 namespace.\n"
  Feb 20 23:48:00.373: INFO: stdout: ""
  Feb 20 23:48:00.373: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-778 get pods -l name=update-demo -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Feb 20 23:48:00.422: INFO: stderr: ""
  Feb 20 23:48:00.422: INFO: stdout: ""
  Feb 20 23:48:00.422: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-778" for this suite. @ 02/20/24 23:48:00.427
• [18.581 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Variable Expansion should succeed in writing subpaths in container [Slow] [Conformance]
test/e2e/common/node/expansion.go:300
  STEP: Creating a kubernetes client @ 02/20/24 23:48:00.442
  Feb 20 23:48:00.442: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/20/24 23:48:00.443
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:00.466
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:00.467
  STEP: creating the pod @ 02/20/24 23:48:00.47
  STEP: waiting for pod running @ 02/20/24 23:48:00.477
  STEP: creating a file in subpath @ 02/20/24 23:48:02.487
  Feb 20 23:48:02.494: INFO: ExecWithOptions {Command:[/bin/sh -c touch /volume_mount/mypath/foo/test.log] Namespace:var-expansion-3885 PodName:var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:48:02.494: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:48:02.495: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:48:02.495: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-3885/pods/var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01/exec?command=%2Fbin%2Fsh&command=-c&command=touch+%2Fvolume_mount%2Fmypath%2Ffoo%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: test for file in mounted path @ 02/20/24 23:48:02.605
  Feb 20 23:48:02.607: INFO: ExecWithOptions {Command:[/bin/sh -c test -f /subpath_mount/test.log] Namespace:var-expansion-3885 PodName:var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01 ContainerName:dapi-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:48:02.607: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:48:02.607: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:48:02.607: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/var-expansion-3885/pods/var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01/exec?command=%2Fbin%2Fsh&command=-c&command=test+-f+%2Fsubpath_mount%2Ftest.log&container=dapi-container&container=dapi-container&stderr=true&stdout=true)
  STEP: updating the annotation value @ 02/20/24 23:48:02.644
  Feb 20 23:48:03.176: INFO: Successfully updated pod "var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01"
  STEP: waiting for annotated pod running @ 02/20/24 23:48:03.176
  STEP: deleting the pod gracefully @ 02/20/24 23:48:03.184
  Feb 20 23:48:03.184: INFO: Deleting pod "var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01" in namespace "var-expansion-3885"
  Feb 20 23:48:03.202: INFO: Wait up to 5m0s for pod "var-expansion-f711fe8c-59d7-4df8-8bef-97faa6e62f01" to be fully deleted
  Feb 20 23:48:37.324: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-3885" for this suite. @ 02/20/24 23:48:37.333
• [36.914 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0666,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:137
  STEP: Creating a kubernetes client @ 02/20/24 23:48:37.358
  Feb 20 23:48:37.359: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:48:37.361
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:37.416
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:37.418
  STEP: Creating a pod to test emptydir 0666 on tmpfs @ 02/20/24 23:48:37.421
  STEP: Saw pod success @ 02/20/24 23:48:41.449
  Feb 20 23:48:41.455: INFO: Trying to get logs from node control-plane pod pod-0aaedec1-5aa1-4af9-bdd5-157642783c27 container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:48:41.47
  Feb 20 23:48:41.514: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-5999" for this suite. @ 02/20/24 23:48:41.519
• [4.169 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartNever pod [Conformance]
test/e2e/common/node/init_container.go:178
  STEP: Creating a kubernetes client @ 02/20/24 23:48:41.528
  Feb 20 23:48:41.528: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename init-container @ 02/20/24 23:48:41.529
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:41.548
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:41.551
  STEP: creating the pod @ 02/20/24 23:48:41.553
  Feb 20 23:48:41.553: INFO: PodSpec: initContainers in spec.initContainers
  Feb 20 23:48:46.395: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-4661" for this suite. @ 02/20/24 23:48:46.405
• [4.897 seconds]
------------------------------
S
------------------------------
[sig-node] Containers should be able to override the image's default arguments (container cmd) [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:61
  STEP: Creating a kubernetes client @ 02/20/24 23:48:46.426
  Feb 20 23:48:46.426: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename containers @ 02/20/24 23:48:46.427
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:46.444
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:46.446
  STEP: Creating a pod to test override arguments @ 02/20/24 23:48:46.449
  STEP: Saw pod success @ 02/20/24 23:48:50.471
  Feb 20 23:48:50.478: INFO: Trying to get logs from node control-plane pod client-containers-8dda12c4-ec62-4f4a-850b-9d689671a10b container agnhost-container: <nil>
  STEP: delete the pod @ 02/20/24 23:48:50.493
  Feb 20 23:48:50.539: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-4156" for this suite. @ 02/20/24 23:48:50.545
• [4.128 seconds]
------------------------------
SS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,default) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:217
  STEP: Creating a kubernetes client @ 02/20/24 23:48:50.554
  Feb 20 23:48:50.554: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/20/24 23:48:50.555
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:50.577
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:50.58
  STEP: Creating a pod to test emptydir 0777 on node default medium @ 02/20/24 23:48:50.583
  STEP: Saw pod success @ 02/20/24 23:48:54.614
  Feb 20 23:48:54.620: INFO: Trying to get logs from node control-plane pod pod-04b8ff1c-80cd-4d2a-acbc-e87e6e13b219 container test-container: <nil>
  STEP: delete the pod @ 02/20/24 23:48:54.635
  Feb 20 23:48:54.680: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1620" for this suite. @ 02/20/24 23:48:54.688
• [4.145 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should mount an API token into pods  [Conformance]
test/e2e/auth/service_accounts.go:78
  STEP: Creating a kubernetes client @ 02/20/24 23:48:54.7
  Feb 20 23:48:54.700: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/20/24 23:48:54.701
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:54.721
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:54.723
  STEP: reading a file in the container @ 02/20/24 23:48:56.748
  Feb 20 23:48:56.748: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-3034 pod-service-account-479bc288-f972-4886-8495-44aaaeb81689 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/token'
  STEP: reading a file in the container @ 02/20/24 23:48:56.868
  Feb 20 23:48:56.868: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-3034 pod-service-account-479bc288-f972-4886-8495-44aaaeb81689 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
  STEP: reading a file in the container @ 02/20/24 23:48:56.934
  Feb 20 23:48:56.934: INFO: Running '/usr/local/bin/kubectl exec --namespace=svcaccounts-3034 pod-service-account-479bc288-f972-4886-8495-44aaaeb81689 -c=test -- cat /var/run/secrets/kubernetes.io/serviceaccount/namespace'
  Feb 20 23:48:57.005: INFO: Got root ca configmap in namespace "svcaccounts-3034"
  Feb 20 23:48:57.006: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-3034" for this suite. @ 02/20/24 23:48:57.008
• [2.315 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Probing container should have monotonically increasing restart count [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:198
  STEP: Creating a kubernetes client @ 02/20/24 23:48:57.015
  Feb 20 23:48:57.015: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:48:57.016
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:48:57.031
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:48:57.033
  STEP: Creating pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436 @ 02/20/24 23:48:57.034
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:48:59.053
  Feb 20 23:48:59.059: INFO: Initial restart count of pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is 0
  Feb 20 23:48:59.066: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:01.074: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:03.084: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:05.092: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:07.096: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:09.104: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:11.112: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:13.122: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:15.130: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:17.133: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:19.152: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:19.152: INFO: Restart count of pod container-probe-9436/liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is now 1 (20.092523054s elapsed)
  Feb 20 23:49:21.159: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:23.168: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:25.176: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:27.180: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:29.190: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:31.198: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:33.207: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:35.209: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:37.217: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:39.226: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:39.226: INFO: Restart count of pod container-probe-9436/liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is now 2 (40.166798692s elapsed)
  Feb 20 23:49:41.234: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:43.243: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:45.250: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:47.258: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:49.266: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:51.270: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:53.280: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:55.288: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:57.297: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:59.299: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:49:59.299: INFO: Restart count of pod container-probe-9436/liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is now 3 (1m0.240384743s elapsed)
  Feb 20 23:50:01.307: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:03.316: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:05.325: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:07.332: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:09.336: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:11.345: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:13.348: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:15.356: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:17.365: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:19.372: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:19.372: INFO: Restart count of pod container-probe-9436/liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is now 4 (1m20.313046845s elapsed)
  Feb 20 23:50:21.380: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:23.410: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:25.418: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:27.422: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:29.430: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:31.439: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:33.449: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:35.457: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:37.467: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:39.474: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:41.482: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:43.491: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:45.500: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:47.509: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:49.518: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:51.526: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:53.539: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:55.547: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:57.557: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:50:59.564: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:01.573: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:03.581: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:05.590: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:07.592: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:09.601: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:11.609: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:13.618: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:15.626: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:17.631: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:19.639: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:21.646: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:23.653: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:25.661: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:27.671: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:29.681: INFO: Get pod liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 in namespace container-probe-9436
  Feb 20 23:51:29.681: INFO: Restart count of pod container-probe-9436/liveness-e242f30a-1688-4c0a-b2ef-f489d565d9d8 is now 5 (2m30.622327585s elapsed)
  Feb 20 23:51:29.682: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:51:29.69
  STEP: Destroying namespace "container-probe-9436" for this suite. @ 02/20/24 23:51:29.727
• [152.722 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-network] DNS should resolve DNS of partial qualified names for services [LinuxOnly] [Conformance]
test/e2e/network/dns.go:191
  STEP: Creating a kubernetes client @ 02/20/24 23:51:29.738
  Feb 20 23:51:29.738: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/20/24 23:51:29.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:51:29.758
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:51:29.76
  STEP: Creating a test headless service @ 02/20/24 23:51:29.761
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7764 A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-7764;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7764 A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-7764;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7764.svc A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-7764.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7764.svc A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-7764.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-7764.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-7764.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-7764.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-7764.svc;check="$$(dig +notcp +noall +answer +search 51.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.51_udp@PTR;check="$$(dig +tcp +noall +answer +search 51.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.51_tcp@PTR;sleep 1; done
   @ 02/20/24 23:51:29.785
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service;check="$$(dig +tcp +noall +answer +search dns-test-service A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7764 A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-7764;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7764 A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-7764;check="$$(dig +notcp +noall +answer +search dns-test-service.dns-7764.svc A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-7764.svc;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-7764.svc A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-7764.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-7764.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-7764.svc;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-7764.svc;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-7764.svc SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-7764.svc;check="$$(dig +notcp +noall +answer +search 51.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.51_udp@PTR;check="$$(dig +tcp +noall +answer +search 51.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.51_tcp@PTR;sleep 1; done
   @ 02/20/24 23:51:29.785
  STEP: creating a pod to probe DNS @ 02/20/24 23:51:29.785
  STEP: submitting the pod to kubernetes @ 02/20/24 23:51:29.785
  STEP: retrieving the pod @ 02/20/24 23:51:31.811
  STEP: looking for the results for each expected name from probers @ 02/20/24 23:51:31.818
  Feb 20 23:51:31.830: INFO: Unable to read wheezy_udp@dns-test-service from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.842: INFO: Unable to read wheezy_tcp@dns-test-service from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.848: INFO: Unable to read wheezy_udp@dns-test-service.dns-7764 from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.853: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7764 from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.857: INFO: Unable to read wheezy_udp@dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.860: INFO: Unable to read wheezy_tcp@dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.863: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.866: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.877: INFO: Unable to read jessie_udp@dns-test-service from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.882: INFO: Unable to read jessie_tcp@dns-test-service from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.885: INFO: Unable to read jessie_udp@dns-test-service.dns-7764 from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.887: INFO: Unable to read jessie_tcp@dns-test-service.dns-7764 from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.889: INFO: Unable to read jessie_udp@dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.891: INFO: Unable to read jessie_tcp@dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.893: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.895: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-7764.svc from pod dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c: the server could not find the requested resource (get pods dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c)
  Feb 20 23:51:31.906: INFO: Lookups using dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c failed for: [wheezy_udp@dns-test-service wheezy_tcp@dns-test-service wheezy_udp@dns-test-service.dns-7764 wheezy_tcp@dns-test-service.dns-7764 wheezy_udp@dns-test-service.dns-7764.svc wheezy_tcp@dns-test-service.dns-7764.svc wheezy_udp@_http._tcp.dns-test-service.dns-7764.svc wheezy_tcp@_http._tcp.dns-test-service.dns-7764.svc jessie_udp@dns-test-service jessie_tcp@dns-test-service jessie_udp@dns-test-service.dns-7764 jessie_tcp@dns-test-service.dns-7764 jessie_udp@dns-test-service.dns-7764.svc jessie_tcp@dns-test-service.dns-7764.svc jessie_udp@_http._tcp.dns-test-service.dns-7764.svc jessie_tcp@_http._tcp.dns-test-service.dns-7764.svc]

  Feb 20 23:51:31.914: INFO: Pod client logs for webserver: 
  Feb 20 23:51:31.918: INFO: Pod client logs for querier: 
  Feb 20 23:51:31.922: INFO: Pod client logs for jessie-querier: 
  Feb 20 23:51:36.983: INFO: DNS probes using dns-7764/dns-test-ef51ca18-3d8f-4b4f-9bc9-7ae02668c59c succeeded

  Feb 20 23:51:36.983: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/20/24 23:51:36.985
  STEP: deleting the test service @ 02/20/24 23:51:37.04
  STEP: deleting the test headless service @ 02/20/24 23:51:37.1
  STEP: Destroying namespace "dns-7764" for this suite. @ 02/20/24 23:51:37.127
• [7.400 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition Watch [Privileged:ClusterAdmin] CustomResourceDefinition Watch watch on custom resource definition objects [Conformance]
test/e2e/apimachinery/crd_watch.go:51
  STEP: Creating a kubernetes client @ 02/20/24 23:51:37.139
  Feb 20 23:51:37.139: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-watch @ 02/20/24 23:51:37.14
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:51:37.171
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:51:37.173
  Feb 20 23:51:37.174: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Creating first CR  @ 02/20/24 23:51:39.805
  Feb 20 23:51:39.832: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:39Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:51:39Z]] name:name1 resourceVersion:20194 uid:21c900e4-43b1-451b-a9a7-64e12530fe7d] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Creating second CR @ 02/20/24 23:51:49.834
  Feb 20 23:51:49.874: INFO: Got : ADDED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:49Z generation:1 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:51:49Z]] name:name2 resourceVersion:20229 uid:b4c74e44-0c8a-4ad3-a538-c306a99b8085] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying first CR @ 02/20/24 23:51:59.878
  Feb 20 23:51:59.903: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:39Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:51:59Z]] name:name1 resourceVersion:20246 uid:21c900e4-43b1-451b-a9a7-64e12530fe7d] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Modifying second CR @ 02/20/24 23:52:09.903
  Feb 20 23:52:09.930: INFO: Got : MODIFIED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:49Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:52:09Z]] name:name2 resourceVersion:20263 uid:b4c74e44-0c8a-4ad3-a538-c306a99b8085] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting first CR @ 02/20/24 23:52:19.932
  Feb 20 23:52:19.958: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:39Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:51:59Z]] name:name1 resourceVersion:20280 uid:21c900e4-43b1-451b-a9a7-64e12530fe7d] num:map[num1:9223372036854775807 num2:1000000]]}
  STEP: Deleting second CR @ 02/20/24 23:52:29.959
  Feb 20 23:52:29.986: INFO: Got : DELETED &{map[apiVersion:mygroup.example.com/v1beta1 content:map[key:value] dummy:test kind:WishIHadChosenNoxu metadata:map[creationTimestamp:2024-02-20T23:51:49Z generation:2 managedFields:[map[apiVersion:mygroup.example.com/v1beta1 fieldsType:FieldsV1 fieldsV1:map[f:content:map[.:map[] f:key:map[]] f:dummy:map[] f:num:map[.:map[] f:num1:map[] f:num2:map[]]] manager:e2e.test operation:Update time:2024-02-20T23:52:09Z]] name:name2 resourceVersion:20297 uid:b4c74e44-0c8a-4ad3-a538-c306a99b8085] num:map[num1:9223372036854775807 num2:1000000]]}
  Feb 20 23:52:40.521: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-watch-3658" for this suite. @ 02/20/24 23:52:40.53
• [63.412 seconds]
------------------------------
[sig-apps] Deployment deployment should delete old replica sets [Conformance]
test/e2e/apps/deployment.go:122
  STEP: Creating a kubernetes client @ 02/20/24 23:52:40.552
  Feb 20 23:52:40.552: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/20/24 23:52:40.554
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:52:40.604
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:52:40.61
  Feb 20 23:52:40.630: INFO: Pod name cleanup-pod: Found 0 pods out of 1
  Feb 20 23:52:45.639: INFO: Pod name cleanup-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/20/24 23:52:45.639
  Feb 20 23:52:45.639: INFO: Creating deployment test-cleanup-deployment
  STEP: Waiting for deployment test-cleanup-deployment history to be cleaned up @ 02/20/24 23:52:45.663
  Feb 20 23:52:45.671: INFO: Deployment "test-cleanup-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=23) "test-cleanup-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2959",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "c55ef7ad-0f00-4aa6-8857-34c714b731f2",
      ResourceVersion: (string) (len=5) "20344",
      Generation: (int64) 1,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844069965,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=11) "cleanup-pod"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844069965,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=637) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 61  67 6e 68 6f 73 74 5c 22  |me\":\"agnhost\"|
              00000160  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000170  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000180  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000190  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              000001a0  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              000001b0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001c0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              000001d0  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              000001e0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001f0  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000200  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              00000210  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              00000220  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              00000230  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              00000240  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              00000250  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000260  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000270  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=11) "cleanup-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=11) "cleanup-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(0),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 0,
      Replicas: (int32) 0,
      UpdatedReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) <nil>,
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 20 23:52:45.674: INFO: New ReplicaSet of Deployment "test-cleanup-deployment" is nil.
  Feb 20 23:52:45.676: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-2959" for this suite. @ 02/20/24 23:52:45.678
• [5.135 seconds]
------------------------------
SSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:194
  STEP: Creating a kubernetes client @ 02/20/24 23:52:45.687
  Feb 20 23:52:45.687: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:52:45.688
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:52:45.715
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:52:45.716
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:52:45.718
  STEP: Saw pod success @ 02/20/24 23:52:49.748
  Feb 20 23:52:49.755: INFO: Trying to get logs from node control-plane pod downwardapi-volume-99cf3b1e-270e-4ca5-8527-f0e3b9b4bdf2 container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:52:49.77
  Feb 20 23:52:49.813: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8065" for this suite. @ 02/20/24 23:52:49.815
• [4.134 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if not matching  [Conformance]
test/e2e/scheduling/predicates.go:444
  STEP: Creating a kubernetes client @ 02/20/24 23:52:49.822
  Feb 20 23:52:49.822: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-pred @ 02/20/24 23:52:49.822
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:52:49.835
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:52:49.837
  Feb 20 23:52:49.838: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Feb 20 23:52:49.841: INFO: Waiting for terminating namespaces to be deleted...
  Feb 20 23:52:49.843: INFO: 
  Logging pods the apiserver thinks is on node worker before test
  Feb 20 23:52:49.849: INFO: calico-node-psfx2 from kube-system started at 2024-02-20 22:52:21 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.849: INFO: 	Container calico-node ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: sonobuoy-e2e-job-f933256834384d63 from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 20 23:52:49.849: INFO: 	Container e2e ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-852jd from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 20 23:52:49.849: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: sonobuoy from sonobuoy started at 2024-02-20 23:00:07 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.849: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: coredns-864597b5fd-jrm2t from kube-system started at 2024-02-20 23:28:47 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.849: INFO: 	Container coredns ready: true, restart count 0
  Feb 20 23:52:49.849: INFO: 
  Logging pods the apiserver thinks is on node control-plane before test
  Feb 20 23:52:49.855: INFO: calico-node-8lb8x from kube-system started at 2024-02-20 22:52:26 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.855: INFO: 	Container calico-node ready: true, restart count 0
  Feb 20 23:52:49.855: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn from sonobuoy started at 2024-02-20 23:00:18 +0000 UTC (2 container statuses recorded)
  Feb 20 23:52:49.855: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 20 23:52:49.855: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 20 23:52:49.855: INFO: calico-kube-controllers-77bd7c5b-gxl5x from kube-system started at 2024-02-20 23:28:48 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.855: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Feb 20 23:52:49.855: INFO: test-cleanup-controller-cd5vd from deployment-2959 started at 2024-02-20 23:52:40 +0000 UTC (1 container statuses recorded)
  Feb 20 23:52:49.855: INFO: 	Container httpd ready: true, restart count 0
  STEP: Trying to schedule Pod with nonempty NodeSelector. @ 02/20/24 23:52:49.855
  STEP: Considering event: 
  Type = [Warning], Name = [restricted-pod.17b5b74bcec6bdca], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 node(s) didn't match Pod's node affinity/selector. preemption: 0/2 nodes are available: 2 Preemption is not helpful for scheduling..] @ 02/20/24 23:52:49.884
  Feb 20 23:52:50.878: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-2806" for this suite. @ 02/20/24 23:52:50.88
• [1.063 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Downward API volume should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:54
  STEP: Creating a kubernetes client @ 02/20/24 23:52:50.885
  Feb 20 23:52:50.885: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/20/24 23:52:50.885
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:52:50.902
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:52:50.905
  STEP: Creating a pod to test downward API volume plugin @ 02/20/24 23:52:50.906
  STEP: Saw pod success @ 02/20/24 23:52:54.928
  Feb 20 23:52:54.933: INFO: Trying to get logs from node control-plane pod downwardapi-volume-1a666f95-17f6-42e5-b6f4-2fffdce1d86e container client-container: <nil>
  STEP: delete the pod @ 02/20/24 23:52:54.941
  Feb 20 23:52:54.966: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-8696" for this suite. @ 02/20/24 23:52:54.969
• [4.090 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl expose should create services for rc  [Conformance]
test/e2e/kubectl/kubectl.go:1481
  STEP: Creating a kubernetes client @ 02/20/24 23:52:54.975
  Feb 20 23:52:54.975: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/20/24 23:52:54.976
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:52:54.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:52:54.995
  STEP: creating Agnhost RC @ 02/20/24 23:52:54.998
  Feb 20 23:52:54.998: INFO: namespace kubectl-2693
  Feb 20 23:52:54.998: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2693 create -f -'
  Feb 20 23:52:55.184: INFO: stderr: ""
  Feb 20 23:52:55.184: INFO: stdout: "replicationcontroller/agnhost-primary created\n"
  STEP: Waiting for Agnhost primary to start. @ 02/20/24 23:52:55.184
  Feb 20 23:52:56.188: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:52:56.188: INFO: Found 0 / 1
  Feb 20 23:52:57.193: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:52:57.193: INFO: Found 1 / 1
  Feb 20 23:52:57.193: INFO: WaitFor completed with timeout 5m0s.  Pods found = 1 out of 1
  Feb 20 23:52:57.199: INFO: Selector matched 1 pods for map[app:agnhost]
  Feb 20 23:52:57.199: INFO: ForEach: Found 1 pods from the filter.  Now looping through them.
  Feb 20 23:52:57.199: INFO: wait on agnhost-primary startup in kubectl-2693 
  Feb 20 23:52:57.200: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2693 logs agnhost-primary-xl8w2 agnhost-primary'
  Feb 20 23:52:57.278: INFO: stderr: ""
  Feb 20 23:52:57.278: INFO: stdout: "Paused\n"
  STEP: exposing RC @ 02/20/24 23:52:57.278
  Feb 20 23:52:57.278: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2693 expose rc agnhost-primary --name=rm2 --port=1234 --target-port=6379'
  Feb 20 23:52:57.331: INFO: stderr: ""
  Feb 20 23:52:57.331: INFO: stdout: "service/rm2 exposed\n"
  Feb 20 23:52:57.332: INFO: Service rm2 in namespace kubectl-2693 found.
  STEP: exposing service @ 02/20/24 23:52:59.336
  Feb 20 23:52:59.336: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2693 expose service rm2 --name=rm3 --port=2345 --target-port=6379'
  Feb 20 23:52:59.401: INFO: stderr: ""
  Feb 20 23:52:59.401: INFO: stdout: "service/rm3 exposed\n"
  Feb 20 23:52:59.403: INFO: Service rm3 in namespace kubectl-2693 found.
  Feb 20 23:53:01.417: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2693" for this suite. @ 02/20/24 23:53:01.424
• [6.471 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Scaling should happen in predictable order and halt if any stateful pod is unhealthy [Slow] [Conformance]
test/e2e/apps/statefulset.go:640
  STEP: Creating a kubernetes client @ 02/20/24 23:53:01.448
  Feb 20 23:53:01.448: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/20/24 23:53:01.45
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:53:01.492
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:53:01.494
  STEP: Creating service test in namespace statefulset-7892 @ 02/20/24 23:53:01.497
  STEP: Initializing watcher for selector baz=blah,foo=bar @ 02/20/24 23:53:01.504
  STEP: Creating stateful set ss in namespace statefulset-7892 @ 02/20/24 23:53:01.508
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-7892 @ 02/20/24 23:53:01.517
  Feb 20 23:53:01.519: INFO: Found 0 stateful pods, waiting for 1
  Feb 20 23:53:11.529: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will halt with unhealthy stateful pod @ 02/20/24 23:53:11.529
  Feb 20 23:53:11.536: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:53:11.656: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:53:11.656: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:53:11.656: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:53:11.658: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Feb 20 23:53:21.668: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:53:21.668: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Feb 20 23:53:21.708: INFO: Verifying statefulset ss doesn't scale past 1 for another 9.999999155s
  Feb 20 23:53:22.717: INFO: Verifying statefulset ss doesn't scale past 1 for another 8.992450691s
  Feb 20 23:53:23.725: INFO: Verifying statefulset ss doesn't scale past 1 for another 7.984300159s
  Feb 20 23:53:24.727: INFO: Verifying statefulset ss doesn't scale past 1 for another 6.975618218s
  Feb 20 23:53:25.730: INFO: Verifying statefulset ss doesn't scale past 1 for another 5.973462335s
  Feb 20 23:53:26.742: INFO: Verifying statefulset ss doesn't scale past 1 for another 4.970999869s
  Feb 20 23:53:27.750: INFO: Verifying statefulset ss doesn't scale past 1 for another 3.958493998s
  Feb 20 23:53:28.758: INFO: Verifying statefulset ss doesn't scale past 1 for another 2.950904535s
  Feb 20 23:53:29.763: INFO: Verifying statefulset ss doesn't scale past 1 for another 1.942936241s
  Feb 20 23:53:30.774: INFO: Verifying statefulset ss doesn't scale past 1 for another 937.103793ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-7892 @ 02/20/24 23:53:31.774
  Feb 20 23:53:31.783: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:53:31.900: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:53:31.900: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:53:31.900: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:53:31.902: INFO: Found 1 stateful pods, waiting for 3
  Feb 20 23:53:41.914: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:53:41.914: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:53:41.914: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Verifying that stateful set ss was scaled up in order @ 02/20/24 23:53:41.915
  STEP: Scale down will halt with unhealthy stateful pod @ 02/20/24 23:53:41.915
  Feb 20 23:53:41.936: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:53:42.051: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:53:42.051: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:53:42.051: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:53:42.051: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:53:42.128: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:53:42.128: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:53:42.128: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:53:42.128: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:53:42.203: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:53:42.203: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:53:42.203: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:53:42.203: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Feb 20 23:53:42.205: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 2
  Feb 20 23:53:52.219: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:53:52.219: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:53:52.219: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:53:52.247: INFO: Verifying statefulset ss doesn't scale past 3 for another 9.999999361s
  Feb 20 23:53:53.256: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.994127366s
  Feb 20 23:53:54.265: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.985227413s
  Feb 20 23:53:55.270: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.975306818s
  Feb 20 23:53:56.279: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.971697312s
  Feb 20 23:53:57.288: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.962220977s
  Feb 20 23:53:58.297: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.952838102s
  Feb 20 23:53:59.301: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.943885389s
  Feb 20 23:54:00.304: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.940051701s
  Feb 20 23:54:01.313: INFO: Verifying statefulset ss doesn't scale past 3 for another 937.641112ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-7892 @ 02/20/24 23:54:02.313
  Feb 20 23:54:02.324: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:02.434: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:54:02.434: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:02.434: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:02.434: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:02.506: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:54:02.506: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:02.506: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:02.506: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-7892 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:02.574: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:54:02.574: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:02.574: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:02.574: INFO: Scaling statefulset ss to 0
  STEP: Verifying that stateful set ss was scaled down in reverse order @ 02/20/24 23:54:12.593
  Feb 20 23:54:12.593: INFO: Deleting all statefulset in ns statefulset-7892
  Feb 20 23:54:12.600: INFO: Scaling statefulset ss to 0
  Feb 20 23:54:12.627: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:54:12.630: INFO: Deleting statefulset ss
  Feb 20 23:54:12.649: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-7892" for this suite. @ 02/20/24 23:54:12.651
• [71.234 seconds]
------------------------------
SS
------------------------------
[sig-network] Proxy version v1 should proxy through a service and a pod  [Conformance]
test/e2e/network/proxy.go:101
  STEP: Creating a kubernetes client @ 02/20/24 23:54:12.682
  Feb 20 23:54:12.682: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename proxy @ 02/20/24 23:54:12.682
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:54:12.701
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:54:12.703
  STEP: starting an echo server on multiple ports @ 02/20/24 23:54:12.713
  STEP: creating replication controller proxy-service-br627 in namespace proxy-4685 @ 02/20/24 23:54:12.713
  I0220 23:54:12.721159      22 runners.go:197] Created replication controller with name: proxy-service-br627, namespace: proxy-4685, replica count: 1
  I0220 23:54:13.772321      22 runners.go:197] proxy-service-br627 Pods: 1 out of 1 created, 0 running, 1 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  I0220 23:54:14.773267      22 runners.go:197] proxy-service-br627 Pods: 1 out of 1 created, 1 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 20 23:54:14.779: INFO: setup took 2.075280143s, starting test cases
  STEP: running 16 cases, 20 attempts per case, 320 total attempts @ 02/20/24 23:54:14.779
  Feb 20 23:54:14.803: INFO: (0) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 22.745656ms)
  Feb 20 23:54:14.803: INFO: (0) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 23.34775ms)
  Feb 20 23:54:14.803: INFO: (0) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 23.511204ms)
  Feb 20 23:54:14.816: INFO: (0) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 36.826011ms)
  Feb 20 23:54:14.816: INFO: (0) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 36.72104ms)
  Feb 20 23:54:14.816: INFO: (0) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 37.111572ms)
  Feb 20 23:54:14.816: INFO: (0) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 37.002576ms)
  Feb 20 23:54:14.817: INFO: (0) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 37.472792ms)
  Feb 20 23:54:14.818: INFO: (0) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 37.938883ms)
  Feb 20 23:54:14.818: INFO: (0) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 38.376282ms)
  Feb 20 23:54:14.818: INFO: (0) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 38.535037ms)
  Feb 20 23:54:14.818: INFO: (0) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 38.492867ms)
  Feb 20 23:54:14.818: INFO: (0) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 38.808319ms)
  Feb 20 23:54:14.821: INFO: (0) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 41.63833ms)
  Feb 20 23:54:14.837: INFO: (0) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 57.33251ms)
  Feb 20 23:54:14.841: INFO: (0) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 61.375903ms)
  Feb 20 23:54:14.845: INFO: (1) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 4.473843ms)
  Feb 20 23:54:14.845: INFO: (1) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.659517ms)
  Feb 20 23:54:14.847: INFO: (1) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 5.748003ms)
  Feb 20 23:54:14.847: INFO: (1) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.808393ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.989713ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 6.999724ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.034588ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.994629ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 7.109365ms)
  Feb 20 23:54:14.848: INFO: (1) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 7.529531ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 12.967332ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 12.95735ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 12.948325ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 12.979571ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 13.058499ms)
  Feb 20 23:54:14.854: INFO: (1) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 12.958687ms)
  Feb 20 23:54:14.859: INFO: (2) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.355655ms)
  Feb 20 23:54:14.859: INFO: (2) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 5.437636ms)
  Feb 20 23:54:14.859: INFO: (2) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 5.353728ms)
  Feb 20 23:54:14.860: INFO: (2) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 6.004648ms)
  Feb 20 23:54:14.861: INFO: (2) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 7.17329ms)
  Feb 20 23:54:14.861: INFO: (2) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.197169ms)
  Feb 20 23:54:14.861: INFO: (2) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 7.430754ms)
  Feb 20 23:54:14.862: INFO: (2) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 7.5831ms)
  Feb 20 23:54:14.862: INFO: (2) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.562294ms)
  Feb 20 23:54:14.862: INFO: (2) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.777062ms)
  Feb 20 23:54:14.862: INFO: (2) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.167712ms)
  Feb 20 23:54:14.863: INFO: (2) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.801951ms)
  Feb 20 23:54:14.863: INFO: (2) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.927514ms)
  Feb 20 23:54:14.863: INFO: (2) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 8.924831ms)
  Feb 20 23:54:14.863: INFO: (2) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 9.502191ms)
  Feb 20 23:54:14.864: INFO: (2) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 10.03191ms)
  Feb 20 23:54:14.867: INFO: (3) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 2.40036ms)
  Feb 20 23:54:14.868: INFO: (3) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 3.725394ms)
  Feb 20 23:54:14.868: INFO: (3) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 4.061729ms)
  Feb 20 23:54:14.868: INFO: (3) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 4.00865ms)
  Feb 20 23:54:14.869: INFO: (3) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.582148ms)
  Feb 20 23:54:14.869: INFO: (3) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 4.669503ms)
  Feb 20 23:54:14.870: INFO: (3) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 5.288985ms)
  Feb 20 23:54:14.870: INFO: (3) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 5.452265ms)
  Feb 20 23:54:14.870: INFO: (3) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 5.68654ms)
  Feb 20 23:54:14.871: INFO: (3) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 6.759082ms)
  Feb 20 23:54:14.871: INFO: (3) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 6.805704ms)
  Feb 20 23:54:14.871: INFO: (3) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.821073ms)
  Feb 20 23:54:14.871: INFO: (3) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 6.968149ms)
  Feb 20 23:54:14.872: INFO: (3) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 7.315481ms)
  Feb 20 23:54:14.872: INFO: (3) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 7.47736ms)
  Feb 20 23:54:14.873: INFO: (3) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.46436ms)
  Feb 20 23:54:14.878: INFO: (4) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 5.594226ms)
  Feb 20 23:54:14.878: INFO: (4) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 5.553227ms)
  Feb 20 23:54:14.878: INFO: (4) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 5.634097ms)
  Feb 20 23:54:14.879: INFO: (4) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 5.770942ms)
  Feb 20 23:54:14.879: INFO: (4) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 6.095978ms)
  Feb 20 23:54:14.879: INFO: (4) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.110208ms)
  Feb 20 23:54:14.880: INFO: (4) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.8029ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 7.741583ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.739814ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 7.727903ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 7.731426ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.059334ms)
  Feb 20 23:54:14.881: INFO: (4) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 8.561745ms)
  Feb 20 23:54:14.882: INFO: (4) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.813773ms)
  Feb 20 23:54:14.882: INFO: (4) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.704928ms)
  Feb 20 23:54:14.882: INFO: (4) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.896424ms)
  Feb 20 23:54:14.886: INFO: (5) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 4.244793ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.23208ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 5.228973ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 5.314722ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 5.329186ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 5.270777ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.41638ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 5.398905ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 5.458891ms)
  Feb 20 23:54:14.887: INFO: (5) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 5.627307ms)
  Feb 20 23:54:14.888: INFO: (5) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 5.933808ms)
  Feb 20 23:54:14.888: INFO: (5) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 5.989883ms)
  Feb 20 23:54:14.888: INFO: (5) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 6.665446ms)
  Feb 20 23:54:14.889: INFO: (5) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 7.027308ms)
  Feb 20 23:54:14.890: INFO: (5) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 7.800149ms)
  Feb 20 23:54:14.890: INFO: (5) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 7.884016ms)
  Feb 20 23:54:14.892: INFO: (6) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 2.561901ms)
  Feb 20 23:54:14.893: INFO: (6) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 3.146917ms)
  Feb 20 23:54:14.895: INFO: (6) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 5.224717ms)
  Feb 20 23:54:14.895: INFO: (6) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 5.60222ms)
  Feb 20 23:54:14.895: INFO: (6) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.580153ms)
  Feb 20 23:54:14.895: INFO: (6) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.576262ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.435136ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 6.56265ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 6.540399ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 6.544423ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 6.483959ms)
  Feb 20 23:54:14.896: INFO: (6) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 6.62744ms)
  Feb 20 23:54:14.897: INFO: (6) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.849277ms)
  Feb 20 23:54:14.897: INFO: (6) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 7.743861ms)
  Feb 20 23:54:14.897: INFO: (6) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 7.710545ms)
  Feb 20 23:54:14.898: INFO: (6) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 7.956723ms)
  Feb 20 23:54:14.902: INFO: (7) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.622762ms)
  Feb 20 23:54:14.903: INFO: (7) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.904441ms)
  Feb 20 23:54:14.903: INFO: (7) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 4.861863ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 5.651886ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.218542ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.171839ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 6.643775ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 6.313471ms)
  Feb 20 23:54:14.904: INFO: (7) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.405137ms)
  Feb 20 23:54:14.905: INFO: (7) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 6.891475ms)
  Feb 20 23:54:14.905: INFO: (7) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.709322ms)
  Feb 20 23:54:14.907: INFO: (7) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.971216ms)
  Feb 20 23:54:14.907: INFO: (7) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.973952ms)
  Feb 20 23:54:14.907: INFO: (7) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 9.088107ms)
  Feb 20 23:54:14.907: INFO: (7) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 9.015489ms)
  Feb 20 23:54:14.907: INFO: (7) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.903533ms)
  Feb 20 23:54:14.911: INFO: (8) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 4.053452ms)
  Feb 20 23:54:14.911: INFO: (8) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 4.130123ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.314824ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 4.382911ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.837023ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 4.956759ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.943307ms)
  Feb 20 23:54:14.912: INFO: (8) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 4.927512ms)
  Feb 20 23:54:14.914: INFO: (8) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 6.676444ms)
  Feb 20 23:54:14.914: INFO: (8) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 6.755901ms)
  Feb 20 23:54:14.914: INFO: (8) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 6.643721ms)
  Feb 20 23:54:14.914: INFO: (8) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 6.684457ms)
  Feb 20 23:54:14.914: INFO: (8) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.012904ms)
  Feb 20 23:54:14.915: INFO: (8) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 7.760125ms)
  Feb 20 23:54:14.915: INFO: (8) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 7.977233ms)
  Feb 20 23:54:14.915: INFO: (8) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.198369ms)
  Feb 20 23:54:14.919: INFO: (9) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 3.962311ms)
  Feb 20 23:54:14.920: INFO: (9) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.691712ms)
  Feb 20 23:54:14.921: INFO: (9) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 5.730568ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 7.558508ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.48381ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.489686ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 7.562571ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 7.602786ms)
  Feb 20 23:54:14.923: INFO: (9) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.696358ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 8.199424ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 8.219982ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.25047ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.457409ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.415239ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.629784ms)
  Feb 20 23:54:14.924: INFO: (9) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.660006ms)
  Feb 20 23:54:14.928: INFO: (10) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 4.101172ms)
  Feb 20 23:54:14.928: INFO: (10) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 4.187367ms)
  Feb 20 23:54:14.929: INFO: (10) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.568913ms)
  Feb 20 23:54:14.929: INFO: (10) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.857059ms)
  Feb 20 23:54:14.930: INFO: (10) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 5.767723ms)
  Feb 20 23:54:14.930: INFO: (10) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.644721ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.475076ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.864007ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 7.878574ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 7.914813ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 7.915269ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.135727ms)
  Feb 20 23:54:14.932: INFO: (10) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 8.141182ms)
  Feb 20 23:54:14.933: INFO: (10) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.574422ms)
  Feb 20 23:54:14.933: INFO: (10) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.651369ms)
  Feb 20 23:54:14.933: INFO: (10) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.767583ms)
  Feb 20 23:54:14.937: INFO: (11) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.334714ms)
  Feb 20 23:54:14.940: INFO: (11) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.89026ms)
  Feb 20 23:54:14.941: INFO: (11) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 7.765333ms)
  Feb 20 23:54:14.944: INFO: (11) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 11.214795ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 11.408939ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 11.418903ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 11.542229ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 11.737919ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 11.84422ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 12.125395ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 12.131345ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 12.068906ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 12.218249ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 12.316959ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 12.175691ms)
  Feb 20 23:54:14.945: INFO: (11) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 12.100669ms)
  Feb 20 23:54:14.949: INFO: (12) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 3.586591ms)
  Feb 20 23:54:14.950: INFO: (12) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.401369ms)
  Feb 20 23:54:14.950: INFO: (12) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.596485ms)
  Feb 20 23:54:14.951: INFO: (12) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 5.886463ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.231019ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.322589ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.27844ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.387488ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 6.293769ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 6.389246ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 6.350763ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 6.421318ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 6.623489ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 6.678067ms)
  Feb 20 23:54:14.952: INFO: (12) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 6.692738ms)
  Feb 20 23:54:14.953: INFO: (12) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 7.070537ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.800732ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 4.974768ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.879668ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.911171ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.384991ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 5.698892ms)
  Feb 20 23:54:14.958: INFO: (13) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 5.802321ms)
  Feb 20 23:54:14.959: INFO: (13) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 6.098446ms)
  Feb 20 23:54:14.959: INFO: (13) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 6.068888ms)
  Feb 20 23:54:14.959: INFO: (13) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.382747ms)
  Feb 20 23:54:14.959: INFO: (13) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.618971ms)
  Feb 20 23:54:14.961: INFO: (13) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.002963ms)
  Feb 20 23:54:14.961: INFO: (13) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 7.907117ms)
  Feb 20 23:54:14.961: INFO: (13) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.006047ms)
  Feb 20 23:54:14.961: INFO: (13) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.146572ms)
  Feb 20 23:54:14.961: INFO: (13) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.229802ms)
  Feb 20 23:54:14.964: INFO: (14) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 3.308963ms)
  Feb 20 23:54:14.965: INFO: (14) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 3.784003ms)
  Feb 20 23:54:14.965: INFO: (14) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 3.801273ms)
  Feb 20 23:54:14.969: INFO: (14) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 8.111747ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 8.270814ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 8.244997ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 8.233157ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.186513ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 8.444396ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.507353ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 8.427587ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 8.410279ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.487217ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 8.389928ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.466144ms)
  Feb 20 23:54:14.970: INFO: (14) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 8.472122ms)
  Feb 20 23:54:14.975: INFO: (15) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 5.410423ms)
  Feb 20 23:54:14.976: INFO: (15) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 5.553472ms)
  Feb 20 23:54:14.976: INFO: (15) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 5.791624ms)
  Feb 20 23:54:14.976: INFO: (15) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 5.753268ms)
  Feb 20 23:54:14.976: INFO: (15) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.138509ms)
  Feb 20 23:54:14.977: INFO: (15) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 6.568668ms)
  Feb 20 23:54:14.977: INFO: (15) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.422366ms)
  Feb 20 23:54:14.977: INFO: (15) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 7.197303ms)
  Feb 20 23:54:14.977: INFO: (15) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.253923ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 7.607018ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 7.722475ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 7.725949ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 8.140315ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 8.111123ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 8.110498ms)
  Feb 20 23:54:14.978: INFO: (15) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 8.335813ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.459ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 6.563218ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.375952ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.328658ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 6.381411ms)
  Feb 20 23:54:14.985: INFO: (16) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.714924ms)
  Feb 20 23:54:14.987: INFO: (16) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 8.584272ms)
  Feb 20 23:54:14.987: INFO: (16) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 8.492799ms)
  Feb 20 23:54:14.987: INFO: (16) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 8.3715ms)
  Feb 20 23:54:14.987: INFO: (16) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 8.687164ms)
  Feb 20 23:54:14.988: INFO: (16) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 8.766527ms)
  Feb 20 23:54:14.988: INFO: (16) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 9.281516ms)
  Feb 20 23:54:14.988: INFO: (16) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 9.583669ms)
  Feb 20 23:54:14.988: INFO: (16) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 9.541689ms)
  Feb 20 23:54:14.988: INFO: (16) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 9.703614ms)
  Feb 20 23:54:14.989: INFO: (16) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 9.73172ms)
  Feb 20 23:54:14.993: INFO: (17) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 4.744226ms)
  Feb 20 23:54:14.993: INFO: (17) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 4.716542ms)
  Feb 20 23:54:14.994: INFO: (17) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.554448ms)
  Feb 20 23:54:14.995: INFO: (17) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 5.882465ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.3903ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 7.362766ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.293015ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 7.24289ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 7.22809ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 7.170767ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 7.144705ms)
  Feb 20 23:54:14.996: INFO: (17) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 7.603127ms)
  Feb 20 23:54:14.997: INFO: (17) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 7.761138ms)
  Feb 20 23:54:14.997: INFO: (17) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 7.692767ms)
  Feb 20 23:54:14.997: INFO: (17) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 7.609085ms)
  Feb 20 23:54:14.997: INFO: (17) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 7.899597ms)
  Feb 20 23:54:15.001: INFO: (18) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 4.321751ms)
  Feb 20 23:54:15.001: INFO: (18) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 4.458271ms)
  Feb 20 23:54:15.001: INFO: (18) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 4.702755ms)
  Feb 20 23:54:15.001: INFO: (18) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 4.841407ms)
  Feb 20 23:54:15.003: INFO: (18) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 6.370351ms)
  Feb 20 23:54:15.003: INFO: (18) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 6.758962ms)
  Feb 20 23:54:15.003: INFO: (18) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.608883ms)
  Feb 20 23:54:15.004: INFO: (18) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 7.185606ms)
  Feb 20 23:54:15.004: INFO: (18) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 7.364786ms)
  Feb 20 23:54:15.004: INFO: (18) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.331055ms)
  Feb 20 23:54:15.004: INFO: (18) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 7.540927ms)
  Feb 20 23:54:15.007: INFO: (18) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 9.911263ms)
  Feb 20 23:54:15.007: INFO: (18) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 10.265264ms)
  Feb 20 23:54:15.007: INFO: (18) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 10.440489ms)
  Feb 20 23:54:15.007: INFO: (18) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 10.583326ms)
  Feb 20 23:54:15.007: INFO: (18) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 10.463105ms)
  Feb 20 23:54:15.011: INFO: (19) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:162/proxy/: bar (200; 3.673688ms)
  Feb 20 23:54:15.013: INFO: (19) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:460/proxy/: tls baz (200; 5.148205ms)
  Feb 20 23:54:15.013: INFO: (19) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:160/proxy/: foo (200; 5.787272ms)
  Feb 20 23:54:15.014: INFO: (19) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:1080/proxy/rewriteme">... (200; 6.177472ms)
  Feb 20 23:54:15.014: INFO: (19) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:462/proxy/: tls qux (200; 6.168681ms)
  Feb 20 23:54:15.014: INFO: (19) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp/proxy/rewriteme">test</a> (200; 6.119782ms)
  Feb 20 23:54:15.014: INFO: (19) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:1080/proxy/rewriteme">test<... (200; 6.099729ms)
  Feb 20 23:54:15.014: INFO: (19) /api/v1/namespaces/proxy-4685/pods/http:proxy-service-br627-k4gpp:160/proxy/: foo (200; 6.537166ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname2/proxy/: bar (200; 9.21759ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/pods/proxy-service-br627-k4gpp:162/proxy/: bar (200; 9.368336ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname2/proxy/: tls qux (200; 9.495302ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/https:proxy-service-br627:tlsportname1/proxy/: tls baz (200; 9.882099ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/proxy-service-br627:portname1/proxy/: foo (200; 9.653586ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname1/proxy/: foo (200; 9.870421ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/services/http:proxy-service-br627:portname2/proxy/: bar (200; 9.983871ms)
  Feb 20 23:54:15.017: INFO: (19) /api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/: <a href="/api/v1/namespaces/proxy-4685/pods/https:proxy-service-br627-k4gpp:443/proxy/tlsrewritem... (200; 9.959037ms)
  Feb 20 23:54:15.017: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController proxy-service-br627 in namespace proxy-4685, will wait for the garbage collector to delete the pods @ 02/20/24 23:54:15.02
  Feb 20 23:54:15.078: INFO: Deleting ReplicationController proxy-service-br627 took: 7.006202ms
  Feb 20 23:54:15.179: INFO: Terminating ReplicationController proxy-service-br627 pods took: 100.245158ms
  STEP: Destroying namespace "proxy-4685" for this suite. @ 02/20/24 23:54:17.179
• [4.503 seconds]
------------------------------
[sig-node] ConfigMap should be consumable via environment variable [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:45
  STEP: Creating a kubernetes client @ 02/20/24 23:54:17.186
  Feb 20 23:54:17.186: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/20/24 23:54:17.186
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:54:17.208
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:54:17.21
  STEP: Creating configMap configmap-2043/configmap-test-4b40e66e-971c-425a-b22e-5bcb4de49bfb @ 02/20/24 23:54:17.212
  STEP: Creating a pod to test consume configMaps @ 02/20/24 23:54:17.217
  STEP: Saw pod success @ 02/20/24 23:54:21.239
  Feb 20 23:54:21.247: INFO: Trying to get logs from node control-plane pod pod-configmaps-af1cd047-2803-4e6d-98ad-02a9432b3750 container env-test: <nil>
  STEP: delete the pod @ 02/20/24 23:54:21.262
  Feb 20 23:54:21.308: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2043" for this suite. @ 02/20/24 23:54:21.316
• [4.147 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should be consumable from pods in env vars [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:46
  STEP: Creating a kubernetes client @ 02/20/24 23:54:21.334
  Feb 20 23:54:21.334: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/20/24 23:54:21.335
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:54:21.36
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:54:21.364
  STEP: Creating secret with name secret-test-667c24db-81d5-4bb7-828d-2ebfd25cc915 @ 02/20/24 23:54:21.366
  STEP: Creating a pod to test consume secrets @ 02/20/24 23:54:21.372
  STEP: Saw pod success @ 02/20/24 23:54:25.396
  Feb 20 23:54:25.400: INFO: Trying to get logs from node control-plane pod pod-secrets-c9a2d343-6fe9-4d7b-ab27-c9cfc9a1424f container secret-env-test: <nil>
  STEP: delete the pod @ 02/20/24 23:54:25.407
  Feb 20 23:54:25.436: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9632" for this suite. @ 02/20/24 23:54:25.441
• [4.116 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should be able to update and delete ResourceQuota. [Conformance]
test/e2e/apimachinery/resource_quota.go:887
  STEP: Creating a kubernetes client @ 02/20/24 23:54:25.456
  Feb 20 23:54:25.456: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/20/24 23:54:25.457
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:54:25.476
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:54:25.478
  STEP: Creating a ResourceQuota @ 02/20/24 23:54:25.479
  STEP: Getting a ResourceQuota @ 02/20/24 23:54:25.486
  STEP: Updating a ResourceQuota @ 02/20/24 23:54:25.488
  STEP: Verifying a ResourceQuota was modified @ 02/20/24 23:54:25.497
  STEP: Deleting a ResourceQuota @ 02/20/24 23:54:25.499
  STEP: Verifying the deleted ResourceQuota @ 02/20/24 23:54:25.509
  Feb 20 23:54:25.511: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-6596" for this suite. @ 02/20/24 23:54:25.513
• [0.064 seconds]
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] Burst scaling should run to completion even with unhealthy pods [Slow] [Conformance]
test/e2e/apps/statefulset.go:750
  STEP: Creating a kubernetes client @ 02/20/24 23:54:25.52
  Feb 20 23:54:25.520: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/20/24 23:54:25.52
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:54:25.537
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:54:25.539
  STEP: Creating service test in namespace statefulset-1085 @ 02/20/24 23:54:25.54
  STEP: Creating stateful set ss in namespace statefulset-1085 @ 02/20/24 23:54:25.545
  STEP: Waiting until all stateful set ss replicas will be running in namespace statefulset-1085 @ 02/20/24 23:54:25.551
  Feb 20 23:54:25.553: INFO: Found 0 stateful pods, waiting for 1
  Feb 20 23:54:35.561: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Confirming that stateful set scale up will not halt with unhealthy stateful pod @ 02/20/24 23:54:35.561
  Feb 20 23:54:35.568: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:54:35.688: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:54:35.688: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:54:35.688: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:54:35.690: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=true
  Feb 20 23:54:45.698: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:54:45.698: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Feb 20 23:54:45.724: INFO: POD   NODE           PHASE    GRACE  CONDITIONS
  Feb 20 23:54:45.724: INFO: ss-0  control-plane  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:36 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:36 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC  }]
  Feb 20 23:54:45.724: INFO: 
  Feb 20 23:54:45.724: INFO: StatefulSet ss has not reached scale 3, at 1
  Feb 20 23:54:46.734: INFO: Verifying statefulset ss doesn't scale past 3 for another 8.993916577s
  Feb 20 23:54:47.743: INFO: Verifying statefulset ss doesn't scale past 3 for another 7.984423278s
  Feb 20 23:54:48.752: INFO: Verifying statefulset ss doesn't scale past 3 for another 6.975593729s
  Feb 20 23:54:49.761: INFO: Verifying statefulset ss doesn't scale past 3 for another 5.966218327s
  Feb 20 23:54:50.770: INFO: Verifying statefulset ss doesn't scale past 3 for another 4.956946221s
  Feb 20 23:54:51.780: INFO: Verifying statefulset ss doesn't scale past 3 for another 3.947995668s
  Feb 20 23:54:52.789: INFO: Verifying statefulset ss doesn't scale past 3 for another 2.938264739s
  Feb 20 23:54:53.798: INFO: Verifying statefulset ss doesn't scale past 3 for another 1.929347388s
  Feb 20 23:54:54.808: INFO: Verifying statefulset ss doesn't scale past 3 for another 919.524732ms
  STEP: Scaling up stateful set ss to 3 replicas and waiting until all of them will be running in namespace statefulset-1085 @ 02/20/24 23:54:55.808
  Feb 20 23:54:55.815: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-0 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:55.963: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\n"
  Feb 20 23:54:55.963: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:55.963: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-0: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:55.963: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-2 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:56.059: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Feb 20 23:54:56.059: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:56.059: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-2: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:56.059: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-1 -- /bin/sh -x -c mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true'
  Feb 20 23:54:56.132: INFO: stderr: "+ mv -v /tmp/index.html /usr/local/apache2/htdocs/\nmv: can't rename '/tmp/index.html': No such file or directory\n+ true\n"
  Feb 20 23:54:56.132: INFO: stdout: "'/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'\n"
  Feb 20 23:54:56.132: INFO: stdout of mv -v /tmp/index.html /usr/local/apache2/htdocs/ || true on ss-1: '/tmp/index.html' -> '/usr/local/apache2/htdocs/index.html'

  Feb 20 23:54:56.134: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=false
  Feb 20 23:55:06.145: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:55:06.145: INFO: Waiting for pod ss-1 to enter Running - Ready=true, currently Running - Ready=true
  Feb 20 23:55:06.145: INFO: Waiting for pod ss-2 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Scale down will not halt with unhealthy stateful pod @ 02/20/24 23:55:06.145
  Feb 20 23:55:06.153: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-2 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:55:06.291: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:55:06.291: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:55:06.291: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-2: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:55:06.291: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-1 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:55:06.361: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:55:06.361: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:55:06.361: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-1: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:55:06.361: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=statefulset-1085 exec ss-0 -- /bin/sh -x -c mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true'
  Feb 20 23:55:06.436: INFO: stderr: "+ mv -v /usr/local/apache2/htdocs/index.html /tmp/\n"
  Feb 20 23:55:06.436: INFO: stdout: "'/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'\n"
  Feb 20 23:55:06.436: INFO: stdout of mv -v /usr/local/apache2/htdocs/index.html /tmp/ || true on ss-0: '/usr/local/apache2/htdocs/index.html' -> '/tmp/index.html'

  Feb 20 23:55:06.436: INFO: Waiting for statefulset status.readyReplicas updated to 0
  Feb 20 23:55:06.437: INFO: Waiting for statefulset status.readyReplicas to become 0, currently 3
  Feb 20 23:55:16.455: INFO: Waiting for pod ss-0 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:55:16.455: INFO: Waiting for pod ss-1 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:55:16.455: INFO: Waiting for pod ss-2 to enter Running - Ready=false, currently Running - Ready=false
  Feb 20 23:55:16.489: INFO: POD   NODE           PHASE    GRACE  CONDITIONS
  Feb 20 23:55:16.489: INFO: ss-2  worker         Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:45 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:45 +0000 UTC  }]
  Feb 20 23:55:16.489: INFO: ss-0  control-plane  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC  }]
  Feb 20 23:55:16.489: INFO: ss-1  control-plane  Running         [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:45 +0000 UTC  } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC ContainersNotReady containers with unready status: [webserver]} {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:45 +0000 UTC  }]
  Feb 20 23:55:16.489: INFO: 
  Feb 20 23:55:16.489: INFO: StatefulSet ss has not reached scale 0, at 3
  Feb 20 23:55:17.497: INFO: POD   NODE           PHASE      GRACE  CONDITIONS
  Feb 20 23:55:17.497: INFO: ss-0  control-plane  Succeeded  30s    [{Initialized True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC PodCompleted } {Ready False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC PodCompleted } {ContainersReady False 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:55:07 +0000 UTC PodCompleted } {PodScheduled True 0001-01-01 00:00:00 +0000 UTC 2024-02-20 23:54:25 +0000 UTC  }]
  Feb 20 23:55:17.498: INFO: 
  Feb 20 23:55:17.498: INFO: StatefulSet ss has not reached scale 0, at 1
  Feb 20 23:55:18.507: INFO: Verifying statefulset ss doesn't scale past 0 for another 7.983282077s
  Feb 20 23:55:19.518: INFO: Verifying statefulset ss doesn't scale past 0 for another 6.973211692s
  Feb 20 23:55:20.530: INFO: Verifying statefulset ss doesn't scale past 0 for another 5.962065605s
  Feb 20 23:55:21.540: INFO: Verifying statefulset ss doesn't scale past 0 for another 4.951038708s
  Feb 20 23:55:22.550: INFO: Verifying statefulset ss doesn't scale past 0 for another 3.940525434s
  Feb 20 23:55:23.566: INFO: Verifying statefulset ss doesn't scale past 0 for another 2.930066125s
  Feb 20 23:55:24.576: INFO: Verifying statefulset ss doesn't scale past 0 for another 1.914882013s
  Feb 20 23:55:25.586: INFO: Verifying statefulset ss doesn't scale past 0 for another 904.670993ms
  STEP: Scaling down stateful set ss to 0 replicas and waiting until none of pods will run in namespacestatefulset-1085 @ 02/20/24 23:55:26.587
  Feb 20 23:55:26.598: INFO: Scaling statefulset ss to 0
  Feb 20 23:55:26.624: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:55:26.631: INFO: Deleting all statefulset in ns statefulset-1085
  Feb 20 23:55:26.637: INFO: Scaling statefulset ss to 0
  Feb 20 23:55:26.657: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 20 23:55:26.660: INFO: Deleting statefulset ss
  Feb 20 23:55:26.681: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-1085" for this suite. @ 02/20/24 23:55:26.684
• [61.173 seconds]
------------------------------
SS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] should update the ephemeral containers in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:98
  STEP: Creating a kubernetes client @ 02/20/24 23:55:26.693
  Feb 20 23:55:26.693: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 02/20/24 23:55:26.694
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:26.711
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:26.713
  STEP: creating a target pod @ 02/20/24 23:55:26.715
  STEP: adding an ephemeral container @ 02/20/24 23:55:28.742
  STEP: checking pod container endpoints @ 02/20/24 23:55:32.81
  Feb 20 23:55:32.810: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-9341 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:55:32.810: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:55:32.812: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:55:32.812: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-9341/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Feb 20 23:55:32.925: INFO: Exec stderr: ""
  STEP: checking pod "ephemeral-containers-target-pod" has only one ephemeralcontainer @ 02/20/24 23:55:32.93
  STEP: adding another ephemeralcontainer to pod "ephemeral-containers-target-pod" @ 02/20/24 23:55:32.933
  STEP: checking pod "ephemeral-containers-target-pod" has only two ephemeralcontainers @ 02/20/24 23:55:32.945
  Feb 20 23:55:32.948: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-9341" for this suite. @ 02/20/24 23:55:32.951
• [6.264 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Projected secret optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:215
  STEP: Creating a kubernetes client @ 02/20/24 23:55:32.957
  Feb 20 23:55:32.957: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/20/24 23:55:32.958
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:32.973
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:32.974
  STEP: Creating secret with name s-test-opt-del-aff9b624-c54f-43fb-8239-9b6dd0200a88 @ 02/20/24 23:55:32.977
  STEP: Creating secret with name s-test-opt-upd-aa9789e8-612c-4dc0-855d-e3e4b5a3944e @ 02/20/24 23:55:32.982
  STEP: Creating the pod @ 02/20/24 23:55:32.988
  STEP: Deleting secret s-test-opt-del-aff9b624-c54f-43fb-8239-9b6dd0200a88 @ 02/20/24 23:55:35.06
  STEP: Updating secret s-test-opt-upd-aa9789e8-612c-4dc0-855d-e3e4b5a3944e @ 02/20/24 23:55:35.079
  STEP: Creating secret with name s-test-opt-create-e35fd2bd-b99b-43aa-978a-0638cac900c6 @ 02/20/24 23:55:35.093
  STEP: waiting to observe update in volume @ 02/20/24 23:55:35.108
  Feb 20 23:55:37.137: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6699" for this suite. @ 02/20/24 23:55:37.139
• [4.189 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition getting/updating/patching custom resource definition status sub-resource works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:145
  STEP: Creating a kubernetes client @ 02/20/24 23:55:37.146
  Feb 20 23:55:37.147: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename custom-resource-definition @ 02/20/24 23:55:37.148
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:37.161
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:37.163
  Feb 20 23:55:37.166: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:55:37.707: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-6089" for this suite. @ 02/20/24 23:55:37.71
• [0.617 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should apply changes to a job status [Conformance]
test/e2e/apps/job.go:642
  STEP: Creating a kubernetes client @ 02/20/24 23:55:37.765
  Feb 20 23:55:37.765: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/20/24 23:55:37.767
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:37.801
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:37.804
  STEP: Creating a job @ 02/20/24 23:55:37.806
  STEP: Ensure pods equal to parallelism count is attached to the job @ 02/20/24 23:55:37.813
  STEP: patching /status @ 02/20/24 23:55:39.823
  STEP: updating /status @ 02/20/24 23:55:39.848
  STEP: get /status @ 02/20/24 23:55:39.857
  Feb 20 23:55:39.861: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-1228" for this suite. @ 02/20/24 23:55:39.865
• [2.110 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should update pod when spec was updated and update strategy is RollingUpdate [Conformance]
test/e2e/apps/daemon_set.go:385
  STEP: Creating a kubernetes client @ 02/20/24 23:55:39.878
  Feb 20 23:55:39.878: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/20/24 23:55:39.879
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:39.905
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:39.909
  Feb 20 23:55:39.934: INFO: Creating simple daemon set daemon-set
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/20/24 23:55:39.942
  Feb 20 23:55:39.948: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:55:39.948: INFO: Node control-plane is running 0 daemon pod, expected 1
  Feb 20 23:55:40.971: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:55:40.971: INFO: Node control-plane is running 0 daemon pod, expected 1
  Feb 20 23:55:41.964: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 20 23:55:41.964: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Update daemon pods image. @ 02/20/24 23:55:41.99
  STEP: Check that daemon pods images are updated. @ 02/20/24 23:55:42.02
  Feb 20 23:55:42.024: INFO: Wrong image for pod: daemon-set-qf7gb. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Feb 20 23:55:42.024: INFO: Wrong image for pod: daemon-set-fbk64. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Feb 20 23:55:43.037: INFO: Wrong image for pod: daemon-set-fbk64. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Feb 20 23:55:44.032: INFO: Wrong image for pod: daemon-set-fbk64. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Feb 20 23:55:44.032: INFO: Pod daemon-set-s2wtq is not available
  Feb 20 23:55:45.031: INFO: Wrong image for pod: daemon-set-fbk64. Expected: registry.k8s.io/e2e-test-images/agnhost:2.45, got: registry.k8s.io/e2e-test-images/httpd:2.4.38-4.
  Feb 20 23:55:45.031: INFO: Pod daemon-set-s2wtq is not available
  Feb 20 23:55:47.038: INFO: Pod daemon-set-n6nx8 is not available
  STEP: Check that daemon pods are still running on every node of the cluster. @ 02/20/24 23:55:47.05
  Feb 20 23:55:47.067: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 20 23:55:47.067: INFO: Node control-plane is running 0 daemon pod, expected 1
  Feb 20 23:55:48.085: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 20 23:55:48.085: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 02/20/24 23:55:48.111
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-8003, will wait for the garbage collector to delete the pods @ 02/20/24 23:55:48.111
  Feb 20 23:55:48.183: INFO: Deleting DaemonSet.extensions daemon-set took: 18.735549ms
  Feb 20 23:55:48.284: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.863407ms
  Feb 20 23:55:50.696: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 20 23:55:50.696: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 20 23:55:50.713: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"21658"},"items":null}

  Feb 20 23:55:50.715: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"21658"},"items":null}

  Feb 20 23:55:50.719: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-8003" for this suite. @ 02/20/24 23:55:50.721
• [10.849 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] Watchers should observe add, update, and delete watch notifications on configmaps [Conformance]
test/e2e/apimachinery/watch.go:60
  STEP: Creating a kubernetes client @ 02/20/24 23:55:50.727
  Feb 20 23:55:50.727: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename watch @ 02/20/24 23:55:50.727
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:55:50.744
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:55:50.747
  STEP: creating a watch on configmaps with label A @ 02/20/24 23:55:50.748
  STEP: creating a watch on configmaps with label B @ 02/20/24 23:55:50.749
  STEP: creating a watch on configmaps with label A or B @ 02/20/24 23:55:50.749
  STEP: creating a configmap with label A and ensuring the correct watchers observe the notification @ 02/20/24 23:55:50.749
  Feb 20 23:55:50.756: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21665 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:55:50.756: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21665 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A and ensuring the correct watchers observe the notification @ 02/20/24 23:55:50.757
  Feb 20 23:55:50.763: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21666 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:55:50.763: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21666 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying configmap A again and ensuring the correct watchers observe the notification @ 02/20/24 23:55:50.763
  Feb 20 23:55:50.771: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21667 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:55:50.772: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21667 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap A and ensuring the correct watchers observe the notification @ 02/20/24 23:55:50.772
  Feb 20 23:55:50.777: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21668 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:55:50.777: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-a  watch-36  433cc554-45b0-4fa8-9dd8-cbc2a59c6754 21668 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-A] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: creating a configmap with label B and ensuring the correct watchers observe the notification @ 02/20/24 23:55:50.777
  Feb 20 23:55:50.782: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-36  ee5125e8-1797-45ca-b4ac-ed98ddfc25fa 21669 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:55:50.782: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-36  ee5125e8-1797-45ca-b4ac-ed98ddfc25fa 21669 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: deleting configmap B and ensuring the correct watchers observe the notification @ 02/20/24 23:56:00.782
  Feb 20 23:56:00.802: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-36  ee5125e8-1797-45ca-b4ac-ed98ddfc25fa 21714 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:56:00.802: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-configmap-b  watch-36  ee5125e8-1797-45ca-b4ac-ed98ddfc25fa 21714 0 2024-02-20 23:55:50 +0000 UTC <nil> <nil> map[watch-this-configmap:multiple-watchers-B] map[] [] [] [{e2e.test Update v1 2024-02-20 23:55:50 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 20 23:56:10.803: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-36" for this suite. @ 02/20/24 23:56:10.812
• [20.103 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate configmap [Conformance]
test/e2e/apimachinery/webhook.go:250
  STEP: Creating a kubernetes client @ 02/20/24 23:56:10.832
  Feb 20 23:56:10.832: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/20/24 23:56:10.834
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:10.873
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:10.876
  STEP: Setting up server cert @ 02/20/24 23:56:10.9
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/20/24 23:56:11.308
  STEP: Deploying the webhook pod @ 02/20/24 23:56:11.317
  STEP: Wait for the deployment to be ready @ 02/20/24 23:56:11.334
  Feb 20 23:56:11.339: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  STEP: Deploying the webhook service @ 02/20/24 23:56:13.344
  STEP: Verifying the service has paired with the endpoint @ 02/20/24 23:56:13.355
  Feb 20 23:56:14.355: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the mutating configmap webhook via the AdmissionRegistration API @ 02/20/24 23:56:14.368
  STEP: create a configmap that should be updated by the webhook @ 02/20/24 23:56:14.414
  Feb 20 23:56:14.452: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-7486" for this suite. @ 02/20/24 23:56:14.533
  STEP: Destroying namespace "webhook-markers-2112" for this suite. @ 02/20/24 23:56:14.542
• [3.718 seconds]
------------------------------
SSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with absolute path [Slow] [Conformance]
test/e2e/common/node/expansion.go:189
  STEP: Creating a kubernetes client @ 02/20/24 23:56:14.549
  Feb 20 23:56:14.549: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/20/24 23:56:14.55
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:14.563
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:14.565
  Feb 20 23:56:16.627: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:56:16.629: INFO: Deleting pod "var-expansion-3d20a4a7-481a-4c34-849a-d1ffc426162d" in namespace "var-expansion-8448"
  Feb 20 23:56:16.636: INFO: Wait up to 5m0s for pod "var-expansion-3d20a4a7-481a-4c34-849a-d1ffc426162d" to be fully deleted
  STEP: Destroying namespace "var-expansion-8448" for this suite. @ 02/20/24 23:56:20.654
• [6.163 seconds]
------------------------------
S
------------------------------
[sig-apps] DisruptionController should observe PodDisruptionBudget status updated [Conformance]
test/e2e/apps/disruption.go:141
  STEP: Creating a kubernetes client @ 02/20/24 23:56:20.712
  Feb 20 23:56:20.712: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption @ 02/20/24 23:56:20.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:20.764
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:20.77
  STEP: Waiting for the pdb to be processed @ 02/20/24 23:56:20.791
  STEP: Waiting for all pods to be running @ 02/20/24 23:56:22.873
  Feb 20 23:56:22.880: INFO: running pods: 0 < 3
  Feb 20 23:56:26.906: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-7595" for this suite. @ 02/20/24 23:56:26.914
• [6.227 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute poststart http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:168
  STEP: Creating a kubernetes client @ 02/20/24 23:56:26.941
  Feb 20 23:56:26.941: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 02/20/24 23:56:26.943
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:26.993
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:27.004
  STEP: create the container to handle the HTTPGet hook request. @ 02/20/24 23:56:27.013
  STEP: create the pod with lifecycle hook @ 02/20/24 23:56:29.041
  STEP: check poststart hook @ 02/20/24 23:56:31.086
  STEP: delete the pod with lifecycle hook @ 02/20/24 23:56:31.119
  Feb 20 23:56:35.167: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-2893" for this suite. @ 02/20/24 23:56:35.172
• [8.246 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-network] DNS should support configurable pod DNS nameservers [Conformance]
test/e2e/network/dns.go:407
  STEP: Creating a kubernetes client @ 02/20/24 23:56:35.188
  Feb 20 23:56:35.188: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/20/24 23:56:35.189
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:35.219
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:35.222
  STEP: Creating a pod with dnsPolicy=None and customized dnsConfig... @ 02/20/24 23:56:35.226
  Feb 20 23:56:35.242: INFO: Created pod &Pod{ObjectMeta:{test-dns-nameservers  dns-7771  21708019-64ce-40e3-b070-0209d76a831a 22047 0 2024-02-20 23:56:35 +0000 UTC <nil> <nil> map[] map[] [] [] [{e2e.test Update v1 2024-02-20 23:56:35 +0000 UTC FieldsV1 {"f:spec":{"f:containers":{"k:{\"name\":\"agnhost-container\"}":{".":{},"f:args":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsConfig":{".":{},"f:nameservers":{},"f:searches":{}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{}}} }]},Spec:PodSpec{Volumes:[]Volume{Volume{Name:kube-api-access-tq2mq,VolumeSource:VolumeSource{HostPath:nil,EmptyDir:nil,GCEPersistentDisk:nil,AWSElasticBlockStore:nil,GitRepo:nil,Secret:nil,NFS:nil,ISCSI:nil,Glusterfs:nil,PersistentVolumeClaim:nil,RBD:nil,FlexVolume:nil,Cinder:nil,CephFS:nil,Flocker:nil,DownwardAPI:nil,FC:nil,AzureFile:nil,ConfigMap:nil,VsphereVolume:nil,Quobyte:nil,AzureDisk:nil,PhotonPersistentDisk:nil,PortworxVolume:nil,ScaleIO:nil,Projected:&ProjectedVolumeSource{Sources:[]VolumeProjection{VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:nil,ServiceAccountToken:&ServiceAccountTokenProjection{Audience:,ExpirationSeconds:*3607,Path:token,},},VolumeProjection{Secret:nil,DownwardAPI:nil,ConfigMap:&ConfigMapProjection{LocalObjectReference:LocalObjectReference{Name:kube-root-ca.crt,},Items:[]KeyToPath{KeyToPath{Key:ca.crt,Path:ca.crt,Mode:nil,},},Optional:nil,},ServiceAccountToken:nil,},VolumeProjection{Secret:nil,DownwardAPI:&DownwardAPIProjection{Items:[]DownwardAPIVolumeFile{DownwardAPIVolumeFile{Path:namespace,FieldRef:&ObjectFieldSelector{APIVersion:v1,FieldPath:metadata.namespace,},ResourceFieldRef:nil,Mode:nil,},},},ConfigMap:nil,ServiceAccountToken:nil,},},DefaultMode:*420,},StorageOS:nil,CSI:nil,Ephemeral:nil,},},},Containers:[]Container{Container{Name:agnhost-container,Image:registry.k8s.io/e2e-test-images/agnhost:2.45,Command:[],Args:[pause],WorkingDir:,Ports:[]ContainerPort{},Env:[]EnvVar{},Resources:ResourceRequirements{Limits:ResourceList{},Requests:ResourceList{},Claims:[]ResourceClaim{},},VolumeMounts:[]VolumeMount{VolumeMount{Name:kube-api-access-tq2mq,ReadOnly:true,MountPath:/var/run/secrets/kubernetes.io/serviceaccount,SubPath:,MountPropagation:nil,SubPathExpr:,},},LivenessProbe:nil,ReadinessProbe:nil,Lifecycle:nil,TerminationMessagePath:/dev/termination-log,ImagePullPolicy:IfNotPresent,SecurityContext:&SecurityContext{Capabilities:nil,Privileged:nil,SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,ReadOnlyRootFilesystem:nil,AllowPrivilegeEscalation:nil,RunAsGroup:nil,ProcMount:nil,WindowsOptions:nil,SeccompProfile:nil,},Stdin:false,StdinOnce:false,TTY:false,EnvFrom:[]EnvFromSource{},TerminationMessagePolicy:File,VolumeDevices:[]VolumeDevice{},StartupProbe:nil,ResizePolicy:[]ContainerResizePolicy{},RestartPolicy:nil,},},RestartPolicy:Always,TerminationGracePeriodSeconds:*0,ActiveDeadlineSeconds:nil,DNSPolicy:None,NodeSelector:map[string]string{},ServiceAccountName:default,DeprecatedServiceAccount:default,NodeName:,HostNetwork:false,HostPID:false,HostIPC:false,SecurityContext:&PodSecurityContext{SELinuxOptions:nil,RunAsUser:nil,RunAsNonRoot:nil,SupplementalGroups:[],FSGroup:nil,RunAsGroup:nil,Sysctls:[]Sysctl{},WindowsOptions:nil,FSGroupChangePolicy:nil,SeccompProfile:nil,},ImagePullSecrets:[]LocalObjectReference{},Hostname:,Subdomain:,Affinity:nil,SchedulerName:default-scheduler,InitContainers:[]Container{},AutomountServiceAccountToken:nil,Tolerations:[]Toleration{Toleration{Key:node.kubernetes.io/not-ready,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},Toleration{Key:node.kubernetes.io/unreachable,Operator:Exists,Value:,Effect:NoExecute,TolerationSeconds:*300,},},HostAliases:[]HostAlias{},PriorityClassName:,Priority:*0,DNSConfig:&PodDNSConfig{Nameservers:[1.1.1.1],Searches:[resolv.conf.local],Options:[]PodDNSConfigOption{},},ShareProcessNamespace:nil,ReadinessGates:[]PodReadinessGate{},RuntimeClassName:nil,EnableServiceLinks:*true,PreemptionPolicy:*PreemptLowerPriority,Overhead:ResourceList{},TopologySpreadConstraints:[]TopologySpreadConstraint{},EphemeralContainers:[]EphemeralContainer{},SetHostnameAsFQDN:nil,OS:nil,HostUsers:nil,SchedulingGates:[]PodSchedulingGate{},ResourceClaims:[]PodResourceClaim{},},Status:PodStatus{Phase:Pending,Conditions:[]PodCondition{},Message:,Reason:,HostIP:,PodIP:,StartTime:<nil>,ContainerStatuses:[]ContainerStatus{},QOSClass:BestEffort,InitContainerStatuses:[]ContainerStatus{},NominatedNodeName:,PodIPs:[]PodIP{},EphemeralContainerStatuses:[]ContainerStatus{},Resize:,ResourceClaimStatuses:[]PodResourceClaimStatus{},HostIPs:[]HostIP{},},}
  STEP: Verifying customized DNS suffix list is configured on pod... @ 02/20/24 23:56:37.249
  Feb 20 23:56:37.249: INFO: ExecWithOptions {Command:[/agnhost dns-suffix] Namespace:dns-7771 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:56:37.249: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:56:37.250: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:56:37.250: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-7771/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-suffix&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  STEP: Verifying customized DNS server is configured on pod... @ 02/20/24 23:56:37.327
  Feb 20 23:56:37.327: INFO: ExecWithOptions {Command:[/agnhost dns-server-list] Namespace:dns-7771 PodName:test-dns-nameservers ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 20 23:56:37.327: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 20 23:56:37.328: INFO: ExecWithOptions: Clientset creation
  Feb 20 23:56:37.328: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/dns-7771/pods/test-dns-nameservers/exec?command=%2Fagnhost&command=dns-server-list&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Feb 20 23:56:37.370: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 20 23:56:37.373: INFO: Deleting pod test-dns-nameservers...
  STEP: Destroying namespace "dns-7771" for this suite. @ 02/20/24 23:56:37.415
• [2.238 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should *not* be restarted with a exec "cat /tmp/health" liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:151
  STEP: Creating a kubernetes client @ 02/20/24 23:56:37.427
  Feb 20 23:56:37.427: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/20/24 23:56:37.427
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/20/24 23:56:37.46
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/20/24 23:56:37.462
  STEP: Creating pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343 @ 02/20/24 23:56:37.464
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/20/24 23:56:39.477
  Feb 20 23:56:39.480: INFO: Initial restart count of pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e is 0
  Feb 20 23:56:39.483: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:41.510: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:43.522: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:45.529: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:47.544: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:49.549: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:51.552: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:53.561: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:55.571: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:57.579: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:56:59.588: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:01.591: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:03.597: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:05.605: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:07.613: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:09.621: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:11.629: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:13.639: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:15.647: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:17.655: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:19.663: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:21.671: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:23.681: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:25.686: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:27.723: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:29.759: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:31.767: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:33.777: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:35.780: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:37.788: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:39.792: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:41.800: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:43.809: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:45.817: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:47.825: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:49.833: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:51.841: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:53.850: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:55.858: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:57.866: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:57:59.873: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:01.882: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:03.891: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:05.898: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:07.905: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:09.912: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:11.921: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:13.930: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:15.938: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:17.946: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:19.954: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:21.961: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:23.963: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:25.971: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:27.982: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:29.989: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:32.015: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:34.069: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:36.078: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:38.085: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:40.094: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:42.101: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:44.110: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:46.113: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:48.121: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:50.129: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:52.137: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:54.146: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:56.151: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:58:58.158: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:00.167: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:02.175: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:04.185: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:06.190: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:08.208: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:10.210: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:12.217: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:14.226: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:16.234: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:18.242: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:20.249: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:22.256: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:24.265: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:26.272: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:28.281: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:30.288: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:32.338: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:34.346: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:36.355: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:38.362: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:40.370: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:42.375: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:44.384: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:46.392: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:48.397: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:50.405: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:52.413: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:54.423: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:56.426: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 20 23:59:58.434: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:00.442: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:02.448: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:04.457: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:06.464: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:08.467: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:10.474: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:12.479: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:14.489: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:16.497: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:18.501: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:20.509: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:22.518: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:24.527: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:26.530: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:28.538: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:30.546: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:32.550: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:34.560: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:36.567: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:38.574: INFO: Get pod busybox-aa6d085e-c75c-43a7-9910-945f8294c59e in namespace container-probe-343
  Feb 21 00:00:40.575: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:00:40.584
  STEP: Destroying namespace "container-probe-343" for this suite. @ 02/21/24 00:00:40.633
• [243.223 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should list, patch and delete a collection of StatefulSets [Conformance]
test/e2e/apps/statefulset.go:961
  STEP: Creating a kubernetes client @ 02/21/24 00:00:40.652
  Feb 21 00:00:40.652: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/21/24 00:00:40.653
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:00:40.673
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:00:40.674
  STEP: Creating service test in namespace statefulset-3314 @ 02/21/24 00:00:40.676
  Feb 21 00:00:40.692: INFO: Found 0 stateful pods, waiting for 1
  Feb 21 00:00:50.702: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: patching the StatefulSet @ 02/21/24 00:00:50.715
  W0221 00:00:50.739587      22 warnings.go:70] unknown field "spec.template.spec.TerminationGracePeriodSeconds"
  Feb 21 00:00:50.746: INFO: Found 1 stateful pods, waiting for 2
  Feb 21 00:01:00.756: INFO: Waiting for pod test-ss-0 to enter Running - Ready=true, currently Running - Ready=true
  Feb 21 00:01:00.756: INFO: Waiting for pod test-ss-1 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Listing all StatefulSets @ 02/21/24 00:01:00.77
  STEP: Delete all of the StatefulSets @ 02/21/24 00:01:00.778
  STEP: Verify that StatefulSets have been deleted @ 02/21/24 00:01:00.799
  Feb 21 00:01:00.808: INFO: Deleting all statefulset in ns statefulset-3314
  Feb 21 00:01:00.824: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3314" for this suite. @ 02/21/24 00:01:00.827
• [20.188 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should test the lifecycle of a ReplicationController [Conformance]
test/e2e/apps/rc.go:112
  STEP: Creating a kubernetes client @ 02/21/24 00:01:00.84
  Feb 21 00:01:00.840: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/21/24 00:01:00.841
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:00.866
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:00.867
  STEP: creating a ReplicationController @ 02/21/24 00:01:00.871
  STEP: waiting for RC to be added @ 02/21/24 00:01:00.877
  STEP: waiting for available Replicas @ 02/21/24 00:01:00.878
  STEP: patching ReplicationController @ 02/21/24 00:01:02.892
  STEP: waiting for RC to be modified @ 02/21/24 00:01:02.905
  STEP: patching ReplicationController status @ 02/21/24 00:01:02.906
  STEP: waiting for RC to be modified @ 02/21/24 00:01:02.915
  STEP: waiting for available Replicas @ 02/21/24 00:01:02.915
  STEP: fetching ReplicationController status @ 02/21/24 00:01:02.921
  STEP: patching ReplicationController scale @ 02/21/24 00:01:02.923
  STEP: waiting for RC to be modified @ 02/21/24 00:01:02.93
  STEP: waiting for ReplicationController's scale to be the max amount @ 02/21/24 00:01:02.931
  STEP: fetching ReplicationController; ensuring that it's patched @ 02/21/24 00:01:04.163
  STEP: updating ReplicationController status @ 02/21/24 00:01:04.164
  STEP: waiting for RC to be modified @ 02/21/24 00:01:04.171
  STEP: listing all ReplicationControllers @ 02/21/24 00:01:04.171
  STEP: checking that ReplicationController has expected values @ 02/21/24 00:01:04.173
  STEP: deleting ReplicationControllers by collection @ 02/21/24 00:01:04.173
  STEP: waiting for ReplicationController to have a DELETED watchEvent @ 02/21/24 00:01:04.183
  Feb 21 00:01:04.208: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0221 00:01:04.208274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "replication-controller-7713" for this suite. @ 02/21/24 00:01:04.209
• [3.376 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply an update to a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:370
  STEP: Creating a kubernetes client @ 02/21/24 00:01:04.216
  Feb 21 00:01:04.216: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/21/24 00:01:04.217
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:04.234
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:04.235
  STEP: Updating Namespace "namespaces-2069" @ 02/21/24 00:01:04.236
  Feb 21 00:01:04.242: INFO: Namespace "namespaces-2069" now has labels, map[string]string{"e2e-framework":"namespaces", "e2e-run":"6a258d42-5a93-49fd-a4d2-3dbb83b506fb", "kubernetes.io/metadata.name":"namespaces-2069", "namespaces-2069":"updated", "pod-security.kubernetes.io/audit":"baseline", "pod-security.kubernetes.io/enforce":"baseline", "pod-security.kubernetes.io/warn":"baseline"}
  Feb 21 00:01:04.242: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2069" for this suite. @ 02/21/24 00:01:04.245
• [0.034 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] ReplicationController should surface a failure condition on a common issue like exceeded quota [Conformance]
test/e2e/apps/rc.go:85
  STEP: Creating a kubernetes client @ 02/21/24 00:01:04.251
  Feb 21 00:01:04.251: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replication-controller @ 02/21/24 00:01:04.251
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:04.267
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:04.269
  Feb 21 00:01:04.270: INFO: Creating quota "condition-test" that allows only two pods to run in the current namespace
  E0221 00:01:05.209191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating rc "condition-test" that asks for more than the allowed pod quota @ 02/21/24 00:01:05.283
  STEP: Checking rc "condition-test" has the desired failure condition set @ 02/21/24 00:01:05.304
  E0221 00:01:06.209089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Scaling down rc "condition-test" to satisfy pod quota @ 02/21/24 00:01:06.312
  Feb 21 00:01:06.320: INFO: Updating replication controller "condition-test"
  STEP: Checking rc "condition-test" has no failure condition set @ 02/21/24 00:01:06.32
  E0221 00:01:07.210038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:07.329: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replication-controller-2387" for this suite. @ 02/21/24 00:01:07.339
• [3.108 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Ingress API should support creating Ingress API operations [Conformance]
test/e2e/network/ingress.go:556
  STEP: Creating a kubernetes client @ 02/21/24 00:01:07.363
  Feb 21 00:01:07.363: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename ingress @ 02/21/24 00:01:07.364
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:07.386
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:07.388
  STEP: getting /apis @ 02/21/24 00:01:07.389
  STEP: getting /apis/networking.k8s.io @ 02/21/24 00:01:07.391
  STEP: getting /apis/networking.k8s.iov1 @ 02/21/24 00:01:07.391
  STEP: creating @ 02/21/24 00:01:07.392
  STEP: getting @ 02/21/24 00:01:07.408
  STEP: listing @ 02/21/24 00:01:07.409
  STEP: watching @ 02/21/24 00:01:07.411
  Feb 21 00:01:07.411: INFO: starting watch
  STEP: cluster-wide listing @ 02/21/24 00:01:07.411
  STEP: cluster-wide watching @ 02/21/24 00:01:07.412
  Feb 21 00:01:07.412: INFO: starting watch
  STEP: patching @ 02/21/24 00:01:07.413
  STEP: updating @ 02/21/24 00:01:07.418
  Feb 21 00:01:07.426: INFO: waiting for watch events with expected annotations
  Feb 21 00:01:07.426: INFO: saw patched and updated annotations
  STEP: patching /status @ 02/21/24 00:01:07.426
  STEP: updating /status @ 02/21/24 00:01:07.432
  STEP: get /status @ 02/21/24 00:01:07.44
  STEP: deleting @ 02/21/24 00:01:07.441
  STEP: deleting a collection @ 02/21/24 00:01:07.449
  Feb 21 00:01:07.462: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ingress-7467" for this suite. @ 02/21/24 00:01:07.464
• [0.106 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap optional updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:240
  STEP: Creating a kubernetes client @ 02/21/24 00:01:07.47
  Feb 21 00:01:07.470: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:01:07.47
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:07.487
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:07.489
  STEP: Creating configMap with name cm-test-opt-del-7b75e997-cc4a-4e79-bac1-ba9708491246 @ 02/21/24 00:01:07.492
  STEP: Creating configMap with name cm-test-opt-upd-dff1e473-3b87-49bb-a0c4-f3994aa23b21 @ 02/21/24 00:01:07.543
  STEP: Creating the pod @ 02/21/24 00:01:07.557
  E0221 00:01:08.210053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:09.210433      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting configmap cm-test-opt-del-7b75e997-cc4a-4e79-bac1-ba9708491246 @ 02/21/24 00:01:09.612
  STEP: Updating configmap cm-test-opt-upd-dff1e473-3b87-49bb-a0c4-f3994aa23b21 @ 02/21/24 00:01:09.634
  STEP: Creating configMap with name cm-test-opt-create-5efb963f-ee03-46c5-a5e5-78908d6ec7f4 @ 02/21/24 00:01:09.651
  STEP: waiting to observe update in volume @ 02/21/24 00:01:09.666
  E0221 00:01:10.213181      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:11.213379      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:11.721: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-6696" for this suite. @ 02/21/24 00:01:11.725
• [4.263 seconds]
------------------------------
[sig-node] Pods should be submitted and removed [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:227
  STEP: Creating a kubernetes client @ 02/21/24 00:01:11.733
  Feb 21 00:01:11.733: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/21/24 00:01:11.733
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:11.749
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:11.753
  STEP: creating the pod @ 02/21/24 00:01:11.754
  STEP: setting up watch @ 02/21/24 00:01:11.754
  STEP: submitting the pod to kubernetes @ 02/21/24 00:01:11.857
  STEP: verifying the pod is in kubernetes @ 02/21/24 00:01:11.883
  STEP: verifying pod creation was observed @ 02/21/24 00:01:11.892
  E0221 00:01:12.214320      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:13.214682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod gracefully @ 02/21/24 00:01:13.938
  STEP: verifying pod deletion was observed @ 02/21/24 00:01:13.947
  E0221 00:01:14.215015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:15.216016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:16.220120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:16.246: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-9951" for this suite. @ 02/21/24 00:01:16.248
• [4.521 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] PodTemplates should run the lifecycle of PodTemplates [Conformance]
test/e2e/common/node/podtemplates.go:53
  STEP: Creating a kubernetes client @ 02/21/24 00:01:16.254
  Feb 21 00:01:16.254: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename podtemplate @ 02/21/24 00:01:16.255
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:16.269
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:16.27
  Feb 21 00:01:16.294: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "podtemplate-7628" for this suite. @ 02/21/24 00:01:16.296
• [0.047 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:262
  STEP: Creating a kubernetes client @ 02/21/24 00:01:16.303
  Feb 21 00:01:16.303: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:01:16.303
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:16.319
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:16.321
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:01:16.322
  E0221 00:01:17.222973      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:18.223125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:19.223289      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:20.223561      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:01:20.343
  Feb 21 00:01:20.349: INFO: Trying to get logs from node worker pod downwardapi-volume-58578685-c8df-430f-b228-ecb3cb9dfd84 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:01:20.382
  Feb 21 00:01:20.440: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5667" for this suite. @ 02/21/24 00:01:20.445
• [4.153 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl run pod should create a pod from an image when restart is Never  [Conformance]
test/e2e/kubectl/kubectl.go:1707
  STEP: Creating a kubernetes client @ 02/21/24 00:01:20.459
  Feb 21 00:01:20.459: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/21/24 00:01:20.46
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:20.486
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:20.491
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 02/21/24 00:01:20.496
  Feb 21 00:01:20.496: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3473 run e2e-test-httpd-pod --restart=Never --pod-running-timeout=2m0s --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4'
  Feb 21 00:01:20.569: INFO: stderr: ""
  Feb 21 00:01:20.569: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: verifying the pod e2e-test-httpd-pod was created @ 02/21/24 00:01:20.569
  Feb 21 00:01:20.570: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-3473 delete pods e2e-test-httpd-pod'
  E0221 00:01:21.224698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:22.225544      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:22.630: INFO: stderr: ""
  Feb 21 00:01:22.630: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Feb 21 00:01:22.630: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-3473" for this suite. @ 02/21/24 00:01:22.633
• [2.183 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with privileged should run the container as unprivileged when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:528
  STEP: Creating a kubernetes client @ 02/21/24 00:01:22.643
  Feb 21 00:01:22.643: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context-test @ 02/21/24 00:01:22.643
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:22.66
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:22.661
  E0221 00:01:23.226913      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:24.227413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:25.228637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:26.229199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:26.703: INFO: Got logs for pod "busybox-privileged-false-ceefcf17-6830-47c5-a190-8c86c269712f": "ip: RTNETLINK answers: Operation not permitted\n"
  Feb 21 00:01:26.703: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-9175" for this suite. @ 02/21/24 00:01:26.711
• [4.095 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should have a working scale subresource [Conformance]
test/e2e/apps/statefulset.go:901
  STEP: Creating a kubernetes client @ 02/21/24 00:01:26.74
  Feb 21 00:01:26.740: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/21/24 00:01:26.74
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:26.756
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:26.758
  STEP: Creating service test in namespace statefulset-3806 @ 02/21/24 00:01:26.76
  STEP: Creating statefulset ss in namespace statefulset-3806 @ 02/21/24 00:01:26.766
  Feb 21 00:01:26.778: INFO: Found 0 stateful pods, waiting for 1
  E0221 00:01:27.230037      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:28.230541      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:29.231188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:30.232274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:31.232193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:32.232539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:33.233165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:34.233740      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:35.235011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:36.235300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:36.787: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: getting scale subresource @ 02/21/24 00:01:36.801
  STEP: updating a scale subresource @ 02/21/24 00:01:36.808
  STEP: verifying the statefulset Spec.Replicas was modified @ 02/21/24 00:01:36.832
  STEP: Patch a scale subresource @ 02/21/24 00:01:36.839
  STEP: verifying the statefulset Spec.Replicas was modified @ 02/21/24 00:01:36.862
  Feb 21 00:01:36.865: INFO: Deleting all statefulset in ns statefulset-3806
  Feb 21 00:01:36.901: INFO: Scaling statefulset ss to 0
  E0221 00:01:37.235408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:38.235936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:39.236129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:40.236746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:41.237890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:42.238334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:43.238727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:44.238839      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:45.239648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:46.240249      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:46.932: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 21 00:01:46.936: INFO: Deleting statefulset ss
  Feb 21 00:01:46.960: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-3806" for this suite. @ 02/21/24 00:01:46.964
• [20.247 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-instrumentation] Events should manage the lifecycle of an event [Conformance]
test/e2e/instrumentation/core_events.go:57
  STEP: Creating a kubernetes client @ 02/21/24 00:01:46.988
  Feb 21 00:01:46.988: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename events @ 02/21/24 00:01:46.989
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:47.043
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:47.047
  STEP: creating a test event @ 02/21/24 00:01:47.05
  STEP: listing all events in all namespaces @ 02/21/24 00:01:47.063
  STEP: patching the test event @ 02/21/24 00:01:47.072
  STEP: fetching the test event @ 02/21/24 00:01:47.102
  STEP: updating the test event @ 02/21/24 00:01:47.107
  STEP: getting the test event @ 02/21/24 00:01:47.132
  STEP: deleting the test event @ 02/21/24 00:01:47.136
  STEP: listing all events in all namespaces @ 02/21/24 00:01:47.155
  Feb 21 00:01:47.164: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-5944" for this suite. @ 02/21/24 00:01:47.169
• [0.204 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message as empty when pod succeeds and TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:232
  STEP: Creating a kubernetes client @ 02/21/24 00:01:47.194
  Feb 21 00:01:47.194: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-runtime @ 02/21/24 00:01:47.195
  E0221 00:01:47.240911      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:47.241
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:47.245
  STEP: create the container @ 02/21/24 00:01:47.249
  W0221 00:01:47.270555      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Succeeded @ 02/21/24 00:01:47.27
  E0221 00:01:48.242053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:49.242648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:50.243260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:51.244410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 02/21/24 00:01:51.301
  STEP: the container should be terminated @ 02/21/24 00:01:51.309
  STEP: the termination message should be set @ 02/21/24 00:01:51.309
  Feb 21 00:01:51.309: INFO: Expected: &{} to match Container's Termination Message:  --
  STEP: delete the container @ 02/21/24 00:01:51.309
  Feb 21 00:01:51.373: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-8034" for this suite. @ 02/21/24 00:01:51.389
• [4.239 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Secrets should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/secrets.go:95
  STEP: Creating a kubernetes client @ 02/21/24 00:01:51.434
  Feb 21 00:01:51.434: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:01:51.436
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:51.533
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:51.539
  STEP: creating secret secrets-659/secret-test-5bb9cdd0-099e-4e24-800f-a7eb257cc798 @ 02/21/24 00:01:51.546
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:01:51.571
  E0221 00:01:52.244377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:53.244769      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:54.245683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:55.246529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:01:55.728
  Feb 21 00:01:55.741: INFO: Trying to get logs from node control-plane pod pod-configmaps-3c329f6d-5db2-46ba-aed3-36f2e5d0d283 container env-test: <nil>
  STEP: delete the pod @ 02/21/24 00:01:55.766
  Feb 21 00:01:55.844: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-659" for this suite. @ 02/21/24 00:01:55.853
• [4.446 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes pod should support shared volumes between containers [Conformance]
test/e2e/common/storage/empty_dir.go:227
  STEP: Creating a kubernetes client @ 02/21/24 00:01:55.882
  Feb 21 00:01:55.882: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:01:55.883
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:55.946
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:55.95
  STEP: Creating Pod @ 02/21/24 00:01:55.955
  E0221 00:01:56.246729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:01:57.248221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Reading file content from the nginx-container @ 02/21/24 00:01:58.005
  Feb 21 00:01:58.005: INFO: ExecWithOptions {Command:[/bin/sh -c cat /usr/share/volumeshare/shareddata.txt] Namespace:emptydir-1680 PodName:pod-sharedvolume-846c9453-e27b-47e4-af0b-2df710c44b1a ContainerName:busybox-main-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:01:58.005: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:01:58.005: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:01:58.006: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/emptydir-1680/pods/pod-sharedvolume-846c9453-e27b-47e4-af0b-2df710c44b1a/exec?command=%2Fbin%2Fsh&command=-c&command=cat+%2Fusr%2Fshare%2Fvolumeshare%2Fshareddata.txt&container=busybox-main-container&container=busybox-main-container&stderr=true&stdout=true)
  Feb 21 00:01:58.083: INFO: Exec stderr: ""
  Feb 21 00:01:58.083: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-1680" for this suite. @ 02/21/24 00:01:58.088
• [2.230 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/configmap_volume.go:504
  STEP: Creating a kubernetes client @ 02/21/24 00:01:58.112
  Feb 21 00:01:58.112: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:01:58.114
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:58.162
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:58.165
  E0221 00:01:58.248046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:01:58.265: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-806" for this suite. @ 02/21/24 00:01:58.27
• [0.169 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling an agnhost Pod with hostAliases should write entries to /etc/hosts [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:148
  STEP: Creating a kubernetes client @ 02/21/24 00:01:58.282
  Feb 21 00:01:58.282: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubelet-test @ 02/21/24 00:01:58.283
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:01:58.495
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:01:58.503
  STEP: Waiting for pod completion @ 02/21/24 00:01:58.544
  E0221 00:01:59.249118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:00.250071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:01.250813      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:02.251280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:02.596: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-5515" for this suite. @ 02/21/24 00:02:02.614
• [4.354 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir wrapper volumes should not conflict [Conformance]
test/e2e/storage/empty_dir_wrapper.go:67
  STEP: Creating a kubernetes client @ 02/21/24 00:02:02.636
  Feb 21 00:02:02.636: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir-wrapper @ 02/21/24 00:02:02.637
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:02.654
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:02.656
  E0221 00:02:03.252077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:04.253300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:04.686: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Cleaning up the secret @ 02/21/24 00:02:04.689
  STEP: Cleaning up the configmap @ 02/21/24 00:02:04.702
  STEP: Cleaning up the pod @ 02/21/24 00:02:04.709
  STEP: Destroying namespace "emptydir-wrapper-3363" for this suite. @ 02/21/24 00:02:04.728
• [2.100 seconds]
------------------------------
SSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: udp [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:124
  STEP: Creating a kubernetes client @ 02/21/24 00:02:04.736
  Feb 21 00:02:04.736: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pod-network-test @ 02/21/24 00:02:04.737
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:04.757
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:04.758
  STEP: Performing setup for networking test in namespace pod-network-test-7355 @ 02/21/24 00:02:04.76
  STEP: creating a selector @ 02/21/24 00:02:04.76
  STEP: Creating the service pods in kubernetes @ 02/21/24 00:02:04.76
  Feb 21 00:02:04.760: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0221 00:02:05.253514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:06.254147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:07.255144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:08.255921      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:09.256782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:10.257759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:11.258080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:12.258759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:13.259887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:14.260429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:15.261589      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:16.262657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 02/21/24 00:02:16.892
  E0221 00:02:17.262742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:18.263620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:18.963: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Feb 21 00:02:18.963: INFO: Going to poll 10.1.171.122 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Feb 21 00:02:18.969: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.1.171.122 8081 | grep -v '^\s*$'] Namespace:pod-network-test-7355 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:02:18.970: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:02:18.971: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:02:18.971: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-7355/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.1.171.122+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  E0221 00:02:19.264471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:20.020: INFO: Found all 1 expected endpoints: [netserver-0]
  Feb 21 00:02:20.020: INFO: Going to poll 10.1.235.152 on port 8081 at least 0 times, with a maximum of 34 tries before failing
  Feb 21 00:02:20.021: INFO: ExecWithOptions {Command:[/bin/sh -c echo hostName | nc -w 1 -u 10.1.235.152 8081 | grep -v '^\s*$'] Namespace:pod-network-test-7355 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:02:20.021: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:02:20.022: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:02:20.022: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-7355/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=echo+hostName+%7C+nc+-w+1+-u+10.1.235.152+8081+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  E0221 00:02:20.265686      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:21.062: INFO: Found all 1 expected endpoints: [netserver-1]
  Feb 21 00:02:21.062: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-7355" for this suite. @ 02/21/24 00:02:21.081
• [16.369 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment Deployment should have a working scale subresource [Conformance]
test/e2e/apps/deployment.go:150
  STEP: Creating a kubernetes client @ 02/21/24 00:02:21.107
  Feb 21 00:02:21.107: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/21/24 00:02:21.107
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:21.12
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:21.121
  Feb 21 00:02:21.124: INFO: Creating simple deployment test-new-deployment
  Feb 21 00:02:21.132: INFO: new replicaset for deployment "test-new-deployment" is yet to be created
  E0221 00:02:21.266615      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:22.267305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: getting scale subresource @ 02/21/24 00:02:23.15
  STEP: updating a scale subresource @ 02/21/24 00:02:23.152
  STEP: verifying the deployment Spec.Replicas was modified @ 02/21/24 00:02:23.159
  STEP: Patch a scale subresource @ 02/21/24 00:02:23.161
  Feb 21 00:02:23.181: INFO: Deployment "test-new-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=19) "test-new-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-935",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1912750b-408b-4411-bc34-ad7dec2be8a2",
      ResourceVersion: (string) (len=5) "23532",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844070541,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)(<nil>),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=28) {
              00000000  7b 22 66 3a 73 70 65 63  22 3a 7b 22 66 3a 72 65  |{"f:spec":{"f:re|
              00000010  70 6c 69 63 61 73 22 3a  7b 7d 7d 7d              |plicas":{}}}|
            }
          }),
          Subresource: (string) (len=5) "scale"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=619) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |onds":{},"f:revi|
              00000060  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000070  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              00000090  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000a0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000b0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000c0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000d0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000e0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              000000f0  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000100  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000110  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000120  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000130  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000140  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000150  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000160  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000170  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000180  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000190  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001a0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001b0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001c0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001d0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001e0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000001f0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000200  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000210  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000220  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000230  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000240  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000250  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000260  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(4),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 1,
            IntVal: (int32) 0,
            StrVal: (string) (len=3) "25%"
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 1,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=72) "ReplicaSet \"test-new-deployment-557759b7c7\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 21 00:02:23.186: INFO: New ReplicaSet "test-new-deployment-557759b7c7" of Deployment "test-new-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "test-new-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-935",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "7c0f2cb7-0781-4797-b306-5d656cca943a",
      ResourceVersion: (string) (len=5) "23531",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844070541,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=19) "test-new-deployment",
          UID: (types.UID) (len=36) "1912750b-408b-4411-bc34-ad7dec2be8a2",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 31 39 31 32 37 35  30 62 2d 34 30 38 62 2d  |\"1912750b-408b-|
              00000120  34 34 31 31 2d 62 63 33  34 2d 61 64 37 64 65 63  |4411-bc34-ad7dec|
              00000130  32 62 65 38 61 32 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |2be8a2\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 1,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:02:23.190: INFO: Pod "test-new-deployment-557759b7c7-qrstd" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-qrstd",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-935",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "130d8590-36b6-4f96-b935-96e460a3e365",
      ResourceVersion: (string) (len=5) "23525",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844070541,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "163c1b0888de61687b941ad88c81c8a6135a207743839d0561c50af88a774387",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.150/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.150/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "7c0f2cb7-0781-4797-b306-5d656cca943a",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 37 63  30 66 32 63 62 37 2d 30  |d\":\"7c0f2cb7-0|
              00000090  37 38 31 2d 34 37 39 37  2d 62 33 30 36 2d 35 64  |781-4797-b306-5d|
              000000a0  36 35 36 63 63 61 39 34  33 61 5c 22 7d 22 3a 7b  |656cca943a\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070542,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 35 30 5c 22 7d 22  |10.1.235.150\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5rjwm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5rjwm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070542,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070542,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070541,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.150",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.150"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844070541,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844070541,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://12d6efe8ac632c9d88c091a880e6c0705de0b0a6048573a0da9ff39e2b536a5c",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:02:23.191: INFO: Pod "test-new-deployment-557759b7c7-qpf9k" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "test-new-deployment-557759b7c7-qpf9k",
      GenerateName: (string) (len=31) "test-new-deployment-557759b7c7-",
      Namespace: (string) (len=14) "deployment-935",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e99c479f-2a4d-499c-a2cb-917875d8ff18",
      ResourceVersion: (string) (len=5) "23534",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844070543,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "test-new-deployment-557759b7c7",
          UID: (types.UID) (len=36) "7c0f2cb7-0781-4797-b306-5d656cca943a",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=1) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844070543,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 37 63  30 66 32 63 62 37 2d 30  |d\":\"7c0f2cb7-0|
              00000090  37 38 31 2d 34 37 39 37  2d 62 33 30 36 2d 35 64  |781-4797-b306-5d|
              000000a0  36 35 36 63 63 61 39 34  33 61 5c 22 7d 22 3a 7b  |656cca943a\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7bt4v",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7bt4v",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) "",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) <nil>,
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) "",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)(<nil>),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) <nil>,
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:02:23.192: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-935" for this suite. @ 02/21/24 00:02:23.198
• [2.102 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide default limits.cpu/memory from node allocatable [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:218
  STEP: Creating a kubernetes client @ 02/21/24 00:02:23.211
  Feb 21 00:02:23.211: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:02:23.212
  E0221 00:02:23.267453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:23.289
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:23.295
  STEP: Creating a pod to test downward api env vars @ 02/21/24 00:02:23.301
  E0221 00:02:24.268426      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:25.268419      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:26.269036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:27.269357      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:02:27.348
  Feb 21 00:02:27.355: INFO: Trying to get logs from node control-plane pod downward-api-35300456-ab4b-4600-a3d3-4607b6b46f47 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:02:27.372
  Feb 21 00:02:27.416: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-7191" for this suite. @ 02/21/24 00:02:27.425
• [4.231 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group and version but different kinds [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:357
  STEP: Creating a kubernetes client @ 02/21/24 00:02:27.451
  Feb 21 00:02:27.451: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/21/24 00:02:27.454
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:27.513
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:27.519
  STEP: CRs in the same group and version but different kinds (two CRDs) show up in OpenAPI documentation @ 02/21/24 00:02:27.525
  Feb 21 00:02:27.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:02:28.269354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:28.847: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:02:29.270253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:30.270596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:31.271293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:32.271959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:33.273304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:34.081: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-691" for this suite. @ 02/21/24 00:02:34.085
• [6.639 seconds]
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a replica set. [Conformance]
test/e2e/apimachinery/resource_quota.go:451
  STEP: Creating a kubernetes client @ 02/21/24 00:02:34.09
  Feb 21 00:02:34.090: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:02:34.091
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:34.108
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:34.11
  STEP: Counting existing ResourceQuota @ 02/21/24 00:02:34.111
  E0221 00:02:34.273946      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:35.274021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:36.274138      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:37.275220      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:38.275341      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:02:39.12
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:02:39.141
  E0221 00:02:39.275505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:40.276359      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ReplicaSet @ 02/21/24 00:02:41.144
  STEP: Ensuring resource quota status captures replicaset creation @ 02/21/24 00:02:41.161
  E0221 00:02:41.277176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:42.277462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a ReplicaSet @ 02/21/24 00:02:43.169
  STEP: Ensuring resource quota status released usage @ 02/21/24 00:02:43.188
  E0221 00:02:43.278514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:44.279491      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:45.196: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-9003" for this suite. @ 02/21/24 00:02:45.204
• [11.137 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl label should update the label on a resource  [Conformance]
test/e2e/kubectl/kubectl.go:1575
  STEP: Creating a kubernetes client @ 02/21/24 00:02:45.23
  Feb 21 00:02:45.230: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/21/24 00:02:45.231
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:45.264
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:45.265
  STEP: creating the pod @ 02/21/24 00:02:45.267
  Feb 21 00:02:45.267: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 create -f -'
  E0221 00:02:45.279675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:45.517: INFO: stderr: ""
  Feb 21 00:02:45.517: INFO: stdout: "pod/pause created\n"
  E0221 00:02:46.280779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:47.281469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding the label testing-label with value testing-label-value to a pod @ 02/21/24 00:02:47.531
  Feb 21 00:02:47.532: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 label pods pause testing-label=testing-label-value'
  Feb 21 00:02:47.658: INFO: stderr: ""
  Feb 21 00:02:47.658: INFO: stdout: "pod/pause labeled\n"
  STEP: verifying the pod has the label testing-label with the value testing-label-value @ 02/21/24 00:02:47.658
  Feb 21 00:02:47.658: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 get pod pause -L testing-label'
  Feb 21 00:02:47.720: INFO: stderr: ""
  Feb 21 00:02:47.720: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    testing-label-value\n"
  STEP: removing the label testing-label of a pod @ 02/21/24 00:02:47.72
  Feb 21 00:02:47.720: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 label pods pause testing-label-'
  Feb 21 00:02:47.771: INFO: stderr: ""
  Feb 21 00:02:47.771: INFO: stdout: "pod/pause unlabeled\n"
  STEP: verifying the pod doesn't have the label testing-label @ 02/21/24 00:02:47.771
  Feb 21 00:02:47.771: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 get pod pause -L testing-label'
  Feb 21 00:02:47.811: INFO: stderr: ""
  Feb 21 00:02:47.811: INFO: stdout: "NAME    READY   STATUS    RESTARTS   AGE   TESTING-LABEL\npause   1/1     Running   0          2s    \n"
  STEP: using delete to clean up resources @ 02/21/24 00:02:47.811
  Feb 21 00:02:47.811: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 delete --grace-period=0 --force -f -'
  Feb 21 00:02:47.864: INFO: stderr: "Warning: Immediate deletion does not wait for confirmation that the running resource has been terminated. The resource may continue to run on the cluster indefinitely.\n"
  Feb 21 00:02:47.864: INFO: stdout: "pod \"pause\" force deleted\n"
  Feb 21 00:02:47.864: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 get rc,svc -l name=pause --no-headers'
  Feb 21 00:02:47.906: INFO: stderr: "No resources found in kubectl-6749 namespace.\n"
  Feb 21 00:02:47.906: INFO: stdout: ""
  Feb 21 00:02:47.906: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6749 get pods -l name=pause -o go-template={{ range .items }}{{ if not .metadata.deletionTimestamp }}{{ .metadata.name }}{{ "\n" }}{{ end }}{{ end }}'
  Feb 21 00:02:47.945: INFO: stderr: ""
  Feb 21 00:02:47.945: INFO: stdout: ""
  Feb 21 00:02:47.945: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6749" for this suite. @ 02/21/24 00:02:47.947
• [2.723 seconds]
------------------------------
SSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate pod and apply defaults after mutation [Conformance]
test/e2e/apimachinery/webhook.go:261
  STEP: Creating a kubernetes client @ 02/21/24 00:02:47.952
  Feb 21 00:02:47.952: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/21/24 00:02:47.953
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:47.97
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:47.971
  STEP: Setting up server cert @ 02/21/24 00:02:47.995
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/21/24 00:02:48.238
  STEP: Deploying the webhook pod @ 02/21/24 00:02:48.246
  STEP: Wait for the deployment to be ready @ 02/21/24 00:02:48.258
  Feb 21 00:02:48.261: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0221 00:02:48.282048      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:49.283159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 02/21/24 00:02:50.269
  STEP: Verifying the service has paired with the endpoint @ 02/21/24 00:02:50.281
  E0221 00:02:50.283715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:51.281: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  E0221 00:02:51.284637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating pod webhook via the AdmissionRegistration API @ 02/21/24 00:02:51.295
  STEP: create a pod that should be updated by the webhook @ 02/21/24 00:02:51.337
  Feb 21 00:02:51.382: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2964" for this suite. @ 02/21/24 00:02:51.447
  STEP: Destroying namespace "webhook-markers-6992" for this suite. @ 02/21/24 00:02:51.456
• [3.511 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and ensure its status is promptly calculated. [Conformance]
test/e2e/apimachinery/resource_quota.go:76
  STEP: Creating a kubernetes client @ 02/21/24 00:02:51.464
  Feb 21 00:02:51.464: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:02:51.464
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:51.478
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:51.48
  STEP: Counting existing ResourceQuota @ 02/21/24 00:02:51.481
  E0221 00:02:52.284924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:53.285323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:54.285865      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:55.286787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:56.286968      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:02:56.491
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:02:56.507
  E0221 00:02:57.287437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:02:58.288103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:02:58.515: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-78" for this suite. @ 02/21/24 00:02:58.523
• [7.079 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] EndpointSliceMirroring should mirror a custom Endpoints resource through create update and delete [Conformance]
test/e2e/network/endpointslicemirroring.go:55
  STEP: Creating a kubernetes client @ 02/21/24 00:02:58.545
  Feb 21 00:02:58.545: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename endpointslicemirroring @ 02/21/24 00:02:58.547
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:02:58.594
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:02:58.597
  STEP: mirroring a new custom Endpoint @ 02/21/24 00:02:58.614
  Feb 21 00:02:58.626: INFO: Waiting for at least 1 EndpointSlice to exist, got 0
  E0221 00:02:59.289047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:00.289105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring an update to a custom Endpoint @ 02/21/24 00:03:00.634
  Feb 21 00:03:00.663: INFO: Expected EndpointSlice to have 10.2.3.4 as address, got 10.1.2.3
  E0221 00:03:01.289421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:02.290001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mirroring deletion of a custom Endpoint @ 02/21/24 00:03:02.665
  Feb 21 00:03:02.675: INFO: Waiting for 0 EndpointSlices to exist, got 1
  E0221 00:03:03.290240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:04.290784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:03:04.685: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslicemirroring-2964" for this suite. @ 02/21/24 00:03:04.692
• [6.170 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Job should delete a job [Conformance]
test/e2e/apps/job.go:485
  STEP: Creating a kubernetes client @ 02/21/24 00:03:04.722
  Feb 21 00:03:04.722: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename job @ 02/21/24 00:03:04.724
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:03:04.77
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:03:04.772
  STEP: Creating a job @ 02/21/24 00:03:04.775
  STEP: Ensuring active pods == parallelism @ 02/21/24 00:03:04.782
  E0221 00:03:05.291098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:06.291519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete a job @ 02/21/24 00:03:06.79
  STEP: deleting Job.batch foo in namespace job-7131, will wait for the garbage collector to delete the pods @ 02/21/24 00:03:06.79
  Feb 21 00:03:06.871: INFO: Deleting Job.batch foo took: 24.370742ms
  Feb 21 00:03:06.972: INFO: Terminating Job.batch foo pods took: 100.957923ms
  E0221 00:03:07.292595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:08.293225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:09.293756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:10.294516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:11.294816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:12.295584      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:13.296096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:14.297148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:15.297829      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:16.298714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:17.299513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:18.300624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:19.300991      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:20.301637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:21.302863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:22.303312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:23.304184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:24.305256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:25.306450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:26.306788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:27.307012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:28.308085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:29.308914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:30.309727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:31.310912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:32.311790      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:33.312505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:34.313571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:35.314550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:36.314780      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:37.315265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:38.315438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:39.316159      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring job was deleted @ 02/21/24 00:03:39.472
  Feb 21 00:03:39.476: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "job-7131" for this suite. @ 02/21/24 00:03:39.481
• [34.772 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should create Endpoints and EndpointSlices for Pods matching a Service [Conformance]
test/e2e/network/endpointslice.go:207
  STEP: Creating a kubernetes client @ 02/21/24 00:03:39.497
  Feb 21 00:03:39.497: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename endpointslice @ 02/21/24 00:03:39.499
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:03:39.531
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:03:39.535
  E0221 00:03:40.317112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:41.318168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:42.318536      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:43.318614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:44.319263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing a single matching pod @ 02/21/24 00:03:44.639
  E0221 00:03:45.319410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:46.319766      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:47.320853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:48.321414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:49.321906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: referencing matching pods with named port @ 02/21/24 00:03:49.651
  E0221 00:03:50.322826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:51.323494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:52.323904      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:53.324394      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:54.324926      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: creating empty Endpoints and EndpointSlices for no matching Pods @ 02/21/24 00:03:54.666
  E0221 00:03:55.325910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:56.326505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:57.327459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:58.328017      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:03:59.328638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: recreating EndpointSlices after they've been deleted @ 02/21/24 00:03:59.68
  Feb 21 00:03:59.738: INFO: EndpointSlice for Service endpointslice-7283/example-named-port not found
  E0221 00:04:00.329087      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:01.329304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:02.329617      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:03.330597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:04.330881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:05.331163      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:06.331702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:07.332264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:08.332846      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:09.333249      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:04:09.755: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-7283" for this suite. @ 02/21/24 00:04:09.763
• [30.291 seconds]
------------------------------
SS
------------------------------
[sig-network] DNS should provide DNS for ExternalName services [Conformance]
test/e2e/network/dns.go:329
  STEP: Creating a kubernetes client @ 02/21/24 00:04:09.791
  Feb 21 00:04:09.791: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/21/24 00:04:09.793
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:04:09.84
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:04:09.844
  STEP: Creating a test externalName service @ 02/21/24 00:04:09.848
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:09.857
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:09.857
  STEP: creating a pod to probe DNS @ 02/21/24 00:04:09.857
  STEP: submitting the pod to kubernetes @ 02/21/24 00:04:09.857
  E0221 00:04:10.333511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:11.333925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 02/21/24 00:04:11.891
  STEP: looking for the results for each expected name from probers @ 02/21/24 00:04:11.898
  Feb 21 00:04:11.918: INFO: DNS probes using dns-test-882013c5-88eb-49ed-9e78-e1b816c4ba6a succeeded

  STEP: changing the externalName to bar.example.com @ 02/21/24 00:04:11.918
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local CNAME > /results/wheezy_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:11.945
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local CNAME > /results/jessie_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:11.945
  STEP: creating a second pod to probe DNS @ 02/21/24 00:04:11.946
  STEP: submitting the pod to kubernetes @ 02/21/24 00:04:11.946
  E0221 00:04:12.334168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:13.334610      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:14.334573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:15.334651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:16.335658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:17.336066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:18.336114      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:19.336533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:20.337458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:21.337759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:22.337911      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:23.338051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:24.338700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:25.339063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:26.338844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:27.339056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 02/21/24 00:04:28.01
  STEP: looking for the results for each expected name from probers @ 02/21/24 00:04:28.018
  Feb 21 00:04:28.034: INFO: DNS probes using dns-test-d573bf5b-1314-4a0f-9ec4-1498b41b00ed succeeded

  STEP: changing the service to type=ClusterIP @ 02/21/24 00:04:28.035
  W0221 00:04:28.075352      22 warnings.go:70] spec.externalName is ignored when spec.type is not "ExternalName"
  STEP: Running these commands on wheezy: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local A > /results/wheezy_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:28.075
  STEP: Running these commands on jessie: for i in `seq 1 30`; do dig +short dns-test-service-3.dns-4615.svc.cluster.local A > /results/jessie_udp@dns-test-service-3.dns-4615.svc.cluster.local; sleep 1; done
   @ 02/21/24 00:04:28.075
  STEP: creating a third pod to probe DNS @ 02/21/24 00:04:28.075
  STEP: submitting the pod to kubernetes @ 02/21/24 00:04:28.083
  E0221 00:04:28.339230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:29.339607      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 02/21/24 00:04:30.112
  STEP: looking for the results for each expected name from probers @ 02/21/24 00:04:30.119
  Feb 21 00:04:30.139: INFO: DNS probes using dns-test-4a587830-eecd-40a5-b5bf-2bb7de96f711 succeeded

  Feb 21 00:04:30.140: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:04:30.149
  STEP: deleting the pod @ 02/21/24 00:04:30.194
  STEP: deleting the pod @ 02/21/24 00:04:30.222
  STEP: deleting the test externalName service @ 02/21/24 00:04:30.249
  E0221 00:04:30.340747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "dns-4615" for this suite. @ 02/21/24 00:04:30.414
• [20.740 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for CRD preserving unknown fields at the schema root [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:194
  STEP: Creating a kubernetes client @ 02/21/24 00:04:30.534
  Feb 21 00:04:30.534: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/21/24 00:04:30.539
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:04:30.995
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:04:30.998
  Feb 21 00:04:31.191: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:04:31.345794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:32.346397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: kubectl validation (kubectl create and apply) allows request with any unknown properties @ 02/21/24 00:04:32.881
  Feb 21 00:04:32.881: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-6688 --namespace=crd-publish-openapi-6688 create -f -'
  Feb 21 00:04:33.182: INFO: stderr: ""
  Feb 21 00:04:33.182: INFO: stdout: "e2e-test-crd-publish-openapi-9515-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Feb 21 00:04:33.182: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-6688 --namespace=crd-publish-openapi-6688 delete e2e-test-crd-publish-openapi-9515-crds test-cr'
  Feb 21 00:04:33.231: INFO: stderr: ""
  Feb 21 00:04:33.231: INFO: stdout: "e2e-test-crd-publish-openapi-9515-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  Feb 21 00:04:33.232: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-6688 --namespace=crd-publish-openapi-6688 apply -f -'
  E0221 00:04:33.347813      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:04:33.557: INFO: stderr: ""
  Feb 21 00:04:33.557: INFO: stdout: "e2e-test-crd-publish-openapi-9515-crd.crd-publish-openapi-test-unknown-at-root.example.com/test-cr created\n"
  Feb 21 00:04:33.557: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-6688 --namespace=crd-publish-openapi-6688 delete e2e-test-crd-publish-openapi-9515-crds test-cr'
  Feb 21 00:04:33.610: INFO: stderr: ""
  Feb 21 00:04:33.610: INFO: stdout: "e2e-test-crd-publish-openapi-9515-crd.crd-publish-openapi-test-unknown-at-root.example.com \"test-cr\" deleted\n"
  STEP: kubectl explain works to explain CR @ 02/21/24 00:04:33.61
  Feb 21 00:04:33.610: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=crd-publish-openapi-6688 explain e2e-test-crd-publish-openapi-9515-crds'
  Feb 21 00:04:33.698: INFO: stderr: ""
  Feb 21 00:04:33.698: INFO: stdout: "GROUP:      crd-publish-openapi-test-unknown-at-root.example.com\nKIND:       e2e-test-crd-publish-openapi-9515-crd\nVERSION:    v1\n\nDESCRIPTION:\n    preserve-unknown-properties at root for Testing\n    \nFIELDS:\n  apiVersion\t<string>\n    APIVersion defines the versioned schema of this representation of an object.\n    Servers should convert recognized schemas to the latest internal value, and\n    may reject unrecognized values. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources\n\n  kind\t<string>\n    Kind is a string value representing the REST resource this object\n    represents. Servers may infer this from the endpoint the client submits\n    requests to. Cannot be updated. In CamelCase. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\n\n  metadata\t<ObjectMeta>\n    Standard object's metadata. More info:\n    https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata\n\n  spec\t<Object>\n    Specification of Waldo\n\n  status\t<Object>\n    Status of Waldo\n\n\n"
  E0221 00:04:34.347912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:04:35.022: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-6688" for this suite. @ 02/21/24 00:04:35.027
• [4.503 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should allow opting out of API token automount  [Conformance]
test/e2e/auth/service_accounts.go:161
  STEP: Creating a kubernetes client @ 02/21/24 00:04:35.038
  Feb 21 00:04:35.038: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/21/24 00:04:35.038
  E0221 00:04:35.348224      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:04:35.351
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:04:35.359
  Feb 21 00:04:35.443: INFO: created pod pod-service-account-defaultsa
  Feb 21 00:04:35.443: INFO: pod pod-service-account-defaultsa service account token volume mount: true
  Feb 21 00:04:35.466: INFO: created pod pod-service-account-mountsa
  Feb 21 00:04:35.467: INFO: pod pod-service-account-mountsa service account token volume mount: true
  Feb 21 00:04:35.487: INFO: created pod pod-service-account-nomountsa
  Feb 21 00:04:35.487: INFO: pod pod-service-account-nomountsa service account token volume mount: false
  Feb 21 00:04:35.508: INFO: created pod pod-service-account-defaultsa-mountspec
  Feb 21 00:04:35.508: INFO: pod pod-service-account-defaultsa-mountspec service account token volume mount: true
  Feb 21 00:04:35.531: INFO: created pod pod-service-account-mountsa-mountspec
  Feb 21 00:04:35.531: INFO: pod pod-service-account-mountsa-mountspec service account token volume mount: true
  Feb 21 00:04:35.576: INFO: created pod pod-service-account-nomountsa-mountspec
  Feb 21 00:04:35.576: INFO: pod pod-service-account-nomountsa-mountspec service account token volume mount: true
  Feb 21 00:04:35.613: INFO: created pod pod-service-account-defaultsa-nomountspec
  Feb 21 00:04:35.613: INFO: pod pod-service-account-defaultsa-nomountspec service account token volume mount: false
  Feb 21 00:04:35.649: INFO: created pod pod-service-account-mountsa-nomountspec
  Feb 21 00:04:35.649: INFO: pod pod-service-account-mountsa-nomountspec service account token volume mount: false
  Feb 21 00:04:35.668: INFO: created pod pod-service-account-nomountsa-nomountspec
  Feb 21 00:04:35.668: INFO: pod pod-service-account-nomountsa-nomountspec service account token volume mount: false
  Feb 21 00:04:35.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7430" for this suite. @ 02/21/24 00:04:35.69
• [0.717 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates lower priority pod preemption by critical pod [Conformance]
test/e2e/scheduling/preemption.go:224
  STEP: Creating a kubernetes client @ 02/21/24 00:04:35.755
  Feb 21 00:04:35.755: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption @ 02/21/24 00:04:35.756
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:04:35.803
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:04:35.806
  Feb 21 00:04:35.864: INFO: Waiting up to 1m0s for all nodes to be ready
  E0221 00:04:36.349217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:37.349653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:38.350627      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:39.351221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:40.351386      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:41.351560      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:42.352374      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:43.352594      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:44.353292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:45.354213      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:46.354115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:47.354490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:48.355972      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:49.356196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:50.356452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:51.356961      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:52.358074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:53.358314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:54.358737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:55.359908      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:56.360169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:57.360853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:58.361255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:04:59.361346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:00.362230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:01.362856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:02.363256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:03.363941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:04.364443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:05.365471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:06.366128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:07.366465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:08.367698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:09.367737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:10.368389      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:11.369484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:12.369605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:13.369974      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:14.370235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:15.370943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:16.371656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:17.372288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:18.373186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:19.373473      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:20.374504      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:21.375096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:22.375400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:23.375700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:24.376833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:25.376976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:26.377158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:27.378241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:28.379435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:29.380057      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:30.380416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:31.381201      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:32.381087      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:33.381605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:34.381720      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:35.381842      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:05:35.900: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 02/21/24 00:05:35.906
  Feb 21 00:05:35.941: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Feb 21 00:05:35.952: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Feb 21 00:05:35.976: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Feb 21 00:05:35.985: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 02/21/24 00:05:35.985
  E0221 00:05:36.382109      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:37.382334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:38.382967      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:39.383321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a critical pod that use same resources as that of a lower priority pod @ 02/21/24 00:05:40.028
  E0221 00:05:40.384120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:41.384739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:42.385772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:43.386326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:05:44.138: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-6559" for this suite. @ 02/21/24 00:05:44.173
• [68.425 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:109
  STEP: Creating a kubernetes client @ 02/21/24 00:05:44.18
  Feb 21 00:05:44.180: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:05:44.181
  E0221 00:05:44.386700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:05:44.477
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:05:44.479
  STEP: Creating configMap with name projected-configmap-test-volume-map-b4432b7a-9fc8-4a9d-8b4d-d1fec02b960a @ 02/21/24 00:05:44.481
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:05:44.489
  E0221 00:05:45.387019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:46.387478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:47.387602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:48.388187      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:05:48.529
  Feb 21 00:05:48.539: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-e6a0c32e-d448-4883-9f8a-710b3f34d75d container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:05:48.579
  Feb 21 00:05:48.606: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6873" for this suite. @ 02/21/24 00:05:48.609
• [4.436 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] Ephemeral Containers [NodeConformance] will start an ephemeral container in an existing pod [Conformance]
test/e2e/common/node/ephemeral_containers.go:51
  STEP: Creating a kubernetes client @ 02/21/24 00:05:48.616
  Feb 21 00:05:48.616: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename ephemeral-containers-test @ 02/21/24 00:05:48.617
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:05:49.028
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:05:49.035
  STEP: creating a target pod @ 02/21/24 00:05:49.043
  E0221 00:05:49.388953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:50.389544      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: adding an ephemeral container @ 02/21/24 00:05:51.112
  E0221 00:05:51.390361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:52.390976      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:53.392145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:05:54.392868      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking pod container endpoints @ 02/21/24 00:05:55.174
  Feb 21 00:05:55.175: INFO: ExecWithOptions {Command:[/bin/echo marco] Namespace:ephemeral-containers-test-9356 PodName:ephemeral-containers-target-pod ContainerName:debugger Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:05:55.175: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:05:55.176: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:05:55.176: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/ephemeral-containers-test-9356/pods/ephemeral-containers-target-pod/exec?command=%2Fbin%2Fecho&command=marco&container=debugger&container=debugger&stderr=true&stdout=true)
  Feb 21 00:05:55.254: INFO: Exec stderr: ""
  Feb 21 00:05:55.259: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "ephemeral-containers-test-9356" for this suite. @ 02/21/24 00:05:55.262
• [6.652 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should manage the lifecycle of a ResourceQuota [Conformance]
test/e2e/apimachinery/resource_quota.go:946
  STEP: Creating a kubernetes client @ 02/21/24 00:05:55.269
  Feb 21 00:05:55.269: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:05:55.269
  E0221 00:05:55.393080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:05:56.14
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:05:56.149
  STEP: Creating a ResourceQuota @ 02/21/24 00:05:56.157
  STEP: Getting a ResourceQuota @ 02/21/24 00:05:56.182
  STEP: Listing all ResourceQuotas with LabelSelector @ 02/21/24 00:05:56.192
  STEP: Patching the ResourceQuota @ 02/21/24 00:05:56.205
  STEP: Deleting a Collection of ResourceQuotas @ 02/21/24 00:05:56.23
  STEP: Verifying the deleted ResourceQuota @ 02/21/24 00:05:56.26
  Feb 21 00:05:56.269: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8189" for this suite. @ 02/21/24 00:05:56.282
• [1.039 seconds]
------------------------------
S
------------------------------
[sig-apps] ControllerRevision [Serial] should manage the lifecycle of a ControllerRevision [Conformance]
test/e2e/apps/controller_revision.go:124
  STEP: Creating a kubernetes client @ 02/21/24 00:05:56.308
  Feb 21 00:05:56.308: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename controllerrevisions @ 02/21/24 00:05:56.31
  E0221 00:05:56.393173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:05:56.734
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:05:56.742
  STEP: Creating DaemonSet "e2e-ftrd7-daemon-set" @ 02/21/24 00:05:56.804
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/21/24 00:05:56.817
  Feb 21 00:05:56.832: INFO: Number of nodes with available pods controlled by daemonset e2e-ftrd7-daemon-set: 0
  Feb 21 00:05:56.832: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:05:57.394286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:05:57.841: INFO: Number of nodes with available pods controlled by daemonset e2e-ftrd7-daemon-set: 0
  Feb 21 00:05:57.841: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:05:58.394479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:05:58.858: INFO: Number of nodes with available pods controlled by daemonset e2e-ftrd7-daemon-set: 2
  Feb 21 00:05:58.859: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset e2e-ftrd7-daemon-set
  STEP: Confirm DaemonSet "e2e-ftrd7-daemon-set" successfully created with "daemonset-name=e2e-ftrd7-daemon-set" label @ 02/21/24 00:05:58.869
  STEP: Listing all ControllerRevisions with label "daemonset-name=e2e-ftrd7-daemon-set" @ 02/21/24 00:05:58.893
  Feb 21 00:05:58.906: INFO: Located ControllerRevision: "e2e-ftrd7-daemon-set-5747759b58"
  STEP: Patching ControllerRevision "e2e-ftrd7-daemon-set-5747759b58" @ 02/21/24 00:05:58.923
  Feb 21 00:05:58.941: INFO: e2e-ftrd7-daemon-set-5747759b58 has been patched
  STEP: Create a new ControllerRevision @ 02/21/24 00:05:58.941
  Feb 21 00:05:58.951: INFO: Created ControllerRevision: e2e-ftrd7-daemon-set-55c66c7776
  STEP: Confirm that there are two ControllerRevisions @ 02/21/24 00:05:58.951
  Feb 21 00:05:58.951: INFO: Requesting list of ControllerRevisions to confirm quantity
  Feb 21 00:05:58.954: INFO: Found 2 ControllerRevisions
  STEP: Deleting ControllerRevision "e2e-ftrd7-daemon-set-5747759b58" @ 02/21/24 00:05:58.954
  STEP: Confirm that there is only one ControllerRevision @ 02/21/24 00:05:58.964
  Feb 21 00:05:58.964: INFO: Requesting list of ControllerRevisions to confirm quantity
  Feb 21 00:05:58.966: INFO: Found 1 ControllerRevisions
  STEP: Updating ControllerRevision "e2e-ftrd7-daemon-set-55c66c7776" @ 02/21/24 00:05:58.969
  Feb 21 00:05:58.978: INFO: e2e-ftrd7-daemon-set-55c66c7776 has been updated
  STEP: Generate another ControllerRevision by patching the Daemonset @ 02/21/24 00:05:58.978
  W0221 00:05:58.988941      22 warnings.go:70] unknown field "updateStrategy"
  STEP: Confirm that there are two ControllerRevisions @ 02/21/24 00:05:58.989
  Feb 21 00:05:58.989: INFO: Requesting list of ControllerRevisions to confirm quantity
  E0221 00:05:59.395364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:05:59.992: INFO: Requesting list of ControllerRevisions to confirm quantity
  Feb 21 00:06:00.004: INFO: Found 2 ControllerRevisions
  STEP: Removing a ControllerRevision via 'DeleteCollection' with labelSelector: "e2e-ftrd7-daemon-set-55c66c7776=updated" @ 02/21/24 00:06:00.004
  STEP: Confirm that there is only one ControllerRevision @ 02/21/24 00:06:00.042
  Feb 21 00:06:00.042: INFO: Requesting list of ControllerRevisions to confirm quantity
  Feb 21 00:06:00.052: INFO: Found 1 ControllerRevisions
  Feb 21 00:06:00.062: INFO: ControllerRevision "e2e-ftrd7-daemon-set-5d75ccdf45" has revision 3
  STEP: Deleting DaemonSet "e2e-ftrd7-daemon-set" @ 02/21/24 00:06:00.072
  STEP: deleting DaemonSet.extensions e2e-ftrd7-daemon-set in namespace controllerrevisions-2668, will wait for the garbage collector to delete the pods @ 02/21/24 00:06:00.072
  Feb 21 00:06:00.160: INFO: Deleting DaemonSet.extensions e2e-ftrd7-daemon-set took: 27.537995ms
  E0221 00:06:00.395805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:00.761: INFO: Terminating DaemonSet.extensions e2e-ftrd7-daemon-set pods took: 600.601803ms
  E0221 00:06:01.396945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:01.777: INFO: Number of nodes with available pods controlled by daemonset e2e-ftrd7-daemon-set: 0
  Feb 21 00:06:01.777: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset e2e-ftrd7-daemon-set
  Feb 21 00:06:01.791: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"24886"},"items":null}

  Feb 21 00:06:01.807: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"24886"},"items":null}

  Feb 21 00:06:01.836: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "controllerrevisions-2668" for this suite. @ 02/21/24 00:06:01.848
• [5.562 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should rollback without unnecessary restarts [Conformance]
test/e2e/apps/daemon_set.go:443
  STEP: Creating a kubernetes client @ 02/21/24 00:06:01.872
  Feb 21 00:06:01.872: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/21/24 00:06:01.874
  E0221 00:06:02.397212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:06:02.807
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:06:02.809
  Feb 21 00:06:02.845: INFO: Create a RollingUpdate DaemonSet
  Feb 21 00:06:02.852: INFO: Check that daemon pods launch on every node of the cluster
  Feb 21 00:06:02.857: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:06:02.858: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:06:03.398151      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:03.879: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:06:03.879: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:06:04.398265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:04.901: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:06:04.901: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  Feb 21 00:06:04.901: INFO: Update the DaemonSet to trigger a rollout
  Feb 21 00:06:04.934: INFO: Updating DaemonSet daemon-set
  E0221 00:06:05.399331      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:06.399469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:07.400024      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:07.957: INFO: Roll back the DaemonSet before rollout is complete
  Feb 21 00:06:07.974: INFO: Updating DaemonSet daemon-set
  Feb 21 00:06:07.974: INFO: Make sure DaemonSet rollback is complete
  Feb 21 00:06:07.979: INFO: Wrong image for pod: daemon-set-2x2m2. Expected: registry.k8s.io/e2e-test-images/httpd:2.4.38-4, got: foo:non-existent.
  Feb 21 00:06:07.979: INFO: Pod daemon-set-2x2m2 is not available
  E0221 00:06:08.400008      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:09.401281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:10.401381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:10.992: INFO: Pod daemon-set-l8wtc is not available
  STEP: Deleting DaemonSet "daemon-set" @ 02/21/24 00:06:11.041
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-2576, will wait for the garbage collector to delete the pods @ 02/21/24 00:06:11.041
  Feb 21 00:06:11.135: INFO: Deleting DaemonSet.extensions daemon-set took: 28.970289ms
  E0221 00:06:11.402485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:11.636: INFO: Terminating DaemonSet.extensions daemon-set pods took: 500.745623ms
  E0221 00:06:12.403459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:13.404072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:13.853: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:06:13.854: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 21 00:06:13.870: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"25036"},"items":null}

  Feb 21 00:06:13.886: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"25036"},"items":null}

  Feb 21 00:06:13.919: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-2576" for this suite. @ 02/21/24 00:06:13.931
• [12.081 seconds]
------------------------------
[sig-auth] ServiceAccounts ServiceAccountIssuerDiscovery should support OIDC discovery of service account issuer [Conformance]
test/e2e/auth/service_accounts.go:529
  STEP: Creating a kubernetes client @ 02/21/24 00:06:13.953
  Feb 21 00:06:13.953: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/21/24 00:06:13.954
  E0221 00:06:14.405734      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:06:14.915
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:06:14.923
  Feb 21 00:06:14.997: INFO: created pod
  E0221 00:06:15.406596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:16.407421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:17.408268      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:18.408860      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:06:19.029
  E0221 00:06:19.410126      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:20.410218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:21.411075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:22.411608      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:23.411883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:24.412049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:25.412817      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:26.413211      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:27.413714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:28.413986      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:29.414513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:30.415552      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:31.415941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:32.416365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:33.416918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:34.417238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:35.418215      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:36.418870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:37.419355      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:38.419979      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:39.420356      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:40.420733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:41.421233      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:42.421698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:43.422567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:44.423348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:45.423791      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:46.424225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:47.424856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:48.425081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:06:49.029: INFO: polling logs
  Feb 21 00:06:49.040: INFO: Pod logs: 
  I0221 00:06:16.269779       1 log.go:194] OK: Got token
  I0221 00:06:16.269825       1 log.go:194] validating with in-cluster discovery
  I0221 00:06:16.269986       1 log.go:194] OK: got issuer https://kubernetes.default.svc
  I0221 00:06:16.270006       1 log.go:194] Full, not-validated claims: 
  openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-7235:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc0000492e0), NotBefore:(*jwt.NumericDate)(0xc000049488), IssuedAt:(*jwt.NumericDate)(0xc0000492f0), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-7235", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"b88f6f11-ddba-4eec-b4b2-1b3ec69b70d0"}}}
  I0221 00:06:16.276837       1 log.go:194] OK: Constructed OIDC provider for issuer https://kubernetes.default.svc
  I0221 00:06:16.281093       1 log.go:194] OK: Validated signature on JWT
  I0221 00:06:16.281152       1 log.go:194] OK: Got valid claims from token!
  I0221 00:06:16.281172       1 log.go:194] Full, validated claims: 
  &openidmetadata.claims{Claims:jwt.Claims{Issuer:"https://kubernetes.default.svc", Subject:"system:serviceaccount:svcaccounts-7235:default", Audience:jwt.Audience{"oidc-discovery-test"}, Expiry:(*jwt.NumericDate)(0xc00044c510), NotBefore:(*jwt.NumericDate)(0xc00044c538), IssuedAt:(*jwt.NumericDate)(0xc00044c518), ID:""}, Kubernetes:openidmetadata.kubeClaims{Namespace:"svcaccounts-7235", ServiceAccount:openidmetadata.kubeName{Name:"default", UID:"b88f6f11-ddba-4eec-b4b2-1b3ec69b70d0"}}}

  Feb 21 00:06:49.040: INFO: completed pod
  Feb 21 00:06:49.047: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-7235" for this suite. @ 02/21/24 00:06:49.051
• [35.106 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe should not be ready before initial delay and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:71
  STEP: Creating a kubernetes client @ 02/21/24 00:06:49.06
  Feb 21 00:06:49.060: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/21/24 00:06:49.06
  E0221 00:06:49.426197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:06:49.832
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:06:49.84
  E0221 00:06:50.426971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:51.427418      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:52.427476      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:53.428161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:54.428176      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:55.429287      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:56.429496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:57.430125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:58.430230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:06:59.430778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:00.431977      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:01.432592      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:02.433188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:03.433450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:04.434554      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:05.435028      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:06.435891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:07.435910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:08.436333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:09.436707      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:10.436951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:11.437545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:07:12.040: INFO: Container started at 2024-02-21 00:06:50 +0000 UTC, pod became ready at 2024-02-21 00:07:10 +0000 UTC
  Feb 21 00:07:12.040: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-5492" for this suite. @ 02/21/24 00:07:12.053
• [23.024 seconds]
------------------------------
SSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command that always fails in a pod should have an terminated reason [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:110
  STEP: Creating a kubernetes client @ 02/21/24 00:07:12.084
  Feb 21 00:07:12.084: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubelet-test @ 02/21/24 00:07:12.086
  E0221 00:07:12.438449      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:13.19
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:13.193
  E0221 00:07:13.438611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:14.438881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:15.440165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:16.440364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:07:17.229: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-86" for this suite. @ 02/21/24 00:07:17.244
• [5.184 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should fail substituting values in a volume subpath with backticks [Slow] [Conformance]
test/e2e/common/node/expansion.go:155
  STEP: Creating a kubernetes client @ 02/21/24 00:07:17.272
  Feb 21 00:07:17.272: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:07:17.274
  E0221 00:07:17.441116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:17.658
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:17.661
  E0221 00:07:18.441687      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:19.442402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:07:19.692: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 21 00:07:19.707: INFO: Deleting pod "var-expansion-3a28ecd6-a5fb-4474-a31b-738643b6b570" in namespace "var-expansion-231"
  Feb 21 00:07:19.737: INFO: Wait up to 5m0s for pod "var-expansion-3a28ecd6-a5fb-4474-a31b-738643b6b570" to be fully deleted
  E0221 00:07:20.443295      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:21.443748      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:22.445142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:23.446199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "var-expansion-231" for this suite. @ 02/21/24 00:07:23.773
• [6.527 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Sysctls [LinuxOnly] [NodeConformance] should reject invalid sysctls [MinimumKubeletVersion:1.21] [Conformance]
test/e2e/common/node/sysctl.go:123
  STEP: Creating a kubernetes client @ 02/21/24 00:07:23.802
  Feb 21 00:07:23.802: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sysctl @ 02/21/24 00:07:23.804
  E0221 00:07:24.446574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:25.125
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:25.134
  STEP: Creating a pod with one valid and two invalid sysctls @ 02/21/24 00:07:25.142
  Feb 21 00:07:25.161: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sysctl-8814" for this suite. @ 02/21/24 00:07:25.174
• [1.399 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Downward API should provide container's limits.cpu/memory and requests.cpu/memory as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:167
  STEP: Creating a kubernetes client @ 02/21/24 00:07:25.202
  Feb 21 00:07:25.202: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:07:25.204
  E0221 00:07:25.447391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:26.169
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:26.177
  STEP: Creating a pod to test downward api env vars @ 02/21/24 00:07:26.185
  E0221 00:07:26.448180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:27.448398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:28.448834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:29.449071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:07:30.248
  Feb 21 00:07:30.257: INFO: Trying to get logs from node control-plane pod downward-api-e22f4b4f-23e6-4084-97c2-31a935836079 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:07:30.278
  Feb 21 00:07:30.340: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-6427" for this suite. @ 02/21/24 00:07:30.352
• [5.174 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with projected pod [Conformance]
test/e2e/storage/subpath.go:105
  STEP: Creating a kubernetes client @ 02/21/24 00:07:30.381
  Feb 21 00:07:30.381: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subpath @ 02/21/24 00:07:30.383
  E0221 00:07:30.449239      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:30.942
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:30.949
  STEP: Setting up data @ 02/21/24 00:07:30.957
  STEP: Creating pod pod-subpath-test-projected-mgp2 @ 02/21/24 00:07:30.999
  STEP: Creating a pod to test atomic-volume-subpath @ 02/21/24 00:07:30.999
  E0221 00:07:31.450516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:32.450656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:33.451177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:34.451481      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:35.452466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:36.453639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:37.453705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:38.453714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:39.454349      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:40.455102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:41.455646      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:42.456112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:43.457157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:44.457472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:45.457673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:46.458105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:47.458383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:48.458794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:49.459650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:50.460194      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:51.460357      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:52.460682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:53.460787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:54.461180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:07:55.15
  Feb 21 00:07:55.153: INFO: Trying to get logs from node control-plane pod pod-subpath-test-projected-mgp2 container test-container-subpath-projected-mgp2: <nil>
  STEP: delete the pod @ 02/21/24 00:07:55.158
  STEP: Deleting pod pod-subpath-test-projected-mgp2 @ 02/21/24 00:07:55.174
  Feb 21 00:07:55.174: INFO: Deleting pod "pod-subpath-test-projected-mgp2" in namespace "subpath-4741"
  Feb 21 00:07:55.177: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-4741" for this suite. @ 02/21/24 00:07:55.179
• [24.806 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-auth] ServiceAccounts should run through the lifecycle of a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:647
  STEP: Creating a kubernetes client @ 02/21/24 00:07:55.187
  Feb 21 00:07:55.187: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/21/24 00:07:55.188
  E0221 00:07:55.461718      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:56.111
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:56.115
  STEP: creating a ServiceAccount @ 02/21/24 00:07:56.118
  STEP: watching for the ServiceAccount to be added @ 02/21/24 00:07:56.147
  STEP: patching the ServiceAccount @ 02/21/24 00:07:56.156
  STEP: finding ServiceAccount in list of all ServiceAccounts (by LabelSelector) @ 02/21/24 00:07:56.179
  STEP: deleting the ServiceAccount @ 02/21/24 00:07:56.192
  Feb 21 00:07:56.240: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-9032" for this suite. @ 02/21/24 00:07:56.253
• [1.082 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should locate the groupVersion and a resource within each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:169
  STEP: Creating a kubernetes client @ 02/21/24 00:07:56.27
  Feb 21 00:07:56.270: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename discovery @ 02/21/24 00:07:56.271
  E0221 00:07:56.461866      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:56.635
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:56.643
  STEP: Setting up server cert @ 02/21/24 00:07:56.654
  STEP: Requesting APIResourceList from "/api/v1" @ 02/21/24 00:07:57.035
  STEP: Requesting APIResourceList from "/apis/admissionregistration.k8s.io/v1" @ 02/21/24 00:07:57.037
  STEP: Requesting APIResourceList from "/apis/apiextensions.k8s.io/v1" @ 02/21/24 00:07:57.038
  STEP: Requesting APIResourceList from "/apis/apiregistration.k8s.io/v1" @ 02/21/24 00:07:57.042
  STEP: Requesting APIResourceList from "/apis/apps/v1" @ 02/21/24 00:07:57.042
  STEP: Requesting APIResourceList from "/apis/authentication.k8s.io/v1" @ 02/21/24 00:07:57.043
  STEP: Requesting APIResourceList from "/apis/authorization.k8s.io/v1" @ 02/21/24 00:07:57.044
  STEP: Requesting APIResourceList from "/apis/autoscaling/v1" @ 02/21/24 00:07:57.045
  STEP: Requesting APIResourceList from "/apis/autoscaling/v2" @ 02/21/24 00:07:57.045
  STEP: Requesting APIResourceList from "/apis/batch/v1" @ 02/21/24 00:07:57.046
  STEP: Requesting APIResourceList from "/apis/certificates.k8s.io/v1" @ 02/21/24 00:07:57.047
  STEP: Requesting APIResourceList from "/apis/coordination.k8s.io/v1" @ 02/21/24 00:07:57.047
  STEP: Requesting APIResourceList from "/apis/discovery.k8s.io/v1" @ 02/21/24 00:07:57.048
  STEP: Requesting APIResourceList from "/apis/events.k8s.io/v1" @ 02/21/24 00:07:57.049
  STEP: Requesting APIResourceList from "/apis/networking.k8s.io/v1" @ 02/21/24 00:07:57.049
  STEP: Requesting APIResourceList from "/apis/node.k8s.io/v1" @ 02/21/24 00:07:57.05
  STEP: Requesting APIResourceList from "/apis/policy/v1" @ 02/21/24 00:07:57.051
  STEP: Requesting APIResourceList from "/apis/scheduling.k8s.io/v1" @ 02/21/24 00:07:57.051
  STEP: Requesting APIResourceList from "/apis/storage.k8s.io/v1" @ 02/21/24 00:07:57.052
  Feb 21 00:07:57.053: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-7694" for this suite. @ 02/21/24 00:07:57.055
• [0.792 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-storage] ConfigMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:124
  STEP: Creating a kubernetes client @ 02/21/24 00:07:57.063
  Feb 21 00:07:57.063: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:07:57.063
  E0221 00:07:57.462567      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:07:57.675
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:07:57.683
  STEP: Creating configMap with name configmap-test-upd-e5fac116-f4ab-4cb0-a33e-e6c955845bd9 @ 02/21/24 00:07:57.703
  STEP: Creating the pod @ 02/21/24 00:07:57.722
  E0221 00:07:58.463002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:07:59.464271      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:00.464555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:01.464861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating configmap configmap-test-upd-e5fac116-f4ab-4cb0-a33e-e6c955845bd9 @ 02/21/24 00:08:01.814
  STEP: waiting to observe update in volume @ 02/21/24 00:08:01.834
  E0221 00:08:02.465119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:03.465705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:04.465878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:05.467171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:06.468169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:07.468779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:08.469692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:09.470063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:10.470205      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:11.470834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:12.471156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:13.471764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:14.472027      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:15.472833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:16.473840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:17.474019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:18.474470      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:19.475073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:20.475405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:21.475923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:22.476003      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:23.476357      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:24.476825      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:25.477618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:26.477803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:27.478388      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:28.478423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:29.478814      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:30.480060      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:31.480963      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:32.481811      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:33.482400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:34.483334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:35.484277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:36.485514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:37.485899      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:38.486398      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:39.487010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:40.487164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:41.487812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:42.487770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:43.488247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:44.488461      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:45.488935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:46.489555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:47.490112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:48.490949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:49.491915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:50.493072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:51.494083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:52.494741      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:53.495605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:54.496366      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:55.497071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:56.497254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:57.497742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:58.498534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:08:59.498931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:00.500202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:01.501231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:02.501312      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:03.502174      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:04.502842      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:04.669: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3132" for this suite. @ 02/21/24 00:09:04.681
• [67.648 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Kubelet when scheduling a busybox command in a pod should print the output to logs [NodeConformance] [Conformance]
test/e2e/common/node/kubelet.go:52
  STEP: Creating a kubernetes client @ 02/21/24 00:09:04.715
  Feb 21 00:09:04.715: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubelet-test @ 02/21/24 00:09:04.717
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:04.962
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:04.97
  E0221 00:09:05.503369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:06.503989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:07.504360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:08.504659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:09.077: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubelet-test-736" for this suite. @ 02/21/24 00:09:09.089
• [4.405 seconds]
------------------------------
SSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings as non-root [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:109
  STEP: Creating a kubernetes client @ 02/21/24 00:09:09.121
  Feb 21 00:09:09.121: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:09:09.123
  E0221 00:09:09.504693      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:10.193
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:10.203
  STEP: Creating configMap with name configmap-test-volume-map-9de1fff9-2906-4341-9536-02765477b659 @ 02/21/24 00:09:10.211
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:09:10.228
  E0221 00:09:10.505315      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:11.506078      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:12.506873      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:13.508129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:09:14.264
  Feb 21 00:09:14.267: INFO: Trying to get logs from node control-plane pod pod-configmaps-53263779-20e1-4f43-a80e-91b8b934cef5 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:09:14.271
  Feb 21 00:09:14.314: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-7944" for this suite. @ 02/21/24 00:09:14.349
• [5.238 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-cli] Kubectl client Kubectl diff should check if kubectl diff finds a difference for Deployments [Conformance]
test/e2e/kubectl/kubectl.go:996
  STEP: Creating a kubernetes client @ 02/21/24 00:09:14.36
  Feb 21 00:09:14.360: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/21/24 00:09:14.36
  E0221 00:09:14.508581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:15.193
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:15.203
  STEP: create deployment with httpd image @ 02/21/24 00:09:15.211
  Feb 21 00:09:15.212: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6961 create -f -'
  E0221 00:09:15.509614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:15.538: INFO: stderr: ""
  Feb 21 00:09:15.538: INFO: stdout: "deployment.apps/httpd-deployment created\n"
  STEP: verify diff finds difference between live and declared image @ 02/21/24 00:09:15.538
  Feb 21 00:09:15.538: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6961 diff -f -'
  Feb 21 00:09:15.784: INFO: rc: 1
  Feb 21 00:09:15.784: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-6961 delete -f -'
  Feb 21 00:09:15.851: INFO: stderr: ""
  Feb 21 00:09:15.851: INFO: stdout: "deployment.apps \"httpd-deployment\" deleted\n"
  Feb 21 00:09:15.851: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-6961" for this suite. @ 02/21/24 00:09:15.857
• [1.505 seconds]
------------------------------
SSSSSS
------------------------------
[sig-cli] Kubectl client Proxy server should support proxy with --port 0  [Conformance]
test/e2e/kubectl/kubectl.go:1781
  STEP: Creating a kubernetes client @ 02/21/24 00:09:15.865
  Feb 21 00:09:15.865: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/21/24 00:09:15.865
  E0221 00:09:16.510545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:16.592
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:16.594
  STEP: starting the proxy server @ 02/21/24 00:09:16.596
  Feb 21 00:09:16.596: INFO: Asynchronously running '/usr/local/bin/kubectl kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-7026 proxy -p 0 --disable-filter'
  STEP: curling proxy /api/ output @ 02/21/24 00:09:16.63
  Feb 21 00:09:16.636: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-7026" for this suite. @ 02/21/24 00:09:16.639
• [0.791 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceDefinition resources [Privileged:ClusterAdmin] Simple CustomResourceDefinition creating/deleting custom resource definition objects works  [Conformance]
test/e2e/apimachinery/custom_resource_definition.go:58
  STEP: Creating a kubernetes client @ 02/21/24 00:09:16.657
  Feb 21 00:09:16.657: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename custom-resource-definition @ 02/21/24 00:09:16.657
  E0221 00:09:17.510569      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:17.613
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:17.62
  Feb 21 00:09:17.628: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:09:18.511053      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:18.699: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "custom-resource-definition-1160" for this suite. @ 02/21/24 00:09:18.712
• [2.082 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should delete RS created by deployment when not orphaning [Conformance]
test/e2e/apimachinery/garbage_collector.go:479
  STEP: Creating a kubernetes client @ 02/21/24 00:09:18.74
  Feb 21 00:09:18.740: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/21/24 00:09:18.742
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:18.945
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:18.948
  STEP: create the deployment @ 02/21/24 00:09:18.951
  W0221 00:09:18.958803      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  STEP: Wait for the Deployment to create new ReplicaSet @ 02/21/24 00:09:18.958
  STEP: delete the deployment @ 02/21/24 00:09:19.467
  STEP: wait for all rs to be garbage collected @ 02/21/24 00:09:19.486
  STEP: expected 0 pods, got 2 pods @ 02/21/24 00:09:19.49
  STEP: expected 0 rs, got 1 rs @ 02/21/24 00:09:19.498
  E0221 00:09:19.511549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 02/21/24 00:09:20.049
  W0221 00:09:20.069914      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 21 00:09:20.069: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 21 00:09:20.070: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-3292" for this suite. @ 02/21/24 00:09:20.077
• [1.358 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be immutable if `immutable` field is set [Conformance]
test/e2e/common/storage/secrets_volume.go:386
  STEP: Creating a kubernetes client @ 02/21/24 00:09:20.099
  Feb 21 00:09:20.099: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:09:20.1
  E0221 00:09:20.512408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:21.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:21.199
  Feb 21 00:09:21.344: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-5007" for this suite. @ 02/21/24 00:09:21.356
• [1.275 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should set mode on item file [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:85
  STEP: Creating a kubernetes client @ 02/21/24 00:09:21.377
  Feb 21 00:09:21.377: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:09:21.378
  E0221 00:09:21.512838      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:22.193
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:22.201
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:09:22.208
  E0221 00:09:22.512915      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:23.514058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:24.514793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:25.515587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:09:26.283
  Feb 21 00:09:26.294: INFO: Trying to get logs from node control-plane pod downwardapi-volume-d0695e7d-3e89-4d4b-bf76-dec1251a193d container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:09:26.315
  Feb 21 00:09:26.361: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-466" for this suite. @ 02/21/24 00:09:26.365
• [4.997 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] CSIStorageCapacity  should support CSIStorageCapacities API operations [Conformance]
test/e2e/storage/csistoragecapacity.go:49
  STEP: Creating a kubernetes client @ 02/21/24 00:09:26.374
  Feb 21 00:09:26.374: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename csistoragecapacity @ 02/21/24 00:09:26.375
  E0221 00:09:26.516638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:27.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:27.199
  STEP: getting /apis @ 02/21/24 00:09:27.211
  STEP: getting /apis/storage.k8s.io @ 02/21/24 00:09:27.223
  STEP: getting /apis/storage.k8s.io/v1 @ 02/21/24 00:09:27.226
  STEP: creating @ 02/21/24 00:09:27.229
  STEP: watching @ 02/21/24 00:09:27.281
  Feb 21 00:09:27.281: INFO: starting watch
  STEP: getting @ 02/21/24 00:09:27.311
  STEP: listing in namespace @ 02/21/24 00:09:27.313
  STEP: listing across namespaces @ 02/21/24 00:09:27.315
  STEP: patching @ 02/21/24 00:09:27.318
  STEP: updating @ 02/21/24 00:09:27.325
  Feb 21 00:09:27.331: INFO: waiting for watch events with expected annotations in namespace
  Feb 21 00:09:27.331: INFO: waiting for watch events with expected annotations across namespace
  STEP: deleting @ 02/21/24 00:09:27.331
  STEP: deleting a collection @ 02/21/24 00:09:27.342
  Feb 21 00:09:27.359: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csistoragecapacity-9214" for this suite. @ 02/21/24 00:09:27.362
• [0.995 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should deny crd creation [Conformance]
test/e2e/apimachinery/webhook.go:301
  STEP: Creating a kubernetes client @ 02/21/24 00:09:27.369
  Feb 21 00:09:27.369: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/21/24 00:09:27.37
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:27.415
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:27.417
  E0221 00:09:27.517700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Setting up server cert @ 02/21/24 00:09:28.19
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/21/24 00:09:28.468
  STEP: Deploying the webhook pod @ 02/21/24 00:09:28.478
  STEP: Wait for the deployment to be ready @ 02/21/24 00:09:28.493
  Feb 21 00:09:28.498: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0221 00:09:28.518301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:29.518776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:30.518827      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:30.531: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 9, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 9, 29, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 9, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 9, 29, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-webhook-deployment-7646f658cc\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:09:31.519266      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:32.519816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 02/21/24 00:09:32.537
  STEP: Verifying the service has paired with the endpoint @ 02/21/24 00:09:32.554
  E0221 00:09:33.520571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:09:33.555: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  STEP: Registering the crd webhook via the AdmissionRegistration API @ 02/21/24 00:09:33.575
  STEP: Creating a custom resource definition that should be denied by the webhook @ 02/21/24 00:09:33.61
  Feb 21 00:09:33.610: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:09:33.620: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-1002" for this suite. @ 02/21/24 00:09:33.676
  STEP: Destroying namespace "webhook-markers-7217" for this suite. @ 02/21/24 00:09:33.685
• [6.322 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:46
  STEP: Creating a kubernetes client @ 02/21/24 00:09:33.692
  Feb 21 00:09:33.692: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:09:33.693
  E0221 00:09:34.521238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:34.625
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:34.637
  STEP: Creating projection with secret that has name projected-secret-test-ac790399-7e6c-4ee7-ba46-f31fe2cf1a12 @ 02/21/24 00:09:34.645
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:09:34.663
  E0221 00:09:35.522241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:36.522275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:37.522614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:38.523103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:09:38.708
  Feb 21 00:09:38.718: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-fff0cbeb-dbde-4423-a361-ba416b41591f container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:09:38.739
  Feb 21 00:09:38.802: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6518" for this suite. @ 02/21/24 00:09:38.81
• [5.132 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:69
  STEP: Creating a kubernetes client @ 02/21/24 00:09:38.826
  Feb 21 00:09:38.826: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:09:38.826
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:39.227
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:39.229
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:09:39.233
  E0221 00:09:39.523448      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:40.523586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:41.524021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:42.524263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:09:43.281
  Feb 21 00:09:43.291: INFO: Trying to get logs from node control-plane pod downwardapi-volume-4b9c8311-f087-4cdb-8f15-22772fba7641 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:09:43.311
  Feb 21 00:09:43.373: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-7512" for this suite. @ 02/21/24 00:09:43.385
• [4.578 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a configMap. [Conformance]
test/e2e/apimachinery/resource_quota.go:328
  STEP: Creating a kubernetes client @ 02/21/24 00:09:43.404
  Feb 21 00:09:43.404: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:09:43.405
  E0221 00:09:43.524485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:09:43.843
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:09:43.853
  E0221 00:09:44.524796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:45.525250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:46.526089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:47.526458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:48.527513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:49.527772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:50.528531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:51.529160      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:52.529751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:53.530259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:54.531034      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:55.531731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:56.531996      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:57.532587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:58.533354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:09:59.534408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:00.534518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Counting existing ResourceQuota @ 02/21/24 00:10:00.869
  E0221 00:10:01.534967      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:02.535622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:03.535832      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:04.536935      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:05.537125      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:10:05.885
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:10:05.909
  E0221 00:10:06.537402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:07.537491      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ConfigMap @ 02/21/24 00:10:07.922
  STEP: Ensuring resource quota status captures configMap creation @ 02/21/24 00:10:07.975
  E0221 00:10:08.537854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:09.538998      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a ConfigMap @ 02/21/24 00:10:09.986
  STEP: Ensuring resource quota status released usage @ 02/21/24 00:10:10.012
  E0221 00:10:10.540064      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:11.540667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:10:12.023: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-437" for this suite. @ 02/21/24 00:10:12.037
• [28.669 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] NoExecuteTaintManager Multiple Pods [Serial] evicts pods with minTolerationSeconds [Disruptive] [Conformance]
test/e2e/node/taints.go:450
  STEP: Creating a kubernetes client @ 02/21/24 00:10:12.074
  Feb 21 00:10:12.074: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename taint-multiple-pods @ 02/21/24 00:10:12.076
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:10:12.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:10:12.196
  Feb 21 00:10:12.200: INFO: Waiting up to 1m0s for all nodes to be ready
  E0221 00:10:12.541227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:13.541158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:14.541478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:15.542631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:16.543161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:17.543778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:18.544150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:19.544808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:20.545552      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:21.546547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:22.546537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:23.546949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:24.547900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:25.548101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:26.548349      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:27.549054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:28.549168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:29.549448      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:30.550349      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:31.550796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:32.551135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:33.551571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:34.551722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:35.551880      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:36.553221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:37.553479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:38.553606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:39.554185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:40.555386      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:41.555729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:42.555864      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:43.556323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:44.556285      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:45.556936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:46.557871      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:47.558381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:48.559233      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:49.560320      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:50.561241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:51.561794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:52.562219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:53.562425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:54.562777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:55.563369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:56.564272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:57.564717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:58.565573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:10:59.566040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:00.566307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:01.566579      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:02.566945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:03.567701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:04.568262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:05.569263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:06.569698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:07.570333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:08.570502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:09.571037      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:10.572070      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:11.572731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:11:12.243: INFO: Waiting for terminating namespaces to be deleted...
  Feb 21 00:11:12.250: INFO: Starting informer...
  STEP: Starting pods... @ 02/21/24 00:11:12.25
  E0221 00:11:12.573384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:11:12.894: INFO: Pod1 is running on control-plane. Tainting Node
  E0221 00:11:13.573399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:14.574457      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:11:15.157: INFO: Pod2 is running on control-plane. Tainting Node
  STEP: Trying to apply a taint on the Node @ 02/21/24 00:11:15.157
  STEP: verifying the node has the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 02/21/24 00:11:15.197
  STEP: Waiting for Pod1 and Pod2 to be deleted @ 02/21/24 00:11:15.208
  E0221 00:11:15.575478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:16.576754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:17.577168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:18.578088      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:19.578737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:20.579054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:21.579963      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:11:21.802: INFO: Noticed Pod "taint-eviction-b1" gets evicted.
  E0221 00:11:22.580129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:23.580896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:24.581471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:25.582240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:26.582910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:27.583929      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:28.584568      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:29.585202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:30.585932      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:31.586586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:32.586970      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:33.587467      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:34.587936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:35.589292      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:36.589279      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:37.590367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:38.590635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:39.591174      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:40.592140      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:41.593086      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:42.593898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:11:43.042: INFO: Noticed Pod "taint-eviction-b2" gets evicted.
  Feb 21 00:11:43.042: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: verifying the node doesn't have the taint kubernetes.io/e2e-evict-taint-key=evictTaintVal:NoExecute @ 02/21/24 00:11:43.227
  STEP: Destroying namespace "taint-multiple-pods-1625" for this suite. @ 02/21/24 00:11:43.239
• [91.188 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with configmap pod with mountPath of existing file [Conformance]
test/e2e/storage/subpath.go:79
  STEP: Creating a kubernetes client @ 02/21/24 00:11:43.263
  Feb 21 00:11:43.263: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subpath @ 02/21/24 00:11:43.265
  E0221 00:11:43.595108      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:11:43.699
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:11:43.708
  STEP: Setting up data @ 02/21/24 00:11:43.716
  STEP: Creating pod pod-subpath-test-configmap-rvn2 @ 02/21/24 00:11:43.919
  STEP: Creating a pod to test atomic-volume-subpath @ 02/21/24 00:11:43.919
  E0221 00:11:44.595941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:45.596797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:46.597625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:47.598552      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:48.599113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:49.599622      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:50.600107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:51.600127      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:52.600295      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:53.600767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:54.601236      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:55.601879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:56.602815      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:57.603073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:58.604036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:11:59.604271      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:00.604953      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:01.605379      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:02.605296      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:03.605573      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:04.605659      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:05.606177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:06.607408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:07.607967      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:12:08.153
  Feb 21 00:12:08.163: INFO: Trying to get logs from node control-plane pod pod-subpath-test-configmap-rvn2 container test-container-subpath-configmap-rvn2: <nil>
  STEP: delete the pod @ 02/21/24 00:12:08.19
  STEP: Deleting pod pod-subpath-test-configmap-rvn2 @ 02/21/24 00:12:08.213
  Feb 21 00:12:08.213: INFO: Deleting pod "pod-subpath-test-configmap-rvn2" in namespace "subpath-5328"
  Feb 21 00:12:08.216: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-5328" for this suite. @ 02/21/24 00:12:08.22
• [24.966 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: udp [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:95
  STEP: Creating a kubernetes client @ 02/21/24 00:12:08.229
  Feb 21 00:12:08.229: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pod-network-test @ 02/21/24 00:12:08.23
  E0221 00:12:08.608180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:08.609
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:08.617
  STEP: Performing setup for networking test in namespace pod-network-test-5861 @ 02/21/24 00:12:08.624
  STEP: creating a selector @ 02/21/24 00:12:08.624
  STEP: Creating the service pods in kubernetes @ 02/21/24 00:12:08.625
  Feb 21 00:12:08.625: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0221 00:12:09.608667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:10.609192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:11.609945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:12.610341      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:13.610956      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:14.611461      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:15.612111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:16.612673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:17.612838      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:18.613596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:19.614580      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:20.614959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 02/21/24 00:12:20.848
  E0221 00:12:21.615242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:22.615994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:23.616487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:24.616738      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:12:24.904: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Feb 21 00:12:24.904: INFO: Breadth first check of 10.1.171.68 on host 10.100.138.108...
  Feb 21 00:12:24.915: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.235.188:9080/dial?request=hostname&protocol=udp&host=10.1.171.68&port=8081&tries=1'] Namespace:pod-network-test-5861 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:12:24.915: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:12:24.916: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:12:24.917: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-5861/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.235.188%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.1.171.68%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Feb 21 00:12:25.019: INFO: Waiting for responses: map[]
  Feb 21 00:12:25.019: INFO: reached 10.1.171.68 after 0/1 tries
  Feb 21 00:12:25.019: INFO: Breadth first check of 10.1.235.187 on host 10.100.138.210...
  Feb 21 00:12:25.022: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.235.188:9080/dial?request=hostname&protocol=udp&host=10.1.235.187&port=8081&tries=1'] Namespace:pod-network-test-5861 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:12:25.022: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:12:25.022: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:12:25.022: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-5861/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.235.188%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dudp%26host%3D10.1.235.187%26port%3D8081%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Feb 21 00:12:25.050: INFO: Waiting for responses: map[]
  Feb 21 00:12:25.050: INFO: reached 10.1.235.187 after 0/1 tries
  Feb 21 00:12:25.050: INFO: Going to retry 0 out of 2 pods....
  Feb 21 00:12:25.051: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-5861" for this suite. @ 02/21/24 00:12:25.055
• [16.835 seconds]
------------------------------
SSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates resource limits of pods that are allowed to run  [Conformance]
test/e2e/scheduling/predicates.go:332
  STEP: Creating a kubernetes client @ 02/21/24 00:12:25.065
  Feb 21 00:12:25.065: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-pred @ 02/21/24 00:12:25.066
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:25.538
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:25.545
  Feb 21 00:12:25.553: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Feb 21 00:12:25.575: INFO: Waiting for terminating namespaces to be deleted...
  Feb 21 00:12:25.581: INFO: 
  Logging pods the apiserver thinks is on node worker before test
  Feb 21 00:12:25.595: INFO: calico-node-psfx2 from kube-system started at 2024-02-20 22:52:21 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: sonobuoy-e2e-job-f933256834384d63 from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container e2e ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-852jd from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: sonobuoy from sonobuoy started at 2024-02-20 23:00:07 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: coredns-864597b5fd-jrm2t from kube-system started at 2024-02-20 23:28:47 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container coredns ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: calico-kube-controllers-77bd7c5b-p4cwm from kube-system started at 2024-02-21 00:11:15 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: netserver-0 from pod-network-test-5861 started at 2024-02-21 00:12:09 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.595: INFO: 	Container webserver ready: true, restart count 0
  Feb 21 00:12:25.595: INFO: 
  Logging pods the apiserver thinks is on node control-plane before test
  Feb 21 00:12:25.605: INFO: calico-node-8lb8x from kube-system started at 2024-02-20 22:52:26 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.605: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:12:25.605: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn from sonobuoy started at 2024-02-20 23:00:18 +0000 UTC (2 container statuses recorded)
  Feb 21 00:12:25.605: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:12:25.605: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 21 00:12:25.605: INFO: netserver-1 from pod-network-test-5861 started at 2024-02-21 00:12:09 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.605: INFO: 	Container webserver ready: true, restart count 0
  Feb 21 00:12:25.605: INFO: test-container-pod from pod-network-test-5861 started at 2024-02-21 00:12:21 +0000 UTC (1 container statuses recorded)
  Feb 21 00:12:25.605: INFO: 	Container webserver ready: true, restart count 0
  E0221 00:12:25.616914      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: verifying the node has the label node worker @ 02/21/24 00:12:25.633
  STEP: verifying the node has the label node control-plane @ 02/21/24 00:12:25.653
  Feb 21 00:12:25.673: INFO: Pod calico-node-psfx2 requesting resource cpu=250m on Node worker
  Feb 21 00:12:25.673: INFO: Pod calico-node-8lb8x requesting resource cpu=250m on Node control-plane
  Feb 21 00:12:25.673: INFO: Pod sonobuoy-e2e-job-f933256834384d63 requesting resource cpu=0m on Node worker
  Feb 21 00:12:25.673: INFO: Pod sonobuoy-systemd-logs-daemon-set-c296e959ad004788-852jd requesting resource cpu=0m on Node worker
  Feb 21 00:12:25.673: INFO: Pod sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn requesting resource cpu=0m on Node control-plane
  Feb 21 00:12:25.673: INFO: Pod sonobuoy requesting resource cpu=0m on Node worker
  Feb 21 00:12:25.673: INFO: Pod coredns-864597b5fd-jrm2t requesting resource cpu=100m on Node worker
  Feb 21 00:12:25.673: INFO: Pod calico-kube-controllers-77bd7c5b-p4cwm requesting resource cpu=0m on Node worker
  Feb 21 00:12:25.673: INFO: Pod netserver-0 requesting resource cpu=0m on Node worker
  Feb 21 00:12:25.673: INFO: Pod netserver-1 requesting resource cpu=0m on Node control-plane
  Feb 21 00:12:25.673: INFO: Pod test-container-pod requesting resource cpu=0m on Node control-plane
  STEP: Starting Pods to consume most of the cluster CPU. @ 02/21/24 00:12:25.673
  Feb 21 00:12:25.673: INFO: Creating a pod which consumes cpu=2555m on Node worker
  Feb 21 00:12:25.686: INFO: Creating a pod which consumes cpu=2625m on Node control-plane
  E0221 00:12:26.617702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:27.618468      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:28.619597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:29.620390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating another pod that requires unavailable amount of CPU. @ 02/21/24 00:12:29.74
  STEP: Considering event: 
  Type = [Warning], Name = [filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92.17b5b85d92d3c210], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 node(s) didn't match Pod's node affinity/selector. preemption: 0/2 nodes are available: 2 Preemption is not helpful for scheduling..] @ 02/21/24 00:12:29.752
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c.17b5b85d942eeb5d], Reason = [Scheduled], Message = [Successfully assigned sched-pred-6041/filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c to control-plane] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c.17b5b85dbdcbe8fb], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c.17b5b85dbed04d09], Reason = [Created], Message = [Created container filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c.17b5b85dc187da9e], Reason = [Started], Message = [Started container filler-pod-fa6f0772-bf42-4070-b692-d2c55607e71c] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92.17b5b85e000bfc3b], Reason = [Scheduled], Message = [Successfully assigned sched-pred-6041/filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92 to worker] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92.17b5b85e1f94e8dc], Reason = [Pulled], Message = [Container image "registry.k8s.io/pause:3.9" already present on machine] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92.17b5b85e20a16deb], Reason = [Created], Message = [Created container filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Normal], Name = [filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92.17b5b85e23336f0c], Reason = [Started], Message = [Started container filler-pod-e40cef79-c477-49ff-bb7a-8ec815d15e92] @ 02/21/24 00:12:29.753
  STEP: Considering event: 
  Type = [Warning], Name = [additional-pod.17b5b85e92350a35], Reason = [FailedScheduling], Message = [0/2 nodes are available: 2 Insufficient cpu. preemption: 0/2 nodes are available: 2 No preemption victims found for incoming pod..] @ 02/21/24 00:12:30.186
  E0221 00:12:30.621026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label node off the node worker @ 02/21/24 00:12:30.796
  STEP: verifying the node doesn't have the label node @ 02/21/24 00:12:30.836
  STEP: removing the label node off the node control-plane @ 02/21/24 00:12:30.841
  STEP: verifying the node doesn't have the label node @ 02/21/24 00:12:30.859
  Feb 21 00:12:30.866: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-6041" for this suite. @ 02/21/24 00:12:30.872
• [5.815 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:89
  STEP: Creating a kubernetes client @ 02/21/24 00:12:30.881
  Feb 21 00:12:30.881: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:12:30.881
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:31.03
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:31.033
  STEP: Creating configMap with name projected-configmap-test-volume-map-64915d10-20d6-4d60-9bab-3bcb3d2f5222 @ 02/21/24 00:12:31.037
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:12:31.047
  E0221 00:12:31.621803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:32.622675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:33.624054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:34.624601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:12:35.088
  Feb 21 00:12:35.098: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-c78d5228-5ca5-4558-9bba-91c1e5a02ee3 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:12:35.119
  Feb 21 00:12:35.173: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-1146" for this suite. @ 02/21/24 00:12:35.182
• [4.319 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource with different stored version [Conformance]
test/e2e/apimachinery/webhook.go:315
  STEP: Creating a kubernetes client @ 02/21/24 00:12:35.2
  Feb 21 00:12:35.200: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/21/24 00:12:35.202
  E0221 00:12:35.625545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:35.709
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:35.714
  STEP: Setting up server cert @ 02/21/24 00:12:35.836
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/21/24 00:12:36.082
  STEP: Deploying the webhook pod @ 02/21/24 00:12:36.1
  STEP: Wait for the deployment to be ready @ 02/21/24 00:12:36.119
  Feb 21 00:12:36.128: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0221 00:12:36.626110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:37.626906      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 02/21/24 00:12:38.165
  STEP: Verifying the service has paired with the endpoint @ 02/21/24 00:12:38.213
  E0221 00:12:38.627256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:12:39.214: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Feb 21 00:12:39.234: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:12:39.627387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-8450-crds.webhook.example.com via the AdmissionRegistration API @ 02/21/24 00:12:39.754
  STEP: Creating a custom resource while v1 is storage version @ 02/21/24 00:12:39.775
  E0221 00:12:40.627863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:41.628352      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Patching Custom Resource Definition to set v2 as storage @ 02/21/24 00:12:41.805
  STEP: Patching the custom resource while v2 is storage version @ 02/21/24 00:12:41.822
  Feb 21 00:12:41.867: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "webhook-2625" for this suite. @ 02/21/24 00:12:42.438
  STEP: Destroying namespace "webhook-markers-2381" for this suite. @ 02/21/24 00:12:42.458
• [7.274 seconds]
------------------------------
SSS
------------------------------
[sig-storage] Downward API volume should set DefaultMode on files [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:69
  STEP: Creating a kubernetes client @ 02/21/24 00:12:42.474
  Feb 21 00:12:42.474: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:12:42.475
  E0221 00:12:42.628381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:42.716
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:42.719
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:12:42.721
  E0221 00:12:43.629382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:44.629809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:45.630733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:46.630884      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:12:46.761
  Feb 21 00:12:46.772: INFO: Trying to get logs from node control-plane pod downwardapi-volume-8475cce6-442e-45d6-806e-4f96833dc828 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:12:46.793
  Feb 21 00:12:46.860: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-1360" for this suite. @ 02/21/24 00:12:46.866
• [4.401 seconds]
------------------------------
[sig-node] Downward API should provide host IP as an env var [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:91
  STEP: Creating a kubernetes client @ 02/21/24 00:12:46.876
  Feb 21 00:12:46.876: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:12:46.876
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:47.287
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:47.289
  STEP: Creating a pod to test downward api env vars @ 02/21/24 00:12:47.291
  E0221 00:12:47.631191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:48.631672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:49.631788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:50.631796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:12:51.324
  Feb 21 00:12:51.335: INFO: Trying to get logs from node control-plane pod downward-api-688c02a9-48d7-4822-87f8-91b6daad1578 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:12:51.358
  Feb 21 00:12:51.406: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5406" for this suite. @ 02/21/24 00:12:51.41
• [4.543 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to change the type from NodePort to ExternalName [Conformance]
test/e2e/network/service.go:1533
  STEP: Creating a kubernetes client @ 02/21/24 00:12:51.42
  Feb 21 00:12:51.420: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/21/24 00:12:51.42
  E0221 00:12:51.633110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:12:52.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:12:52.196
  STEP: creating a service nodeport-service with the type=NodePort in namespace services-3712 @ 02/21/24 00:12:52.204
  STEP: Creating active service to test reachability when its FQDN is referred as externalName for another service @ 02/21/24 00:12:52.267
  STEP: creating service externalsvc in namespace services-3712 @ 02/21/24 00:12:52.268
  STEP: creating replication controller externalsvc in namespace services-3712 @ 02/21/24 00:12:52.297
  I0221 00:12:52.307450      22 runners.go:197] Created replication controller with name: externalsvc, namespace: services-3712, replica count: 2
  E0221 00:12:52.633137      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:53.633678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:54.634142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0221 00:12:55.358760      22 runners.go:197] externalsvc Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  STEP: changing the NodePort service to type=ExternalName @ 02/21/24 00:12:55.368
  Feb 21 00:12:55.438: INFO: Creating new exec pod
  E0221 00:12:55.635128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:56.635480      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:12:57.466: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-3712 exec execpod49knk -- /bin/sh -x -c nslookup nodeport-service.services-3712.svc.cluster.local'
  Feb 21 00:12:57.591: INFO: stderr: "+ nslookup nodeport-service.services-3712.svc.cluster.local\n"
  Feb 21 00:12:57.591: INFO: stdout: "Server:\t\t10.152.183.10\nAddress:\t10.152.183.10#53\n\nnodeport-service.services-3712.svc.cluster.local\tcanonical name = externalsvc.services-3712.svc.cluster.local.\nName:\texternalsvc.services-3712.svc.cluster.local\nAddress: 10.152.183.174\n\n"
  Feb 21 00:12:57.591: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting ReplicationController externalsvc in namespace services-3712, will wait for the garbage collector to delete the pods @ 02/21/24 00:12:57.597
  E0221 00:12:57.636181      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:12:57.670: INFO: Deleting ReplicationController externalsvc took: 19.64228ms
  Feb 21 00:12:58.170: INFO: Terminating ReplicationController externalsvc pods took: 500.565084ms
  E0221 00:12:58.636921      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:12:59.637590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:00.638143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:13:01.338: INFO: Cleaning up the NodePort to ExternalName test service
  STEP: Destroying namespace "services-3712" for this suite. @ 02/21/24 00:13:01.384
• [9.999 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should patch a pod status [Conformance]
test/e2e/common/node/pods.go:1084
  STEP: Creating a kubernetes client @ 02/21/24 00:13:01.419
  Feb 21 00:13:01.419: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/21/24 00:13:01.42
  E0221 00:13:01.638948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:02.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:02.196
  STEP: Create a pod @ 02/21/24 00:13:02.204
  E0221 00:13:02.639665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:03.640731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:04.640937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:05.641283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: patching /status @ 02/21/24 00:13:06.275
  Feb 21 00:13:06.304: INFO: Status Message: "Patched by e2e test" and Reason: "E2E"
  Feb 21 00:13:06.304: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-1455" for this suite. @ 02/21/24 00:13:06.319
• [4.933 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a volume subpath [Conformance]
test/e2e/common/node/expansion.go:115
  STEP: Creating a kubernetes client @ 02/21/24 00:13:06.353
  Feb 21 00:13:06.353: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:13:06.355
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:06.467
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:06.469
  STEP: Creating a pod to test substitution in volume subpath @ 02/21/24 00:13:06.471
  E0221 00:13:06.641969      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:07.642928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:08.643483      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:09.643862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:13:10.511
  Feb 21 00:13:10.522: INFO: Trying to get logs from node control-plane pod var-expansion-cf796eb8-7263-4f54-bbb6-cf072ff3c8ce container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:13:10.542
  Feb 21 00:13:10.599: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-6875" for this suite. @ 02/21/24 00:13:10.606
• [4.268 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-instrumentation] Events should delete a collection of events [Conformance]
test/e2e/instrumentation/core_events.go:175
  STEP: Creating a kubernetes client @ 02/21/24 00:13:10.621
  Feb 21 00:13:10.621: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename events @ 02/21/24 00:13:10.622
  E0221 00:13:10.643787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:10.904
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:10.91
  STEP: Create set of events @ 02/21/24 00:13:10.915
  Feb 21 00:13:10.930: INFO: created test-event-1
  Feb 21 00:13:10.944: INFO: created test-event-2
  Feb 21 00:13:10.959: INFO: created test-event-3
  STEP: get a list of Events with a label in the current namespace @ 02/21/24 00:13:10.959
  STEP: delete collection of events @ 02/21/24 00:13:10.966
  Feb 21 00:13:10.966: INFO: requesting DeleteCollection of events
  STEP: check that the list of events matches the requested quantity @ 02/21/24 00:13:11.032
  Feb 21 00:13:11.032: INFO: requesting list of events to confirm quantity
  Feb 21 00:13:11.039: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-8464" for this suite. @ 02/21/24 00:13:11.045
• [0.436 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:147
  STEP: Creating a kubernetes client @ 02/21/24 00:13:11.06
  Feb 21 00:13:11.060: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:13:11.061
  E0221 00:13:11.644698      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:12.192
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:12.203
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 02/21/24 00:13:12.211
  E0221 00:13:12.645438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:13.645759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:14.646213      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:15.646558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:13:16.353
  Feb 21 00:13:16.363: INFO: Trying to get logs from node control-plane pod pod-05f4eee1-a5e1-44c1-a0fb-c060c70b1fae container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:13:16.427
  Feb 21 00:13:16.460: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4465" for this suite. @ 02/21/24 00:13:16.463
• [5.410 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of same group but different versions [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:309
  STEP: Creating a kubernetes client @ 02/21/24 00:13:16.471
  Feb 21 00:13:16.471: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/21/24 00:13:16.471
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:16.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:16.505
  STEP: CRs in the same group but different versions (one multiversion CRD) show up in OpenAPI documentation @ 02/21/24 00:13:16.508
  Feb 21 00:13:16.508: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:13:16.647174      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:17.647651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:18.648428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:19.649037      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:20.649391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:21.649996      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: CRs in the same group but different versions (two CRDs) show up in OpenAPI documentation @ 02/21/24 00:13:21.769
  Feb 21 00:13:21.769: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:13:22.650545      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:13:23.105: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:13:23.651435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:24.652392      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:25.652949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:26.653603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:27.654614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:13:28.309: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-7231" for this suite. @ 02/21/24 00:13:28.315
• [11.856 seconds]
------------------------------
[sig-node] Lease lease API should be available [Conformance]
test/e2e/common/node/lease.go:72
  STEP: Creating a kubernetes client @ 02/21/24 00:13:28.327
  Feb 21 00:13:28.327: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename lease-test @ 02/21/24 00:13:28.327
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:28.58
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:28.589
  E0221 00:13:28.655197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:13:28.835: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "lease-test-6577" for this suite. @ 02/21/24 00:13:28.838
• [0.519 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that there exists conflict between pods with same hostPort and protocol but one using 0.0.0.0 hostIP [Conformance]
test/e2e/scheduling/predicates.go:705
  STEP: Creating a kubernetes client @ 02/21/24 00:13:28.846
  Feb 21 00:13:28.846: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-pred @ 02/21/24 00:13:28.847
  E0221 00:13:29.655680      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:13:30.072
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:13:30.08
  Feb 21 00:13:30.088: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Feb 21 00:13:30.112: INFO: Waiting for terminating namespaces to be deleted...
  Feb 21 00:13:30.125: INFO: 
  Logging pods the apiserver thinks is on node worker before test
  Feb 21 00:13:30.147: INFO: calico-node-psfx2 from kube-system started at 2024-02-20 22:52:21 +0000 UTC (1 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: sonobuoy-e2e-job-f933256834384d63 from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container e2e ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-852jd from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: sonobuoy from sonobuoy started at 2024-02-20 23:00:07 +0000 UTC (1 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: coredns-864597b5fd-jrm2t from kube-system started at 2024-02-20 23:28:47 +0000 UTC (1 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container coredns ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: calico-kube-controllers-77bd7c5b-p4cwm from kube-system started at 2024-02-21 00:11:15 +0000 UTC (1 container statuses recorded)
  Feb 21 00:13:30.147: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Feb 21 00:13:30.147: INFO: 
  Logging pods the apiserver thinks is on node control-plane before test
  Feb 21 00:13:30.158: INFO: calico-node-8lb8x from kube-system started at 2024-02-20 22:52:26 +0000 UTC (1 container statuses recorded)
  Feb 21 00:13:30.158: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:13:30.158: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn from sonobuoy started at 2024-02-20 23:00:18 +0000 UTC (2 container statuses recorded)
  Feb 21 00:13:30.158: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:13:30.158: INFO: 	Container systemd-logs ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 02/21/24 00:13:30.158
  E0221 00:13:30.656046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:31.656289      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:32.656333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:33.656606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Explicitly delete pod here to free the resource it takes. @ 02/21/24 00:13:34.217
  STEP: Trying to apply a random label on the found node. @ 02/21/24 00:13:34.282
  STEP: verifying the node has the label kubernetes.io/e2e-2a1912e3-dbe5-45c1-9274-2bf8d4bbe147 95 @ 02/21/24 00:13:34.292
  STEP: Trying to create a pod(pod4) with hostport 54322 and hostIP 0.0.0.0(empty string here) and expect scheduled @ 02/21/24 00:13:34.303
  E0221 00:13:34.656696      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:35.657323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to create another pod(pod5) with hostport 54322 but hostIP 10.100.138.210 on the node which pod4 resides and expect not scheduled @ 02/21/24 00:13:36.328
  E0221 00:13:36.658382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:37.658700      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:38.659656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:39.660388      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:40.661227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:41.661838      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:42.662049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:43.662555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:44.663497      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:45.664253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:46.664319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:47.664342      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:48.665402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:49.666757      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:50.667849      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:51.668503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:52.669295      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:53.669804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:54.670681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:55.671515      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:56.671571      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:57.671949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:58.672764      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:13:59.673388      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:00.673559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:01.674633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:02.674683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:03.675137      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:04.675409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:05.676058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:06.676807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:07.678004      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:08.678237      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:09.678575      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:10.679066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:11.679729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:12.680368      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:13.680896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:14.681975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:15.682051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:16.682247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:17.682869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:18.683434      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:19.683778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:20.684322      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:21.685120      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:22.686031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:23.686653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:24.687802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:25.687989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:26.688326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:27.688863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:28.689951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:29.690316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:30.691124      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:31.691578      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:32.691810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:33.692316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:34.693052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:35.693282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:36.694130      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:37.694678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:38.695196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:39.696064      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:40.697254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:41.697347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:42.698233      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:43.698623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:44.699728      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:45.700429      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:46.701111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:47.701447      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:48.702104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:49.702302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:50.702710      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:51.703634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:52.704399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:53.705385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:54.705893      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:55.706204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:56.706763      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:57.707239      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:58.707767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:14:59.707992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:00.708195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:01.708487      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:02.709218      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:03.709462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:04.710518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:05.711395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:06.712380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:07.712876      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:08.713845      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:09.714234      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:10.714258      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:11.714688      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:12.715353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:13.715865      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:14.716558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:15.717104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:16.717495      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:17.718354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:18.718882      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:19.718949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:20.719277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:21.719637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:22.720265      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:23.720678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:24.720816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:25.721260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:26.721993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:27.722301      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:28.723139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:29.723335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:30.723712      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:31.724483      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:32.725109      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:33.725995      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:34.726627      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:35.727267      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:36.728042      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:37.728902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:38.729404      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:39.730576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:40.731063      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:41.731657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:42.732163      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:43.732576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:44.733303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:45.734291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:46.734531      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:47.735383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:48.736000      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:49.736303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:50.736514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:51.736465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:52.737760      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:53.738181      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:54.739059      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:55.739468      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:56.739933      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:57.740527      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:58.741144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:15:59.741352      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:00.741455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:01.742583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:02.743207      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:03.743611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:04.744214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:05.744574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:06.745333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:07.745875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:08.746440      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:09.747279      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:10.747837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:11.748289      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:12.748318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:13.748445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:14.749145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:15.749268      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:16.750052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:17.750851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:18.751511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:19.752509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:20.752898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:21.753553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:22.754158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:23.755474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:24.756230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:25.756941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:26.758246      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:27.758494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:28.759167      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:29.759373      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:30.759801      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:31.760778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:32.761247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:33.762168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:34.762521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:35.763447      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:36.764054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:37.764856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:38.764973      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:39.765039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:40.765816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:41.766169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:42.766530      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:43.766558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:44.766999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:45.767705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:46.768386      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:47.768787      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:48.768799      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:49.769275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:50.770274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:51.770626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:52.771341      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:53.772391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:54.773082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:55.773141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:56.773637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:57.774043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:58.774482      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:16:59.775067      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:00.775195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:01.775839      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:02.777201      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:03.777232      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:04.778151      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:05.779160      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:06.779860      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:07.779941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:08.780847      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:09.781543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:10.781879      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:11.782731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:12.783359      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:13.784224      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:14.784619      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:15.785231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:16.785694      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:17.785758      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:18.786590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:19.786886      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:20.787606      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:21.787821      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:22.788513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:23.788603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:24.789175      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:25.789762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:26.790298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:27.791070      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:28.791811      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:29.791922      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:30.792235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:31.792650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:32.793084      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:33.793214      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:34.793854      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:35.793970      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:36.794484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:37.795173      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:38.795791      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:39.796553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:40.797190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:41.797729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:42.797828      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:43.797986      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:44.799130      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:45.799012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:46.799738      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:47.800683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:48.800909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:49.801113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:50.801731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:51.802547      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:52.803186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:53.803827      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:54.804227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:55.804589      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:56.805470      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:57.805737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:58.806022      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:17:59.806672      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:00.806615      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:01.807039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:02.808062      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:03.808416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:04.808643      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:05.808870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:06.809532      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:07.809993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:08.810591      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:09.811639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:10.811863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:11.812351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:12.812503      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:13.813161      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:14.813413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:15.813903      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:16.815166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:17.815777      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:18.816380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:19.816954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:20.817962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:21.818624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:22.819602      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:23.820206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:24.821015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:25.820945      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:26.821844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:27.822421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:28.822490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:29.823111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:30.823451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:31.824123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:32.824690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:33.825142      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:34.826322      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:35.827149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label kubernetes.io/e2e-2a1912e3-dbe5-45c1-9274-2bf8d4bbe147 off the node control-plane @ 02/21/24 00:18:36.364
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-2a1912e3-dbe5-45c1-9274-2bf8d4bbe147 @ 02/21/24 00:18:36.414
  Feb 21 00:18:36.434: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-942" for this suite. @ 02/21/24 00:18:36.438
• [307.602 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a secret. [Conformance]
test/e2e/apimachinery/resource_quota.go:161
  STEP: Creating a kubernetes client @ 02/21/24 00:18:36.448
  Feb 21 00:18:36.448: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:18:36.449
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:18:36.787
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:18:36.795
  STEP: Discovering how many secrets are in namespace by default @ 02/21/24 00:18:36.802
  E0221 00:18:36.827782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:37.828655      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:38.828946      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:39.829924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:40.830690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Counting existing ResourceQuota @ 02/21/24 00:18:41.81
  E0221 00:18:41.831556      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:42.832790      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:43.832960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:44.833164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:45.833678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:18:46.815
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:18:46.827
  E0221 00:18:46.834334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:47.834750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:48.835791      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Secret @ 02/21/24 00:18:48.839
  STEP: Ensuring resource quota status captures secret creation @ 02/21/24 00:18:48.928
  E0221 00:18:49.835896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:50.835942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting a secret @ 02/21/24 00:18:50.941
  STEP: Ensuring resource quota status released usage @ 02/21/24 00:18:50.965
  E0221 00:18:51.836315      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:52.836598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:18:52.978: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-8927" for this suite. @ 02/21/24 00:18:52.992
• [16.570 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (non-root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:127
  STEP: Creating a kubernetes client @ 02/21/24 00:18:53.02
  Feb 21 00:18:53.020: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:18:53.022
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:18:53.578
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:18:53.586
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 02/21/24 00:18:53.595
  E0221 00:18:53.837206      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:54.837814      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:55.838660      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:56.839294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:18:57.661
  Feb 21 00:18:57.672: INFO: Trying to get logs from node control-plane pod pod-52c486d4-820d-4634-8405-bd97595bf34f container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:18:57.707
  Feb 21 00:18:57.757: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-9067" for this suite. @ 02/21/24 00:18:57.766
• [4.759 seconds]
------------------------------
S
------------------------------
[sig-node] Downward API should provide pod name, namespace and IP address as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:45
  STEP: Creating a kubernetes client @ 02/21/24 00:18:57.778
  Feb 21 00:18:57.778: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:18:57.779
  E0221 00:18:57.839642      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:18:58.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:18:58.6
  STEP: Creating a pod to test downward api env vars @ 02/21/24 00:18:58.602
  E0221 00:18:58.840425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:18:59.840648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:00.841459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:01.842129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:19:02.639
  Feb 21 00:19:02.641: INFO: Trying to get logs from node control-plane pod downward-api-97e95e71-bb86-4164-980b-52c2d1044030 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:19:02.646
  Feb 21 00:19:02.679: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-9046" for this suite. @ 02/21/24 00:19:02.699
• [4.933 seconds]
------------------------------
SSS
------------------------------
[sig-network] DNS should provide DNS for services  [Conformance]
test/e2e/network/dns.go:137
  STEP: Creating a kubernetes client @ 02/21/24 00:19:02.712
  Feb 21 00:19:02.712: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/21/24 00:19:02.712
  E0221 00:19:02.842340      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:03.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:03.197
  STEP: Creating a test headless service @ 02/21/24 00:19:03.204
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-2130.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_udp@dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-2130.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/wheezy_tcp@dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_udp@_http._tcp.test-service-2.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/wheezy_tcp@_http._tcp.test-service-2.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 254.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.254_udp@PTR;check="$$(dig +tcp +noall +answer +search 254.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.254_tcp@PTR;sleep 1; done
   @ 02/21/24 00:19:03.265
  STEP: Running these commands on jessie: for i in `seq 1 600`; do check="$$(dig +notcp +noall +answer +search dns-test-service.dns-2130.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_udp@dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search dns-test-service.dns-2130.svc.cluster.local A)" && test -n "$$check" && echo OK > /results/jessie_tcp@dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.dns-test-service.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.dns-test-service.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search _http._tcp.test-service-2.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_udp@_http._tcp.test-service-2.dns-2130.svc.cluster.local;check="$$(dig +tcp +noall +answer +search _http._tcp.test-service-2.dns-2130.svc.cluster.local SRV)" && test -n "$$check" && echo OK > /results/jessie_tcp@_http._tcp.test-service-2.dns-2130.svc.cluster.local;check="$$(dig +notcp +noall +answer +search 254.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.254_udp@PTR;check="$$(dig +tcp +noall +answer +search 254.183.152.10.in-addr.arpa. PTR)" && test -n "$$check" && echo OK > /results/10.152.183.254_tcp@PTR;sleep 1; done
   @ 02/21/24 00:19:03.265
  STEP: creating a pod to probe DNS @ 02/21/24 00:19:03.265
  STEP: submitting the pod to kubernetes @ 02/21/24 00:19:03.265
  E0221 00:19:03.843061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:04.843529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:05.843832      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:06.843936      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 02/21/24 00:19:07.315
  STEP: looking for the results for each expected name from probers @ 02/21/24 00:19:07.322
  Feb 21 00:19:07.327: INFO: Unable to read wheezy_udp@dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.331: INFO: Unable to read wheezy_tcp@dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.335: INFO: Unable to read wheezy_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.338: INFO: Unable to read wheezy_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.354: INFO: Unable to read jessie_udp@dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.357: INFO: Unable to read jessie_tcp@dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.360: INFO: Unable to read jessie_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.363: INFO: Unable to read jessie_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local from pod dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1: the server could not find the requested resource (get pods dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1)
  Feb 21 00:19:07.375: INFO: Lookups using dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1 failed for: [wheezy_udp@dns-test-service.dns-2130.svc.cluster.local wheezy_tcp@dns-test-service.dns-2130.svc.cluster.local wheezy_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local wheezy_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local jessie_udp@dns-test-service.dns-2130.svc.cluster.local jessie_tcp@dns-test-service.dns-2130.svc.cluster.local jessie_udp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local jessie_tcp@_http._tcp.dns-test-service.dns-2130.svc.cluster.local]

  Feb 21 00:19:07.385: INFO: Pod client logs for webserver: 
  Feb 21 00:19:07.390: INFO: Pod client logs for querier: 
  Feb 21 00:19:07.395: INFO: Pod client logs for jessie-querier: 
  E0221 00:19:07.844210      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:08.844689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:09.845375      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:10.846002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:11.846290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:12.493: INFO: DNS probes using dns-2130/dns-test-b261299d-c0d3-472d-89f0-1017bddf1ed1 succeeded

  Feb 21 00:19:12.493: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:19:12.496
  STEP: deleting the test service @ 02/21/24 00:19:12.528
  STEP: deleting the test headless service @ 02/21/24 00:19:12.575
  STEP: Destroying namespace "dns-2130" for this suite. @ 02/21/24 00:19:12.589
• [9.886 seconds]
------------------------------
SSSS
------------------------------
[sig-auth] ServiceAccounts should update a ServiceAccount [Conformance]
test/e2e/auth/service_accounts.go:808
  STEP: Creating a kubernetes client @ 02/21/24 00:19:12.598
  Feb 21 00:19:12.598: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/21/24 00:19:12.598
  E0221 00:19:12.846887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:13.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:13.2
  STEP: Creating ServiceAccount "e2e-sa-j5sdb"  @ 02/21/24 00:19:13.209
  Feb 21 00:19:13.230: INFO: AutomountServiceAccountToken: false
  STEP: Updating ServiceAccount "e2e-sa-j5sdb"  @ 02/21/24 00:19:13.23
  Feb 21 00:19:13.259: INFO: AutomountServiceAccountToken: true
  Feb 21 00:19:13.259: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-5241" for this suite. @ 02/21/24 00:19:13.272
• [0.699 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context When creating a pod with readOnlyRootFilesystem should run the container with writable rootfs when readOnlyRootFilesystem=false [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:486
  STEP: Creating a kubernetes client @ 02/21/24 00:19:13.299
  Feb 21 00:19:13.299: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context-test @ 02/21/24 00:19:13.301
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:13.538
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:13.546
  E0221 00:19:13.847747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:14.848098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:15.849019      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:16.849563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:17.623: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-1703" for this suite. @ 02/21/24 00:19:17.629
• [4.342 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow composing env vars into new env vars [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:47
  STEP: Creating a kubernetes client @ 02/21/24 00:19:17.641
  Feb 21 00:19:17.641: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:19:17.642
  E0221 00:19:17.850553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:18.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:18.186
  STEP: Creating a pod to test env composition @ 02/21/24 00:19:18.188
  E0221 00:19:18.851171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:19.851778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:20.852333      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:21.853133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:19:22.232
  Feb 21 00:19:22.243: INFO: Trying to get logs from node control-plane pod var-expansion-7b65df51-1079-40ef-a164-f72cdcb79aec container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:19:22.264
  Feb 21 00:19:22.329: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-1604" for this suite. @ 02/21/24 00:19:22.342
• [4.722 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a pod. [Conformance]
test/e2e/apimachinery/resource_quota.go:232
  STEP: Creating a kubernetes client @ 02/21/24 00:19:22.363
  Feb 21 00:19:22.364: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:19:22.365
  E0221 00:19:22.853144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:23.186
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:23.19
  STEP: Counting existing ResourceQuota @ 02/21/24 00:19:23.194
  E0221 00:19:23.853819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:24.854437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:25.855112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:26.855264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:27.855909      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:19:28.21
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:19:28.236
  E0221 00:19:28.857325      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:29.857532      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Pod that fits quota @ 02/21/24 00:19:30.249
  STEP: Ensuring ResourceQuota status captures the pod usage @ 02/21/24 00:19:30.322
  E0221 00:19:30.858511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:31.858822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Not allowing a pod to be created that exceeds remaining quota @ 02/21/24 00:19:32.335
  STEP: Not allowing a pod to be created that exceeds remaining quota(validation on extended resources) @ 02/21/24 00:19:32.341
  STEP: Ensuring a pod cannot update its resource requirements @ 02/21/24 00:19:32.347
  STEP: Ensuring attempts to update pod resource requirements did not change quota usage @ 02/21/24 00:19:32.36
  E0221 00:19:32.859635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:33.860055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 02/21/24 00:19:34.376
  STEP: Ensuring resource quota status released the pod usage @ 02/21/24 00:19:34.432
  E0221 00:19:34.860393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:35.861280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:36.444: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2570" for this suite. @ 02/21/24 00:19:36.458
• [14.126 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context should support container.SecurityContext.RunAsUser And container.SecurityContext.RunAsGroup [LinuxOnly] [Conformance]
test/e2e/node/security_context.go:164
  STEP: Creating a kubernetes client @ 02/21/24 00:19:36.493
  Feb 21 00:19:36.493: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context @ 02/21/24 00:19:36.495
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:36.775
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:36.783
  STEP: Creating a pod to test pod.Spec.SecurityContext.RunAsUser @ 02/21/24 00:19:36.79
  E0221 00:19:36.862230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:37.862731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:38.863714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:39.864384      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:19:40.86
  E0221 00:19:40.864712      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:40.870: INFO: Trying to get logs from node control-plane pod security-context-5bcc80ef-5758-4f85-8cde-29eab4e9ee8e container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:19:40.89
  Feb 21 00:19:40.952: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-5112" for this suite. @ 02/21/24 00:19:40.965
• [4.494 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (memory) as default memory limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:262
  STEP: Creating a kubernetes client @ 02/21/24 00:19:40.988
  Feb 21 00:19:40.988: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:19:40.989
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:41.698
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:41.701
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:19:41.705
  E0221 00:19:41.865221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:42.866471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:43.866654      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:44.867022      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:19:45.739
  Feb 21 00:19:45.742: INFO: Trying to get logs from node control-plane pod downwardapi-volume-8f5c0878-1169-4b9f-b4bb-551d21e5f77b container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:19:45.747
  Feb 21 00:19:45.766: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6548" for this suite. @ 02/21/24 00:19:45.769
• [4.788 seconds]
------------------------------
S
------------------------------
[sig-cli] Kubectl client Kubectl server-side dry-run should check if kubectl can dry-run update Pods [Conformance]
test/e2e/kubectl/kubectl.go:1027
  STEP: Creating a kubernetes client @ 02/21/24 00:19:45.776
  Feb 21 00:19:45.776: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename kubectl @ 02/21/24 00:19:45.776
  E0221 00:19:45.867995      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:46.868483      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:47.19
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:47.197
  STEP: running the image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 02/21/24 00:19:47.205
  Feb 21 00:19:47.205: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2454 run e2e-test-httpd-pod --image=registry.k8s.io/e2e-test-images/httpd:2.4.38-4 --pod-running-timeout=2m0s --labels=run=e2e-test-httpd-pod'
  Feb 21 00:19:47.285: INFO: stderr: ""
  Feb 21 00:19:47.285: INFO: stdout: "pod/e2e-test-httpd-pod created\n"
  STEP: replace the image in the pod with server-side dry-run @ 02/21/24 00:19:47.285
  Feb 21 00:19:47.285: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2454 patch pod e2e-test-httpd-pod -p {"spec":{"containers":[{"name": "e2e-test-httpd-pod","image": "registry.k8s.io/e2e-test-images/busybox:1.29-4"}]}} --dry-run=server'
  Feb 21 00:19:47.332: INFO: stderr: ""
  Feb 21 00:19:47.332: INFO: stdout: "pod/e2e-test-httpd-pod patched\n"
  STEP: verifying the pod e2e-test-httpd-pod has the right image registry.k8s.io/e2e-test-images/httpd:2.4.38-4 @ 02/21/24 00:19:47.332
  Feb 21 00:19:47.334: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=kubectl-2454 delete pods e2e-test-httpd-pod'
  E0221 00:19:47.869303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:48.870049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:49.546: INFO: stderr: ""
  Feb 21 00:19:49.546: INFO: stdout: "pod \"e2e-test-httpd-pod\" deleted\n"
  Feb 21 00:19:49.546: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "kubectl-2454" for this suite. @ 02/21/24 00:19:49.55
• [3.786 seconds]
------------------------------
[sig-node] Pods should get a host IP [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:205
  STEP: Creating a kubernetes client @ 02/21/24 00:19:49.562
  Feb 21 00:19:49.562: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/21/24 00:19:49.563
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:49.641
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:49.643
  STEP: creating pod @ 02/21/24 00:19:49.645
  E0221 00:19:49.870104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:50.871397      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:51.690: INFO: Pod pod-hostip-5cbf0a65-7811-4713-aaf8-7eb5591714ee has hostIP: 10.100.138.210
  Feb 21 00:19:51.690: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-7762" for this suite. @ 02/21/24 00:19:51.702
• [2.164 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] CSIInlineVolumes should run through the lifecycle of a CSIDriver [Conformance]
test/e2e/storage/csi_inline.go:157
  STEP: Creating a kubernetes client @ 02/21/24 00:19:51.732
  Feb 21 00:19:51.732: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename csiinlinevolumes @ 02/21/24 00:19:51.734
  E0221 00:19:51.872115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:51.915
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:51.917
  STEP: Creating two CSIDrivers @ 02/21/24 00:19:51.919
  STEP: Getting "inline-driver-41619488-b668-412f-8bdf-0cc0c4bfa359" & "inline-driver-b1173c86-e547-424f-9207-c4bb64cb0d67" @ 02/21/24 00:19:51.936
  STEP: Patching the CSIDriver "inline-driver-b1173c86-e547-424f-9207-c4bb64cb0d67" @ 02/21/24 00:19:51.94
  STEP: Updating the CSIDriver "inline-driver-b1173c86-e547-424f-9207-c4bb64cb0d67" @ 02/21/24 00:19:51.946
  STEP: Listing all CSIDrivers with the labelSelector: "e2e-test=csiinlinevolumes-5962" @ 02/21/24 00:19:51.955
  STEP: Deleting CSIDriver "inline-driver-41619488-b668-412f-8bdf-0cc0c4bfa359" @ 02/21/24 00:19:51.957
  STEP: Confirm deletion of CSIDriver "inline-driver-41619488-b668-412f-8bdf-0cc0c4bfa359" @ 02/21/24 00:19:51.963
  STEP: Deleting CSIDriver "inline-driver-b1173c86-e547-424f-9207-c4bb64cb0d67" via DeleteCollection @ 02/21/24 00:19:51.965
  STEP: Confirm deletion of CSIDriver "inline-driver-b1173c86-e547-424f-9207-c4bb64cb0d67" @ 02/21/24 00:19:51.973
  Feb 21 00:19:51.975: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "csiinlinevolumes-5962" for this suite. @ 02/21/24 00:19:51.978
• [0.254 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass and initialize its Overhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:129
  STEP: Creating a kubernetes client @ 02/21/24 00:19:51.987
  Feb 21 00:19:51.987: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename runtimeclass @ 02/21/24 00:19:51.987
  E0221 00:19:52.872785      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:53.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:53.196
  E0221 00:19:53.873228      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:54.874420      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:19:55.284: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5212" for this suite. @ 02/21/24 00:19:55.329
• [3.367 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-api-machinery] ResourceQuota should verify ResourceQuota with best effort scope. [Conformance]
test/e2e/apimachinery/resource_quota.go:806
  STEP: Creating a kubernetes client @ 02/21/24 00:19:55.355
  Feb 21 00:19:55.355: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:19:55.357
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:19:55.804
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:19:55.807
  STEP: Creating a ResourceQuota with best effort scope @ 02/21/24 00:19:55.809
  STEP: Ensuring ResourceQuota status is calculated @ 02/21/24 00:19:55.816
  E0221 00:19:55.875104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:56.876130      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:57.876925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota with not best effort scope @ 02/21/24 00:19:57.937
  STEP: Ensuring ResourceQuota status is calculated @ 02/21/24 00:19:57.99
  E0221 00:19:58.877396      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:19:59.877893      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a best-effort pod @ 02/21/24 00:20:00.001
  STEP: Ensuring resource quota with best effort scope captures the pod usage @ 02/21/24 00:20:00.064
  E0221 00:20:00.877837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:01.878262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with not best effort ignored the pod usage @ 02/21/24 00:20:02.068
  E0221 00:20:02.878462      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:03.879040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 02/21/24 00:20:04.078
  STEP: Ensuring resource quota status released the pod usage @ 02/21/24 00:20:04.126
  E0221 00:20:04.880055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:05.880358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a not best-effort pod @ 02/21/24 00:20:06.138
  STEP: Ensuring resource quota with not best effort scope captures the pod usage @ 02/21/24 00:20:06.183
  E0221 00:20:06.880640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:07.881030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring resource quota with best effort scope ignored the pod usage @ 02/21/24 00:20:08.194
  E0221 00:20:08.882158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:09.882370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting the pod @ 02/21/24 00:20:10.205
  STEP: Ensuring resource quota status released the pod usage @ 02/21/24 00:20:10.261
  E0221 00:20:10.882711      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:11.883090      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:20:12.272: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-4368" for this suite. @ 02/21/24 00:20:12.285
• [16.970 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support proportional scaling [Conformance]
test/e2e/apps/deployment.go:160
  STEP: Creating a kubernetes client @ 02/21/24 00:20:12.327
  Feb 21 00:20:12.327: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/21/24 00:20:12.329
  E0221 00:20:12.883458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:20:12.98
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:20:12.982
  Feb 21 00:20:12.985: INFO: Creating deployment "webserver-deployment"
  Feb 21 00:20:13.001: INFO: Waiting for observed generation 1
  E0221 00:20:13.883824      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:14.884361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:20:15.023: INFO: Waiting for all required pods to come up
  Feb 21 00:20:15.045: INFO: Pod name httpd: Found 10 pods out of 10
  STEP: ensuring each pod is running @ 02/21/24 00:20:15.045
  E0221 00:20:15.884833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:16.885286      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:20:17.065: INFO: Waiting for deployment "webserver-deployment" to complete
  Feb 21 00:20:17.073: INFO: Updating deployment "webserver-deployment" with a non-existent image
  Feb 21 00:20:17.088: INFO: Updating deployment webserver-deployment
  Feb 21 00:20:17.088: INFO: Waiting for observed generation 2
  E0221 00:20:17.886422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:18.888363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:20:19.102: INFO: Waiting for the first rollout's replicaset to have .status.availableReplicas = 8
  Feb 21 00:20:19.116: INFO: Waiting for the first rollout's replicaset to have .spec.replicas = 8
  Feb 21 00:20:19.126: INFO: Waiting for the first rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Feb 21 00:20:19.164: INFO: Verifying that the second rollout's replicaset has .status.availableReplicas = 0
  Feb 21 00:20:19.164: INFO: Waiting for the second rollout's replicaset to have .spec.replicas = 5
  Feb 21 00:20:19.177: INFO: Waiting for the second rollout's replicaset of deployment "webserver-deployment" to have desired number of replicas
  Feb 21 00:20:19.201: INFO: Verifying that deployment "webserver-deployment" has minimum required number of available replicas
  Feb 21 00:20:19.201: INFO: Scaling up the deployment "webserver-deployment" from 10 to 30
  Feb 21 00:20:19.250: INFO: Updating deployment webserver-deployment
  Feb 21 00:20:19.250: INFO: Waiting for the replicasets of deployment "webserver-deployment" to have desired number of replicas
  Feb 21 00:20:19.272: INFO: Verifying that first rollout's replicaset has .spec.replicas = 20
  E0221 00:20:19.889160      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:20.889447      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:20:21.286: INFO: Verifying that second rollout's replicaset has .spec.replicas = 13
  Feb 21 00:20:21.296: INFO: Deployment "webserver-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=20) "webserver-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "a7900410-0ed7-4658-a967-171f45c755f9",
      ResourceVersion: (string) (len=5) "28620",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071612,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=635) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 70 72 6f  |"f:spec":{"f:pro|
              00000040  67 72 65 73 73 44 65 61  64 6c 69 6e 65 53 65 63  |gressDeadlineSec|
              00000050  6f 6e 64 73 22 3a 7b 7d  2c 22 66 3a 72 65 70 6c  |onds":{},"f:repl|
              00000060  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 72 65 76 69  |icas":{},"f:revi|
              00000070  73 69 6f 6e 48 69 73 74  6f 72 79 4c 69 6d 69 74  |sionHistoryLimit|
              00000080  22 3a 7b 7d 2c 22 66 3a  73 65 6c 65 63 74 6f 72  |":{},"f:selector|
              00000090  22 3a 7b 7d 2c 22 66 3a  73 74 72 61 74 65 67 79  |":{},"f:strategy|
              000000a0  22 3a 7b 22 66 3a 72 6f  6c 6c 69 6e 67 55 70 64  |":{"f:rollingUpd|
              000000b0  61 74 65 22 3a 7b 22 2e  22 3a 7b 7d 2c 22 66 3a  |ate":{".":{},"f:|
              000000c0  6d 61 78 53 75 72 67 65  22 3a 7b 7d 2c 22 66 3a  |maxSurge":{},"f:|
              000000d0  6d 61 78 55 6e 61 76 61  69 6c 61 62 6c 65 22 3a  |maxUnavailable":|
              000000e0  7b 7d 7d 2c 22 66 3a 74  79 70 65 22 3a 7b 7d 7d  |{}},"f:type":{}}|
              000000f0  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000100  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              00000110  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              00000120  22 66 3a 6e 61 6d 65 22  3a 7b 7d 7d 7d 2c 22 66  |"f:name":{}}},"f|
              00000130  3a 73 70 65 63 22 3a 7b  22 66 3a 63 6f 6e 74 61  |:spec":{"f:conta|
              00000140  69 6e 65 72 73 22 3a 7b  22 6b 3a 7b 5c 22 6e 61  |iners":{"k:{\"na|
              00000150  6d 65 5c 22 3a 5c 22 68  74 74 70 64 5c 22 7d 22  |me\":\"httpd\"}"|
              00000160  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000170  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000180  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000190  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              000001a0  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              000001b0  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              000001c0  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              000001d0  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000001e0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000001f0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              00000200  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              00000210  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              00000220  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              00000230  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000270  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=541) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 6e 61  |licas":{},"f:una|
              000001f0  76 61 69 6c 61 62 6c 65  52 65 70 6c 69 63 61 73  |vailableReplicas|
              00000200  22 3a 7b 7d 2c 22 66 3a  75 70 64 61 74 65 64 52  |":{},"f:updatedR|
              00000210  65 70 6c 69 63 61 73 22  3a 7b 7d 7d 7d           |eplicas":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(30),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 2,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 3,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 0,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 3,
      Replicas: (int32) 33,
      UpdatedReplicas: (int32) 13,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      UnavailableReplicas: (int32) 25,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=26) "MinimumReplicasUnavailable",
          Message: (string) (len=46) "Deployment does not have minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=17) "ReplicaSetUpdated",
          Message: (string) (len=59) "ReplicaSet \"webserver-deployment-9b4f5bf69\" is progressing."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 21 00:20:21.307: INFO: New ReplicaSet "webserver-deployment-9b4f5bf69" of Deployment "webserver-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
      ResourceVersion: (string) (len=5) "28611",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "a7900410-0ed7-4658-a967-171f45c755f9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 37 39 30 30 34  31 30 2d 30 65 64 37 2d  |\"a7900410-0ed7-|
              00000120  34 36 35 38 2d 61 39 36  37 2d 31 37 31 66 34 35  |4658-a967-171f45|
              00000130  63 37 35 35 66 39 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |c755f9\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=84) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  66 75 6c 6c 79 4c 61 62  65 6c 65 64 52 65 70 6c  |fullyLabeledRepl|
              00000020  69 63 61 73 22 3a 7b 7d  2c 22 66 3a 6f 62 73 65  |icas":{},"f:obse|
              00000030  72 76 65 64 47 65 6e 65  72 61 74 69 6f 6e 22 3a  |rvedGeneration":|
              00000040  7b 7d 2c 22 66 3a 72 65  70 6c 69 63 61 73 22 3a  |{},"f:replicas":|
              00000050  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(13),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=13) "webserver:404",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 13,
      FullyLabeledReplicas: (int32) 13,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:20:21.307: INFO: All old ReplicaSets of Deployment "webserver-deployment":
  Feb 21 00:20:21.308: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "webserver-deployment-557759b7c7",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
      ResourceVersion: (string) (len=5) "28607",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=2) "30",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=2) "33"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=20) "webserver-deployment",
          UID: (types.UID) (len=36) "a7900410-0ed7-4658-a967-171f45c755f9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=781) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 61 37 39 30 30 34  31 30 2d 30 65 64 37 2d  |\"a7900410-0ed7-|
              00000120  34 36 35 38 2d 61 39 36  37 2d 31 37 31 66 34 35  |4658-a967-171f45|
              00000130  63 37 35 35 66 39 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |c755f9\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 72 65 70  |"f:spec":{"f:rep|
              00000150  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 73 65 6c  |licas":{},"f:sel|
              00000160  65 63 74 6f 72 22 3a 7b  7d 2c 22 66 3a 74 65 6d  |ector":{},"f:tem|
              00000170  70 6c 61 74 65 22 3a 7b  22 66 3a 6d 65 74 61 64  |plate":{"f:metad|
              00000180  61 74 61 22 3a 7b 22 66  3a 6c 61 62 65 6c 73 22  |ata":{"f:labels"|
              00000190  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6e 61 6d 65  |:{".":{},"f:name|
              000001a0  22 3a 7b 7d 2c 22 66 3a  70 6f 64 2d 74 65 6d 70  |":{},"f:pod-temp|
              000001b0  6c 61 74 65 2d 68 61 73  68 22 3a 7b 7d 7d 7d 2c  |late-hash":{}}},|
              000001c0  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 63 6f 6e  |"f:spec":{"f:con|
              000001d0  74 61 69 6e 65 72 73 22  3a 7b 22 6b 3a 7b 5c 22  |tainers":{"k:{\"|
              000001e0  6e 61 6d 65 5c 22 3a 5c  22 68 74 74 70 64 5c 22  |name\":\"httpd\"|
              000001f0  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000200  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000210  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000220  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000230  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000240  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000250  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000260  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000270  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000280  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              00000290  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000002a0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000002b0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000002c0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000002d0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000002e0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              000002f0  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000300  63 6f 6e 64 73 22 3a 7b  7d 7d 7d 7d 7d           |conds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(20),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=5) "httpd",
          (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=5) "httpd",
            (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 20,
      FullyLabeledReplicas: (int32) 20,
      ReadyReplicas: (int32) 8,
      AvailableReplicas: (int32) 8,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:20:21.325: INFO: Pod "webserver-deployment-557759b7c7-tmzfn" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-tmzfn",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "992c07c1-df79-43b3-9ef5-3e1e4ec15a23",
      ResourceVersion: (string) (len=5) "28361",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.147/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "d9ca23eb07f8aaf031ee42b79008c5b910522dd119c4edcb3af56b95cc639ba1",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.147/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 34 37 5c 22 7d 22  |10.1.235.147\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-jzkmc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-jzkmc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.147",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.147"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://ef646402d0755e23f5c8b24ed5dd446b73c8a9f03455d092b34618d3edefd200",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.326: INFO: Pod "webserver-deployment-557759b7c7-md9wd" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-md9wd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2938f1d5-c848-4dc6-9cb8-c066bdb742d2",
      ResourceVersion: (string) (len=5) "28384",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "2bca87b26679a4c4cd4c516ff61e20a7ffffbac07a885f5add8a578fa04ab31c",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.73/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.73/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 37 33 5c 22 7d 22 3a  |10.1.171.73\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-75rdh",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-75rdh",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.73",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.73"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://972bff8a5e7220d8c1a61b9c035d544287160f75941ece69bb917e2f9117ea81",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.327: INFO: Pod "webserver-deployment-557759b7c7-mt65s" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-mt65s",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "108b1b3b-9112-4651-b5e8-4309ff0eeb1a",
      ResourceVersion: (string) (len=5) "28387",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "81e092e45dd950a503327a8f6fdf4d4e606f3d27700273ef265e7db861cd4611",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.75/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.75/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 37 35 5c 22 7d 22 3a  |10.1.171.75\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-s6djt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-s6djt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.75",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.75"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://a6c4ade98ba14c7e76ee4b6a8c6ee9eb4e8073c427edef746ee0286967eb8d12",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.329: INFO: Pod "webserver-deployment-557759b7c7-kwt7z" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-kwt7z",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b8ba6ea0-7f22-4f6f-bdf6-1fe22a11ef2a",
      ResourceVersion: (string) (len=5) "28391",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "9a84ce1f97c3e58abc9b5cde1b0498e23a2b0a2b389e832e4264f7c87fc6438b",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.72/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.72/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 37 32 5c 22 7d 22 3a  |10.1.171.72\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-h8kj8",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-h8kj8",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.72",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.72"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://57f6a6c7ce6f3f1a09cf718c2922912c937dd1810a1c977f2d744ce510a69b43",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.330: INFO: Pod "webserver-deployment-557759b7c7-xqx8j" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-xqx8j",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "35bca924-b8cb-46ea-9d31-69c5d7bd3a5d",
      ResourceVersion: (string) (len=5) "28394",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "434c824092fef19d861ecdb4ba4ad87119fe653b025fc5ac072a5ccfe89a88e3",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.71/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.71/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 37 31 5c 22 7d 22 3a  |10.1.171.71\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-w4h52",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-w4h52",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.71",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.71"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://eb92adb5f7a3a0f06d8abeef91cd261122e151d0fdebfd102526cc6a144437c5",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.332: INFO: Pod "webserver-deployment-557759b7c7-vnz5d" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-vnz5d",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "85827654-375c-4385-a4b0-cae8a4f04733",
      ResourceVersion: (string) (len=5) "28398",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "eb0891ffeb63944f7d9818ccb1cd03e360a36a3ea9f1ac3308b40ca39a82ace9",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.74/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.74/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 37 34 5c 22 7d 22 3a  |10.1.171.74\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vkmg7",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vkmg7",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.74",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.74"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://46c0c0289ba8c9ecebfd7f37c8e46b50190da130dee4f7d093ee57d156e1f2b1",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.333: INFO: Pod "webserver-deployment-557759b7c7-6644f" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-6644f",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "180308b4-48f6-474a-aaa1-1ac58562c700",
      ResourceVersion: (string) (len=5) "28405",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "913e717724817f3c11726fe9aed3df9cb2164fd79e299485be97cb7bed434d6a",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.149/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.149/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 34 39 5c 22 7d 22  |10.1.235.149\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-fn89h",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-fn89h",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.149",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.149"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://055c06c5fd1d4d8db3946e8fe1fa1de9275ecae19e0017996db66ba132736247",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.337: INFO: Pod "webserver-deployment-557759b7c7-9jrpt" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-9jrpt",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "29111496-49d6-4349-86ec-18beb19fe749",
      ResourceVersion: (string) (len=5) "28406",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8d697ac54269dd7df7e1e12044694933ea5d98c6052db13564ed92d7b032a44d",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.144/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.144/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071614,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 34 34 5c 22 7d 22  |10.1.235.144\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wn78f",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wn78f",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071615,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071613,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.144",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.144"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071613,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844071614,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://a035d2d03c2f35242d32a6d50feac21d48d0bfc21c4b91a4db29f41f4eb85a6e",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.338: INFO: Pod "webserver-deployment-9b4f5bf69-zjc6n" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-zjc6n",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "16e06b30-6f6f-499a-b5d6-9e5ccd0d8afd",
      ResourceVersion: (string) (len=5) "28568",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8a06b42b9166c59d4090695ef2b60a17e6dcfdacf9052c51649e1b390d169d6d",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.151/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.151/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071618,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=564) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 2e 32 33 35 2e 31 35  31 5c 22 7d 22 3a 7b 22  |1.235.151\"}":{"|
              00000210  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000220  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000230  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-fn2xq",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-fn2xq",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.151",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.151"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=16) "ImagePullBackOff",
              Message: (string) (len=38) "Back-off pulling image \"webserver:404\""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.339: INFO: Pod "webserver-deployment-9b4f5bf69-qbp49" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-qbp49",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d9d86311-0416-45ec-840b-b4cc79df9b09",
      ResourceVersion: (string) (len=5) "28601",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "643dbb7ed454660ee54b0d825d6141c5ae0c9f0e72ac64cee2bef51b120aae86",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.154/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.154/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071618,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=564) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 2e 32 33 35 2e 31 35  34 5c 22 7d 22 3a 7b 22  |1.235.154\"}":{"|
              00000210  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000220  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000230  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-g2vlh",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-g2vlh",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.154",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.154"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=16) "ImagePullBackOff",
              Message: (string) (len=38) "Back-off pulling image \"webserver:404\""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.340: INFO: Pod "webserver-deployment-9b4f5bf69-pfx2f" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-pfx2f",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d96438df-0d6a-4034-b950-5dd061fd9497",
      ResourceVersion: (string) (len=5) "28609",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-v7bnj",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-v7bnj",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.341: INFO: Pod "webserver-deployment-9b4f5bf69-2rllr" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-2rllr",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "9ed2eb39-3f80-4d4b-93b1-9079e82f9c85",
      ResourceVersion: (string) (len=5) "28622",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sxwgc",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sxwgc",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.341: INFO: Pod "webserver-deployment-9b4f5bf69-4xds4" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-4xds4",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e72f52db-5616-471e-9932-500e20f46666",
      ResourceVersion: (string) (len=5) "28638",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "3629b69f8e9ae0b735824e7c496a3e2429fe113ca0867a55ff32b512da5772bd",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.79/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.79/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071618,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 2e 31 37 31 2e 37 39  5c 22 7d 22 3a 7b 22 2e  |1.171.79\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-7khtk",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-7khtk",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.79",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.79"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=16) "ImagePullBackOff",
              Message: (string) (len=38) "Back-off pulling image \"webserver:404\""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.342: INFO: Pod "webserver-deployment-9b4f5bf69-wjd7g" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-wjd7g",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "548f9a1e-a1a9-4ad1-846c-8890f9e3a1fb",
      ResourceVersion: (string) (len=5) "28641",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "08c99b46128af33bb697a2eaeeb8f4bac54a43927ef5156dd35e372503abdd78",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.76/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.76/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=563) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 2e 31 37 31 2e 37 36  5c 22 7d 22 3a 7b 22 2e  |1.171.76\"}":{".|
              00000210  22 3a 7b 7d 2c 22 66 3a  69 70 22 3a 7b 7d 7d 7d  |":{},"f:ip":{}}}|
              00000220  2c 22 66 3a 73 74 61 72  74 54 69 6d 65 22 3a 7b  |,"f:startTime":{|
              00000230  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-njprh",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-njprh",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.76",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.76"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=16) "ImagePullBackOff",
              Message: (string) (len=38) "Back-off pulling image \"webserver:404\""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.343: INFO: Pod "webserver-deployment-9b4f5bf69-n8zwb" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-n8zwb",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "5e629cdb-e72d-45f5-a4e1-ef2d7006e1cd",
      ResourceVersion: (string) (len=5) "28649",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8f58d867379d11e682ee8cc4a77b3d3fd265654978ee59ab4b2e1305b2b296dc",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.157/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.157/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071618,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=564) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 70 6f 64 49 50  22 3a 7b 7d 2c 22 66 3a  |"f:podIP":{},"f:|
              000001e0  70 6f 64 49 50 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |podIPs":{".":{},|
              000001f0  22 6b 3a 7b 5c 22 69 70  5c 22 3a 5c 22 31 30 2e  |"k:{\"ip\":\"10.|
              00000200  31 2e 32 33 35 2e 31 35  37 5c 22 7d 22 3a 7b 22  |1.235.157\"}":{"|
              00000210  2e 22 3a 7b 7d 2c 22 66  3a 69 70 22 3a 7b 7d 7d  |.":{},"f:ip":{}}|
              00000220  7d 2c 22 66 3a 73 74 61  72 74 54 69 6d 65 22 3a  |},"f:startTime":|
              00000230  7b 7d 7d 7d                                       |{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8rlxg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8rlxg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071617,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.157",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.157"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071617,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=12) "ErrImagePull",
              Message: (string) (len=262) "failed to pull and unpack image \"docker.io/library/webserver:404\": failed to resolve reference \"docker.io/library/webserver:404\": pull access denied, repository does not exist or may require authorization: server message: insufficient_scope: authorization failed"
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.344: INFO: Pod "webserver-deployment-557759b7c7-r4556" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-r4556",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "05e79820-6e27-4ace-85a9-17e8174f2d57",
      ResourceVersion: (string) (len=5) "28652",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.148/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "b9a3d078fbef75ea2a6debf5884c48822d217d1ac621317a3f7dc1dcd1c26919",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.148/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-97zsx",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-97zsx",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.346: INFO: Pod "webserver-deployment-557759b7c7-d2qkd" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-d2qkd",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6e973935-c718-4b39-bb71-025eeb65d30f",
      ResourceVersion: (string) (len=5) "28656",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-xkl8h",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-xkl8h",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.347: INFO: Pod "webserver-deployment-9b4f5bf69-h2klp" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-h2klp",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "8d17d3b9-8b16-49c0-926a-dd0248ac33fb",
      ResourceVersion: (string) (len=5) "28657",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.77/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "2867ebcb194685de0a285545652a66994ac70adcf35ca02589d309820ac45467",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.77/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-wqsbt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-wqsbt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.349: INFO: Pod "webserver-deployment-9b4f5bf69-6b79b" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-6b79b",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0c9383f7-609e-4abd-95d5-700ac6c75049",
      ResourceVersion: (string) (len=5) "28658",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-m2j4s",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-m2j4s",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.350: INFO: Pod "webserver-deployment-9b4f5bf69-m7fk6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-m7fk6",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "35534c8f-1581-4b7b-9832-d9a9d62444c6",
      ResourceVersion: (string) (len=5) "28659",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.80/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "1bd42dbf76e7baa2adb17f54122147f8b7d8518eb2a124ec47f7c5bf11484062",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.80/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r9lpv",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r9lpv",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.351: INFO: Pod "webserver-deployment-9b4f5bf69-d5zw2" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-d5zw2",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "35ef0958-7a6f-458c-9162-4a2f37df3919",
      ResourceVersion: (string) (len=5) "28661",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-h27g9",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-h27g9",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.356: INFO: Pod "webserver-deployment-9b4f5bf69-gmnxk" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-gmnxk",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "777d6d53-c7d1-4fa5-adbf-90e3ac34f8d5",
      ResourceVersion: (string) (len=5) "28665",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-vgrwl",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-vgrwl",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.358: INFO: Pod "webserver-deployment-557759b7c7-j9ptq" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-j9ptq",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "d53074aa-7e14-4494-8724-a0ca9a2ac012",
      ResourceVersion: (string) (len=5) "28668",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) <nil>,
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-tdhph",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-tdhph",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.359: INFO: Pod "webserver-deployment-557759b7c7-5bfv7" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-5bfv7",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "797f36df-28c2-43ca-969b-302fa65a445f",
      ResourceVersion: (string) (len=5) "28669",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.155/32",
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "f2e869b41483d0144991946ba986e0cbc4e0e04053bba87e71ea2b0bb86f9c92",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.155/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-nvfrm",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-nvfrm",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.360: INFO: Pod "webserver-deployment-557759b7c7-667hz" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-667hz",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0326062d-4d94-4c7c-84f8-d5d621ec25b6",
      ResourceVersion: (string) (len=5) "28670",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "260060d12984c969d8851b01411b5c916a386e35eed72e0b3b0f4a2955345568",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.78/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.78/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-qj7km",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-qj7km",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.362: INFO: Pod "webserver-deployment-557759b7c7-p6zp5" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-p6zp5",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "282b5bd5-607d-4927-ae86-9c578eba6c3b",
      ResourceVersion: (string) (len=5) "28682",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "c1f4e9fe85e48312e01571accc28f9c034dc9c21bff1b6e92723f332392abf9c",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.129/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.129/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-sfwt5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-sfwt5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.363: INFO: Pod "webserver-deployment-557759b7c7-4fdgj" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4fdgj",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "e8c1d8d8-2eb3-466e-87c7-da011e55cdec",
      ResourceVersion: (string) (len=5) "28683",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "73f80818992dd17edb69c8257db0fe10a138ce486d79df549c4373e88ee9caef",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.81/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.81/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-k4f9z",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-k4f9z",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.366: INFO: Pod "webserver-deployment-557759b7c7-f9497" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-f9497",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b23af35f-a3a1-4320-858b-f83ed209f786",
      ResourceVersion: (string) (len=5) "28692",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "4f2654b87dc30c0eb59cabe0c45818d3d1571d5cd142853de79e1114ca650e90",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.82/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.82/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-zm87c",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-zm87c",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.367: INFO: Pod "webserver-deployment-557759b7c7-xm9v6" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-xm9v6",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "3b9f1651-80d4-4e11-8430-c3181d044cb8",
      ResourceVersion: (string) (len=5) "28694",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "7d9cdec2f3ce7ec5518b92c4371282b56c7f7b43be238617aede46007c56f024",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.130/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.130/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8nrm4",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8nrm4",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.368: INFO: Pod "webserver-deployment-557759b7c7-jljb9" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-jljb9",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "02915ddb-3794-486c-a1c0-143680bcc156",
      ResourceVersion: (string) (len=5) "28697",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7",
        (string) (len=4) "name": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "12850b86fc63dcf023912745e4c5ce3e04d2a5bef444b194ed59e382c2f8fc69",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.84/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.84/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-r76p6",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-r76p6",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.370: INFO: Pod "webserver-deployment-9b4f5bf69-rw8v2" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=36) "webserver-deployment-9b4f5bf69-rw8v2",
      GenerateName: (string) (len=31) "webserver-deployment-9b4f5bf69-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "849046c5-08b8-4a29-b27d-666b48254c35",
      ResourceVersion: (string) (len=5) "28705",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=9) "9b4f5bf69"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8a9fcce3964b36a9c48d58fb5f8fe47964ec4ddb691f9e3404db181649d91eff",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.159/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.159/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=30) "webserver-deployment-9b4f5bf69",
          UID: (types.UID) (len=36) "cc1a452f-55d7-4a7e-8f5e-121599562f00",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 63 63  31 61 34 35 32 66 2d 35  |d\":\"cc1a452f-5|
              00000090  35 64 37 2d 34 61 37 65  2d 38 66 35 65 2d 31 32  |5d7-4a7e-8f5e-12|
              000000a0  31 35 39 39 35 36 32 66  30 30 5c 22 7d 22 3a 7b  |1599562f00\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071620,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071621,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-89z45",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=13) "webserver:404",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-89z45",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=13) "webserver:404",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.375: INFO: Pod "webserver-deployment-557759b7c7-m2h6x" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-m2h6x",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "05005d1e-910d-419f-b4b7-accce526e1b4",
      ResourceVersion: (string) (len=5) "28716",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "8117321b6ef7c1f31496996ebf4e0cb62109ce86e9d14fe0ec0a42b0f8c48b0c",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.83/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.83/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071621,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-25w74",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-25w74",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.377: INFO: Pod "webserver-deployment-557759b7c7-4kv2d" is not available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=37) "webserver-deployment-557759b7c7-4kv2d",
      GenerateName: (string) (len=32) "webserver-deployment-557759b7c7-",
      Namespace: (string) (len=15) "deployment-4711",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "0df45a33-5afa-43b1-8b30-bccd2f6861da",
      ResourceVersion: (string) (len=5) "28721",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=5) "httpd",
        (string) (len=17) "pod-template-hash": (string) (len=10) "557759b7c7"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "b4086d05cbafe7b0fc96539bb0cb970f140ceba1450b958fe8624d2cc846c63c",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.158/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.158/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=31) "webserver-deployment-557759b7c7",
          UID: (types.UID) (len=36) "5ad2a86d-2ca8-4aac-b8a1-72b1bc24f0a9",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=537) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 35 61  64 32 61 38 36 64 2d 32  |d\":\"5ad2a86d-2|
              00000090  63 61 38 2d 34 61 61 63  2d 62 38 61 31 2d 37 32  |ca8-4aac-b8a1-72|
              000000a0  62 31 62 63 32 34 66 30  61 39 5c 22 7d 22 3a 7b  |b1bc24f0a9\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 68 74 74  |:{\"name\":\"htt|
              000000e0  70 64 5c 22 7d 22 3a 7b  22 2e 22 3a 7b 7d 2c 22  |pd\"}":{".":{},"|
              000000f0  66 3a 69 6d 61 67 65 22  3a 7b 7d 2c 22 66 3a 69  |f:image":{},"f:i|
              00000100  6d 61 67 65 50 75 6c 6c  50 6f 6c 69 63 79 22 3a  |magePullPolicy":|
              00000110  7b 7d 2c 22 66 3a 6e 61  6d 65 22 3a 7b 7d 2c 22  |{},"f:name":{},"|
              00000120  66 3a 72 65 73 6f 75 72  63 65 73 22 3a 7b 7d 2c  |f:resources":{},|
              00000130  22 66 3a 73 65 63 75 72  69 74 79 43 6f 6e 74 65  |"f:securityConte|
              00000140  78 74 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |xt":{},"f:termin|
              00000150  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 61 74 68  |ationMessagePath|
              00000160  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000170  69 6f 6e 4d 65 73 73 61  67 65 50 6f 6c 69 63 79  |ionMessagePolicy|
              00000180  22 3a 7b 7d 7d 7d 2c 22  66 3a 64 6e 73 50 6f 6c  |":{}}},"f:dnsPol|
              00000190  69 63 79 22 3a 7b 7d 2c  22 66 3a 65 6e 61 62 6c  |icy":{},"f:enabl|
              000001a0  65 53 65 72 76 69 63 65  4c 69 6e 6b 73 22 3a 7b  |eServiceLinks":{|
              000001b0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000001c0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000001d0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              000001e0  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              000001f0  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000200  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000210  6e 64 73 22 3a 7b 7d 7d  7d                       |nds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=482) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 6d 65 73 73 61 67  |me":{},"f:messag|
              00000080  65 22 3a 7b 7d 2c 22 66  3a 72 65 61 73 6f 6e 22  |e":{},"f:reason"|
              00000090  3a 7b 7d 2c 22 66 3a 73  74 61 74 75 73 22 3a 7b  |:{},"f:status":{|
              000000a0  7d 2c 22 66 3a 74 79 70  65 22 3a 7b 7d 7d 2c 22  |},"f:type":{}},"|
              000000b0  6b 3a 7b 5c 22 74 79 70  65 5c 22 3a 5c 22 49 6e  |k:{\"type\":\"In|
              000000c0  69 74 69 61 6c 69 7a 65  64 5c 22 7d 22 3a 7b 22  |itialized\"}":{"|
              000000d0  2e 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 50 72 6f  |.":{},"f:lastPro|
              000000e0  62 65 54 69 6d 65 22 3a  7b 7d 2c 22 66 3a 6c 61  |beTime":{},"f:la|
              000000f0  73 74 54 72 61 6e 73 69  74 69 6f 6e 54 69 6d 65  |stTransitionTime|
              00000100  22 3a 7b 7d 2c 22 66 3a  73 74 61 74 75 73 22 3a  |":{},"f:status":|
              00000110  7b 7d 2c 22 66 3a 74 79  70 65 22 3a 7b 7d 7d 2c  |{},"f:type":{}},|
              00000120  22 6b 3a 7b 5c 22 74 79  70 65 5c 22 3a 5c 22 52  |"k:{\"type\":\"R|
              00000130  65 61 64 79 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |eady\"}":{".":{}|
              00000140  2c 22 66 3a 6c 61 73 74  50 72 6f 62 65 54 69 6d  |,"f:lastProbeTim|
              00000150  65 22 3a 7b 7d 2c 22 66  3a 6c 61 73 74 54 72 61  |e":{},"f:lastTra|
              00000160  6e 73 69 74 69 6f 6e 54  69 6d 65 22 3a 7b 7d 2c  |nsitionTime":{},|
              00000170  22 66 3a 6d 65 73 73 61  67 65 22 3a 7b 7d 2c 22  |"f:message":{},"|
              00000180  66 3a 72 65 61 73 6f 6e  22 3a 7b 7d 2c 22 66 3a  |f:reason":{},"f:|
              00000190  73 74 61 74 75 73 22 3a  7b 7d 2c 22 66 3a 74 79  |status":{},"f:ty|
              000001a0  70 65 22 3a 7b 7d 7d 7d  2c 22 66 3a 63 6f 6e 74  |pe":{}}},"f:cont|
              000001b0  61 69 6e 65 72 53 74 61  74 75 73 65 73 22 3a 7b  |ainerStatuses":{|
              000001c0  7d 2c 22 66 3a 68 6f 73  74 49 50 22 3a 7b 7d 2c  |},"f:hostIP":{},|
              000001d0  22 66 3a 73 74 61 72 74  54 69 6d 65 22 3a 7b 7d  |"f:startTime":{}|
              000001e0  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071621,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-8p2zt",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=5) "httpd",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-8p2zt",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Pending",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=5) "False",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=18) "ContainersNotReady",
          Message: (string) (len=39) "containers with unready status: [httpd]"
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844071619,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) "",
      PodIPs: ([]v1.PodIP) <nil>,
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844071619,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=5) "httpd",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)({
              Reason: (string) (len=17) "ContainerCreating",
              Message: (string) ""
            }),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) false,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) "",
          ContainerID: (string) "",
          Started: (*bool)(false),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:20:21.378: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-4711" for this suite. @ 02/21/24 00:20:21.386
• [9.098 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Downward API should provide pod UID as env vars [NodeConformance] [Conformance]
test/e2e/common/node/downwardapi.go:268
  STEP: Creating a kubernetes client @ 02/21/24 00:20:21.426
  Feb 21 00:20:21.426: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:20:21.426
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:20:21.517
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:20:21.521
  STEP: Creating a pod to test downward api env vars @ 02/21/24 00:20:21.53
  E0221 00:20:21.889946      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:22.890360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:23.890190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:24.890643      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:20:25.593
  Feb 21 00:20:25.601: INFO: Trying to get logs from node control-plane pod downward-api-b90b0c22-1341-4b1e-9852-9e7278f00546 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:20:25.619
  Feb 21 00:20:25.676: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-5032" for this suite. @ 02/21/24 00:20:25.681
• [4.269 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Containers should be able to override the image's default command and arguments [NodeConformance] [Conformance]
test/e2e/common/node/containers.go:89
  STEP: Creating a kubernetes client @ 02/21/24 00:20:25.696
  Feb 21 00:20:25.696: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename containers @ 02/21/24 00:20:25.696
  E0221 00:20:25.891343      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:20:25.911
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:20:25.915
  STEP: Creating a pod to test override all @ 02/21/24 00:20:25.918
  E0221 00:20:26.892338      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:27.892891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:28.893200      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:29.893666      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:30.894369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:31.894837      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:20:31.994
  Feb 21 00:20:32.005: INFO: Trying to get logs from node control-plane pod client-containers-450b9178-3bc0-462f-bc07-be4e5e5337e5 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:20:32.021
  Feb 21 00:20:32.073: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "containers-2653" for this suite. @ 02/21/24 00:20:32.083
• [6.453 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should find a service from listing all namespaces [Conformance]
test/e2e/network/service.go:3117
  STEP: Creating a kubernetes client @ 02/21/24 00:20:32.149
  Feb 21 00:20:32.149: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/21/24 00:20:32.149
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:20:32.444
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:20:32.452
  STEP: fetching services @ 02/21/24 00:20:32.458
  Feb 21 00:20:32.466: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-4740" for this suite. @ 02/21/24 00:20:32.471
• [0.334 seconds]
------------------------------
SSSSSSSSSS
------------------------------
[sig-apps] CronJob should not schedule jobs when suspended [Slow] [Conformance]
test/e2e/apps/cronjob.go:97
  STEP: Creating a kubernetes client @ 02/21/24 00:20:32.486
  Feb 21 00:20:32.486: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename cronjob @ 02/21/24 00:20:32.487
  E0221 00:20:32.895031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:20:33.442
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:20:33.45
  STEP: Creating a suspended cronjob @ 02/21/24 00:20:33.458
  STEP: Ensuring no jobs are scheduled @ 02/21/24 00:20:33.48
  E0221 00:20:33.895430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:34.895651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:35.896128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:36.896593      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:37.896624      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:38.897317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:39.897851      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:40.898078      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:41.898155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:42.898453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:43.899590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:44.899865      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:45.900970      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:46.901603      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:47.902803      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:48.902749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:49.903642      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:50.903817      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:51.904511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:52.904706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:53.905466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:54.905990      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:55.906089      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:56.906105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:57.907111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:58.908027      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:20:59.908500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:00.909432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:01.909484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:02.910281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:03.911394      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:04.912012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:05.913047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:06.913685      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:07.914656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:08.915280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:09.915875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:10.915942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:11.916250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:12.916897      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:13.917017      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:14.917366      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:15.917395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:16.918029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:17.918492      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:18.919084      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:19.919564      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:20.920589      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:21.921314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:22.921731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:23.922651      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:24.923351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:25.923703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:26.924372      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:27.924918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:28.926200      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:29.925706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:30.925786      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:31.926941      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:32.927121      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:33.927310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:34.927999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:35.929054      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:36.930250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:37.930637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:38.931004      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:39.931970      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:40.932254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:41.932454      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:42.932959      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:43.933859      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:44.934405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:45.935048      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:46.935229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:47.936424      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:48.936931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:49.936962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:50.937471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:51.938538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:52.939243      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:53.939765      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:54.940887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:55.941049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:56.941738      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:57.942123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:58.942440      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:21:59.943465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:00.944303      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:01.944940      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:02.946147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:03.946417      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:04.947088      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:05.947290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:06.947788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:07.948208      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:08.948703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:09.949427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:10.949809      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:11.950891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:12.951357      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:13.951293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:14.952230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:15.953188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:16.953523      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:17.954742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:18.955383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:19.956124      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:20.956735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:21.956912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:22.957192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:23.958428      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:24.959199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:25.959432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:26.960072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:27.961256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:28.961737      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:29.962328      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:30.962900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:31.962984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:32.963615      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:33.964109      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:34.964895      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:35.965500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:36.965778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:37.965954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:38.966595      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:39.966866      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:40.967971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:41.969052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:42.969399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:43.969831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:44.970757      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:45.971637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:46.971983      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:47.972247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:48.972834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:49.973166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:50.973477      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:51.974718      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:52.975143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:53.975155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:54.976118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:55.976230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:56.976506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:57.977183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:58.977133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:22:59.977952      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:00.978636      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:01.979259      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:02.979889      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:03.980490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:04.981415      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:05.982275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:06.982767      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:07.983463      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:08.983884      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:09.984405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:10.984966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:11.986103      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:12.986597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:13.987497      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:14.987686      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:15.987896      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:16.988450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:17.989055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:18.989345      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:19.990245      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:20.990631      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:21.991405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:22.992465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:23.992920      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:24.993872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:25.994082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:26.994263      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:27.994465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:28.995406      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:29.995634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:30.995870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:31.996098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:32.996956      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:33.997246      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:34.997484      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:35.998550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:36.998749      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:37.999784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:39.000066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:40.000970      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:41.001393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:42.002538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:43.003154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:44.004153      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:45.004844      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:46.005543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:47.006227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:48.006456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:49.006793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:50.007413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:51.007853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:52.008582      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:53.009240      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:54.010358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:55.011268      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:56.011401      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:57.012182      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:58.012784      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:23:59.013776      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:00.014647      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:01.015299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:02.016078      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:03.016533      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:04.017129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:05.017834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:06.018537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:07.019217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:08.020390      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:09.021145      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:10.021883      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:11.022380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:12.023324      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:13.023971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:14.025178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:15.026109      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:16.026132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:17.026642      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:18.027310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:19.028245      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:20.029433      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:21.030559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:22.030996      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:23.031614      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:24.032369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:25.033360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:26.033719      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:27.033816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:28.034138      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:29.034553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:30.034910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:31.035501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:32.035890      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:33.036596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:34.037049      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:35.038242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:36.038345      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:37.039344      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:38.039380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:39.040097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:40.040794      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:41.041450      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:42.041546      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:43.042157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:44.043364      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:45.043443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:46.044588      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:47.044726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:48.045408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:49.046657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:50.047387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:51.047675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:52.047632      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:53.053143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:54.047917      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:55.048458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:56.048536      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:57.048650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:58.049628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:24:59.050249      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:00.050999      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:01.051974      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:02.052271      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:03.052868      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:04.053362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:05.054623      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:06.055280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:07.055642      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:08.056441      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:09.056796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:10.057703      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:11.058007      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:12.059007      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:13.059555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:14.060281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:15.060456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:16.061667      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:17.061657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:18.062581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:19.062993      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:20.063701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:21.064278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:22.064618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:23.064948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:24.065485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:25.066317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:26.067015      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:27.067335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:28.067907      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:29.068216      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:30.068587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:31.068856      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:32.069134      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:33.069446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Ensuring no job exists by listing jobs explicitly @ 02/21/24 00:25:33.504
  STEP: Removing cronjob @ 02/21/24 00:25:33.521
  Feb 21 00:25:33.555: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-5084" for this suite. @ 02/21/24 00:25:33.564
• [301.100 seconds]
------------------------------
SSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for node-pod communication: http [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:107
  STEP: Creating a kubernetes client @ 02/21/24 00:25:33.587
  Feb 21 00:25:33.587: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pod-network-test @ 02/21/24 00:25:33.589
  E0221 00:25:34.070468      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:25:34.116
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:25:34.124
  STEP: Performing setup for networking test in namespace pod-network-test-1959 @ 02/21/24 00:25:34.132
  STEP: creating a selector @ 02/21/24 00:25:34.132
  STEP: Creating the service pods in kubernetes @ 02/21/24 00:25:34.132
  Feb 21 00:25:34.132: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0221 00:25:35.070566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:36.071154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:37.071561      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:38.071997      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:39.072438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:40.073521      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:41.074197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:42.074518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:43.074873      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:44.075209      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:45.076007      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:46.076315      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:47.077081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:48.077232      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:49.078029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:50.079051      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:51.079139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:52.079950      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:53.080116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:54.080715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:55.081923      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:56.082247      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 02/21/24 00:25:56.418
  E0221 00:25:57.082336      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:25:58.082819      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:25:58.521: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Feb 21 00:25:58.521: INFO: Going to poll 10.1.235.165 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Feb 21 00:25:58.532: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.1.235.165:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1959 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:25:58.532: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:25:58.533: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:25:58.533: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1959/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.1.235.165%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Feb 21 00:25:58.621: INFO: Found all 1 expected endpoints: [netserver-0]
  Feb 21 00:25:58.621: INFO: Going to poll 10.1.171.91 on port 8083 at least 0 times, with a maximum of 34 tries before failing
  Feb 21 00:25:58.625: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s --max-time 15 --connect-timeout 1 http://10.1.171.91:8083/hostName | grep -v '^\s*$'] Namespace:pod-network-test-1959 PodName:host-test-container-pod ContainerName:agnhost-container Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:25:58.625: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:25:58.625: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:25:58.625: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-1959/pods/host-test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+--max-time+15+--connect-timeout+1+http%3A%2F%2F10.1.171.91%3A8083%2FhostName+%7C+grep+-v+%27%5E%5Cs%2A%24%27&container=agnhost-container&container=agnhost-container&stderr=true&stdout=true)
  Feb 21 00:25:58.670: INFO: Found all 1 expected endpoints: [netserver-1]
  Feb 21 00:25:58.670: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-1959" for this suite. @ 02/21/24 00:25:58.679
• [25.120 seconds]
------------------------------
[sig-apps] ReplicaSet should validate Replicaset Status endpoints [Conformance]
test/e2e/apps/replica_set.go:176
  STEP: Creating a kubernetes client @ 02/21/24 00:25:58.707
  Feb 21 00:25:58.707: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/21/24 00:25:58.708
  E0221 00:25:59.083179      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:25:59.189
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:25:59.196
  STEP: Create a Replicaset @ 02/21/24 00:25:59.213
  STEP: Verify that the required pods have come up. @ 02/21/24 00:25:59.225
  Feb 21 00:25:59.229: INFO: Pod name sample-pod: Found 0 pods out of 1
  E0221 00:26:00.083229      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:01.083505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:02.083675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:03.084204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:04.084155      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:04.260: INFO: Pod name sample-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/21/24 00:26:04.26
  STEP: Getting /status @ 02/21/24 00:26:04.26
  Feb 21 00:26:04.273: INFO: Replicaset test-rs has Conditions: []
  STEP: updating the Replicaset Status @ 02/21/24 00:26:04.273
  Feb 21 00:26:04.307: INFO: updatedStatus.Conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the ReplicaSet status to be updated @ 02/21/24 00:26:04.307
  Feb 21 00:26:04.310: INFO: Observed &ReplicaSet event: ADDED
  Feb 21 00:26:04.310: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.311: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.311: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.311: INFO: Found replicaset test-rs in namespace replicaset-9113 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: [{StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}]
  Feb 21 00:26:04.311: INFO: Replicaset test-rs has an updated status
  STEP: patching the Replicaset Status @ 02/21/24 00:26:04.311
  Feb 21 00:26:04.311: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Feb 21 00:26:04.323: INFO: Patched status conditions: []v1.ReplicaSetCondition{v1.ReplicaSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Replicaset status to be patched @ 02/21/24 00:26:04.324
  Feb 21 00:26:04.326: INFO: Observed &ReplicaSet event: ADDED
  Feb 21 00:26:04.326: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.326: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.326: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.326: INFO: Observed replicaset test-rs in namespace replicaset-9113 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 21 00:26:04.327: INFO: Observed &ReplicaSet event: MODIFIED
  Feb 21 00:26:04.327: INFO: Found replicaset test-rs in namespace replicaset-9113 with labels: map[name:sample-pod pod:httpd] annotations: map[] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC  }
  Feb 21 00:26:04.327: INFO: Replicaset test-rs has a patched status
  Feb 21 00:26:04.327: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-9113" for this suite. @ 02/21/24 00:26:04.331
• [5.634 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] DNS should provide /etc/hosts entries for the cluster [Conformance]
test/e2e/network/dns.go:117
  STEP: Creating a kubernetes client @ 02/21/24 00:26:04.342
  Feb 21 00:26:04.342: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename dns @ 02/21/24 00:26:04.342
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:26:04.443
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:26:04.447
  STEP: Running these commands on wheezy: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-9025.svc.cluster.local)" && echo OK > /results/wheezy_hosts@dns-querier-1.dns-test-service.dns-9025.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/wheezy_hosts@dns-querier-1;sleep 1; done
   @ 02/21/24 00:26:04.45
  STEP: Running these commands on jessie: for i in `seq 1 600`; do test -n "$$(getent hosts dns-querier-1.dns-test-service.dns-9025.svc.cluster.local)" && echo OK > /results/jessie_hosts@dns-querier-1.dns-test-service.dns-9025.svc.cluster.local;test -n "$$(getent hosts dns-querier-1)" && echo OK > /results/jessie_hosts@dns-querier-1;sleep 1; done
   @ 02/21/24 00:26:04.45
  STEP: creating a pod to probe /etc/hosts @ 02/21/24 00:26:04.45
  STEP: submitting the pod to kubernetes @ 02/21/24 00:26:04.45
  E0221 00:26:05.084498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:06.084841      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: retrieving the pod @ 02/21/24 00:26:06.498
  STEP: looking for the results for each expected name from probers @ 02/21/24 00:26:06.509
  Feb 21 00:26:06.543: INFO: Unable to read jessie_hosts@dns-querier-1.dns-test-service.dns-9025.svc.cluster.local from pod dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b: the server could not find the requested resource (get pods dns-test-5c92b291-4863-4211-a38a-1961f748765b)
  Feb 21 00:26:06.553: INFO: Unable to read jessie_hosts@dns-querier-1 from pod dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b: the server could not find the requested resource (get pods dns-test-5c92b291-4863-4211-a38a-1961f748765b)
  Feb 21 00:26:06.553: INFO: Lookups using dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b failed for: [jessie_hosts@dns-querier-1.dns-test-service.dns-9025.svc.cluster.local jessie_hosts@dns-querier-1]

  Feb 21 00:26:06.587: INFO: Pod client logs for webserver: 
  Feb 21 00:26:06.601: INFO: Pod client logs for querier: 
  Feb 21 00:26:06.615: INFO: Pod client logs for jessie-querier: 
  E0221 00:26:07.085489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:08.086012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:09.086497      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:10.087052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:11.087459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:11.660: INFO: Unable to read jessie_hosts@dns-querier-1 from pod dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b: the server could not find the requested resource (get pods dns-test-5c92b291-4863-4211-a38a-1961f748765b)
  Feb 21 00:26:11.660: INFO: Lookups using dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b failed for: [jessie_hosts@dns-querier-1]

  Feb 21 00:26:11.679: INFO: Pod client logs for webserver: 
  Feb 21 00:26:11.699: INFO: Pod client logs for querier: 
  Feb 21 00:26:11.716: INFO: Pod client logs for jessie-querier: 
  E0221 00:26:12.088520      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:13.088566      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:14.089118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:15.089219      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:16.089800      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:16.662: INFO: Unable to read jessie_hosts@dns-querier-1 from pod dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b: the server could not find the requested resource (get pods dns-test-5c92b291-4863-4211-a38a-1961f748765b)
  Feb 21 00:26:16.662: INFO: Lookups using dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b failed for: [jessie_hosts@dns-querier-1]

  Feb 21 00:26:16.684: INFO: Pod client logs for webserver: 
  Feb 21 00:26:16.703: INFO: Pod client logs for querier: 
  Feb 21 00:26:16.714: INFO: Pod client logs for jessie-querier: 
  E0221 00:26:17.089826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:18.090509      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:19.091040      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:20.091116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:21.091802      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:21.717: INFO: DNS probes using dns-9025/dns-test-5c92b291-4863-4211-a38a-1961f748765b succeeded

  Feb 21 00:26:21.717: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:26:21.72
  STEP: Destroying namespace "dns-9025" for this suite. @ 02/21/24 00:26:21.742
• [17.431 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:68
  STEP: Creating a kubernetes client @ 02/21/24 00:26:21.773
  Feb 21 00:26:21.773: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:26:21.774
  E0221 00:26:22.092716      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:26:22.185
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:26:22.187
  STEP: Creating secret with name secret-test-fdede1c9-da90-4376-bf28-8c98758f91bc @ 02/21/24 00:26:22.189
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:26:22.197
  E0221 00:26:23.093710      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:24.094009      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:25.094810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:26.095330      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:26:26.232
  Feb 21 00:26:26.242: INFO: Trying to get logs from node control-plane pod pod-secrets-41f1a315-16e2-4727-9c87-752c1ee5a412 container secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:26:26.262
  Feb 21 00:26:26.333: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2280" for this suite. @ 02/21/24 00:26:26.346
• [4.595 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] RuntimeClass  should support RuntimeClasses API operations [Conformance]
test/e2e/common/node/runtimeclass.go:189
  STEP: Creating a kubernetes client @ 02/21/24 00:26:26.37
  Feb 21 00:26:26.370: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename runtimeclass @ 02/21/24 00:26:26.372
  E0221 00:26:27.095636      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:26:27.892
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:26:27.895
  STEP: getting /apis @ 02/21/24 00:26:27.898
  STEP: getting /apis/node.k8s.io @ 02/21/24 00:26:27.901
  STEP: getting /apis/node.k8s.io/v1 @ 02/21/24 00:26:27.902
  STEP: creating @ 02/21/24 00:26:27.903
  STEP: watching @ 02/21/24 00:26:27.976
  Feb 21 00:26:27.976: INFO: starting watch
  STEP: getting @ 02/21/24 00:26:27.982
  STEP: listing @ 02/21/24 00:26:27.985
  STEP: patching @ 02/21/24 00:26:27.987
  STEP: updating @ 02/21/24 00:26:27.996
  Feb 21 00:26:28.003: INFO: waiting for watch events with expected annotations
  STEP: deleting @ 02/21/24 00:26:28.003
  STEP: deleting a collection @ 02/21/24 00:26:28.013
  Feb 21 00:26:28.031: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-5890" for this suite. @ 02/21/24 00:26:28.033
• [1.670 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's command [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:76
  STEP: Creating a kubernetes client @ 02/21/24 00:26:28.04
  Feb 21 00:26:28.040: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:26:28.041
  E0221 00:26:28.096022      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:26:28.251
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:26:28.253
  STEP: Creating a pod to test substitution in container's command @ 02/21/24 00:26:28.636
  E0221 00:26:29.097275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:30.097353      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:31.098197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:32.098563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:26:32.737
  Feb 21 00:26:32.748: INFO: Trying to get logs from node control-plane pod var-expansion-8fa45665-20da-4fe8-b771-61cd6bd6fbe6 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:26:32.769
  Feb 21 00:26:32.829: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-565" for this suite. @ 02/21/24 00:26:32.842
• [4.828 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a GRPC liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:550
  STEP: Creating a kubernetes client @ 02/21/24 00:26:32.87
  Feb 21 00:26:32.870: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/21/24 00:26:32.872
  E0221 00:26:33.099451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:26:33.446
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:26:33.454
  STEP: Creating pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646 @ 02/21/24 00:26:33.462
  E0221 00:26:34.100692      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:35.100670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:36.101470      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:37.101438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/21/24 00:26:37.527
  Feb 21 00:26:37.538: INFO: Initial restart count of pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c is 0
  Feb 21 00:26:37.553: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:38.101702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:39.102074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:39.558: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:40.102679      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:41.103101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:41.571: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:42.103568      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:43.103594      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:43.574: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:44.103807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:45.103885      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:45.586: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:46.103910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:47.104128      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:47.606: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:48.104272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:49.104689      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:49.622: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:50.105538      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:51.105900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:51.632: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:52.106235      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:53.106742      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:53.640: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:54.107681      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:55.107987      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:55.653: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:56.108291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:57.108734      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:57.664: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:26:58.109421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:26:59.110474      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:26:59.677: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:00.110665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:01.111281      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:01.689: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:02.112321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:03.112805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:03.694: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:04.113122      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:05.113989      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:05.710: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:06.114143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:07.114658      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:07.722: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:08.115045      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:09.115626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:09.735: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:10.116625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:11.117307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:11.747: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:12.117413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:13.118033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:13.760: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:14.118277      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:15.118937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:15.772: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:16.118992      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:17.119290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:17.784: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:18.120445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:19.121043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:19.792: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:20.121654      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:21.122264      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:21.817: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:22.123196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:23.123863      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:23.829: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:24.124911      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:25.126071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:25.834: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:26.126231      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:27.126639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:27.846: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:28.127224      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:29.129056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:29.858: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:30.128511      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:31.128848      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:31.870: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:32.128918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:33.129445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:33.882: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:34.130071      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:35.131123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:35.894: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:36.132060      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:37.132362      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:37.906: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:38.133223      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:39.133845      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:39.919: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:40.135064      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:41.135633      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:41.932: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:42.136555      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:43.137188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:43.943: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:44.137336      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:45.137417      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:45.954: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:46.137846      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:47.138534      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:47.965: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:48.139306      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:49.139860      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:49.972: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  E0221 00:27:50.140665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:51.141238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:27:51.984: INFO: Get pod test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c in namespace container-probe-646
  Feb 21 00:27:51.984: INFO: Restart count of pod container-probe-646/test-grpc-51807b86-4e4f-4508-af6c-54e9807e676c is now 1 (1m14.4456232s elapsed)
  Feb 21 00:27:51.984: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:27:51.998
  STEP: Destroying namespace "container-probe-646" for this suite. @ 02/21/24 00:27:52.055
• [79.198 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide podname only [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:54
  STEP: Creating a kubernetes client @ 02/21/24 00:27:52.069
  Feb 21 00:27:52.069: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:27:52.069
  E0221 00:27:52.141682      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:27:52.365
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:27:52.367
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:27:52.369
  E0221 00:27:53.141995      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:54.142395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:55.142746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:56.143080      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:27:56.398
  Feb 21 00:27:56.409: INFO: Trying to get logs from node control-plane pod downwardapi-volume-4da4e2d6-5084-4d6d-b72f-c81ba3d41394 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:27:56.429
  Feb 21 00:27:56.502: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5570" for this suite. @ 02/21/24 00:27:56.514
• [4.458 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should apply changes to a namespace status [Conformance]
test/e2e/apimachinery/namespace.go:303
  STEP: Creating a kubernetes client @ 02/21/24 00:27:56.527
  Feb 21 00:27:56.527: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/21/24 00:27:56.528
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:27:57.101
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:27:57.102
  STEP: Read namespace status @ 02/21/24 00:27:57.104
  Feb 21 00:27:57.107: INFO: Status: v1.NamespaceStatus{Phase:"Active", Conditions:[]v1.NamespaceCondition(nil)}
  STEP: Patch namespace status @ 02/21/24 00:27:57.107
  Feb 21 00:27:57.113: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusPatch", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Patched by an e2e test"}
  STEP: Update namespace status @ 02/21/24 00:27:57.113
  Feb 21 00:27:57.123: INFO: Status.Condition: v1.NamespaceCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Updated by an e2e test"}
  Feb 21 00:27:57.123: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-1590" for this suite. @ 02/21/24 00:27:57.126
• [0.606 seconds]
------------------------------
[sig-storage] EmptyDir volumes should support (root,0777,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:117
  STEP: Creating a kubernetes client @ 02/21/24 00:27:57.133
  Feb 21 00:27:57.133: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:27:57.133
  E0221 00:27:57.142940      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:27:58.144066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:27:58.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:27:58.199
  STEP: Creating a pod to test emptydir 0777 on tmpfs @ 02/21/24 00:27:58.206
  E0221 00:27:59.144346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:00.145321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:01.145430      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:02.145884      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:28:02.275
  Feb 21 00:28:02.285: INFO: Trying to get logs from node control-plane pod pod-b7655c9a-9619-4c89-919a-8d5b06ecfb69 container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:28:02.305
  Feb 21 00:28:02.359: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-8126" for this suite. @ 02/21/24 00:28:02.364
• [5.241 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] InitContainer [NodeConformance] should invoke init containers on a RestartAlways pod [Conformance]
test/e2e/common/node/init_container.go:256
  STEP: Creating a kubernetes client @ 02/21/24 00:28:02.375
  Feb 21 00:28:02.375: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename init-container @ 02/21/24 00:28:02.375
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:28:02.5
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:28:02.502
  STEP: creating the pod @ 02/21/24 00:28:02.504
  Feb 21 00:28:02.504: INFO: PodSpec: initContainers in spec.initContainers
  E0221 00:28:03.146843      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:04.147278      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:05.147436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:06.147845      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:28:06.293: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "init-container-8971" for this suite. @ 02/21/24 00:28:06.305
• [3.966 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-auth] SubjectReview should support SubjectReview API operations [Conformance]
test/e2e/auth/subjectreviews.go:50
  STEP: Creating a kubernetes client @ 02/21/24 00:28:06.342
  Feb 21 00:28:06.342: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subjectreview @ 02/21/24 00:28:06.343
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:28:06.835
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:28:06.842
  STEP: Creating a Serviceaccount "e2e" in namespace "subjectreview-4687" @ 02/21/24 00:28:06.85
  Feb 21 00:28:06.877: INFO: saUsername: "system:serviceaccount:subjectreview-4687:e2e"
  Feb 21 00:28:06.877: INFO: saGroups: []string{"system:authenticated", "system:serviceaccounts", "system:serviceaccounts:subjectreview-4687"}
  Feb 21 00:28:06.877: INFO: saUID: "2c627814-bb6c-44cd-8b1b-1f2a9c311ba0"
  STEP: Creating clientset to impersonate "system:serviceaccount:subjectreview-4687:e2e" @ 02/21/24 00:28:06.878
  STEP: Creating SubjectAccessReview for "system:serviceaccount:subjectreview-4687:e2e" @ 02/21/24 00:28:06.878
  Feb 21 00:28:06.884: INFO: sarResponse Status: v1.SubjectAccessReviewStatus{Allowed:true, Denied:false, Reason:"", EvaluationError:""}
  STEP: Verifying as "system:serviceaccount:subjectreview-4687:e2e" api 'list' configmaps in "subjectreview-4687" namespace @ 02/21/24 00:28:06.884
  Feb 21 00:28:06.895: INFO: SubjectAccessReview has been verified
  STEP: Creating a LocalSubjectAccessReview for "system:serviceaccount:subjectreview-4687:e2e" @ 02/21/24 00:28:06.895
  Feb 21 00:28:06.900: INFO: lsarResponse Status: v1.SubjectAccessReviewStatus{Allowed:true, Denied:false, Reason:"", EvaluationError:""}
  Feb 21 00:28:06.900: INFO: LocalSubjectAccessReview has been verified
  Feb 21 00:28:06.900: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subjectreview-4687" for this suite. @ 02/21/24 00:28:06.913
• [0.596 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should allow substituting values in a container's args [NodeConformance] [Conformance]
test/e2e/common/node/expansion.go:95
  STEP: Creating a kubernetes client @ 02/21/24 00:28:06.938
  Feb 21 00:28:06.938: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:28:06.94
  E0221 00:28:07.147796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:28:07.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:28:07.196
  STEP: Creating a pod to test substitution in container's args @ 02/21/24 00:28:07.203
  E0221 00:28:08.148416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:09.149182      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:10.149302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:11.149310      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:28:11.27
  Feb 21 00:28:11.280: INFO: Trying to get logs from node control-plane pod var-expansion-13e58501-eaaf-4694-839e-b666e2970c28 container dapi-container: <nil>
  STEP: delete the pod @ 02/21/24 00:28:11.302
  Feb 21 00:28:11.334: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8738" for this suite. @ 02/21/24 00:28:11.339
• [4.438 seconds]
------------------------------
SSSSSS
------------------------------
[sig-node] ConfigMap should be consumable via the environment [NodeConformance] [Conformance]
test/e2e/common/node/configmap.go:93
  STEP: Creating a kubernetes client @ 02/21/24 00:28:11.377
  Feb 21 00:28:11.378: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:28:11.379
  E0221 00:28:12.150110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:28:12.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:28:12.193
  STEP: Creating configMap configmap-278/configmap-test-a382ed70-872b-43a1-bd5c-30784436a59a @ 02/21/24 00:28:12.196
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:28:12.205
  E0221 00:28:13.150739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:14.151618      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:15.151735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:16.151944      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:28:16.25
  Feb 21 00:28:16.256: INFO: Trying to get logs from node control-plane pod pod-configmaps-833bca9e-54d6-4fe5-9ec1-a50fe4cd5b0c container env-test: <nil>
  STEP: delete the pod @ 02/21/24 00:28:16.267
  Feb 21 00:28:16.325: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-278" for this suite. @ 02/21/24 00:28:16.338
• [4.985 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-node] Variable Expansion should verify that a failing subpath expansion can be modified during the lifecycle of a container [Slow] [Conformance]
test/e2e/common/node/expansion.go:228
  STEP: Creating a kubernetes client @ 02/21/24 00:28:16.364
  Feb 21 00:28:16.364: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename var-expansion @ 02/21/24 00:28:16.366
  E0221 00:28:17.152035      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:28:17.191
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:28:17.199
  STEP: creating the pod with failed condition @ 02/21/24 00:28:17.207
  E0221 00:28:18.152551      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:19.153620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:20.154729      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:21.155382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:22.156360      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:23.156918      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:24.157705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:25.158031      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:26.158313      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:27.158942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:28.159705      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:29.160025      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:30.160797      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:31.161242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:32.161439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:33.161801      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:34.162066      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:35.162962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:36.163392      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:37.164036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:38.164733      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:39.165376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:40.166204      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:41.166792      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:42.167619      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:43.168635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:44.169033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:45.169955      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:46.170203      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:47.170385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:48.171365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:49.172441      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:50.173069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:51.173452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:52.174530      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:53.174492      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:54.175322      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:55.175656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:56.176061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:57.176816      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:58.177256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:28:59.177451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:00.178297      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:01.178929      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:02.179146      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:03.179417      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:04.180131      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:05.180149      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:06.180506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:07.181115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:08.181227      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:09.181864      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:10.182599      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:11.183241      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:12.184444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:13.185077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:14.185438      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:15.185598      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:16.186751      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:17.187756      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:18.187640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:19.187964      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:20.188146      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:21.188709      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:22.189050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:23.189683      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:24.190282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:25.191098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:26.191746      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:27.192221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:28.193343      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:29.194323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:30.195425      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:31.195724      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:32.196156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:33.197209      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:34.197280      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:35.198475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:36.198464      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:37.198943      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:38.199414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:39.199735      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:40.199984      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:41.200645      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:42.201732      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:43.202365      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:44.203488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:45.204287      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:46.205217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:47.205778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:48.206083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:49.206437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:50.207100      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:51.207581      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:52.208833      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:53.209188      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:54.209529      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:55.209900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:56.211104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:57.211736      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:58.212350      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:29:59.212960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:00.213482      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:01.214293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:02.215469      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:03.215894      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:04.217118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:05.218037      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:06.218445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:07.219074      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:08.219411      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:09.219861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:10.220791      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:11.221197      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:12.221414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:13.222050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:14.222946      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:15.223934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:16.224586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:17.225414      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: updating the pod @ 02/21/24 00:30:17.248
  Feb 21 00:30:17.797: INFO: Successfully updated pod "var-expansion-e631b16a-736c-4159-8804-cbdab0582145"
  STEP: waiting for pod running @ 02/21/24 00:30:17.797
  E0221 00:30:18.226640      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:19.226920      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: deleting the pod gracefully @ 02/21/24 00:30:19.823
  Feb 21 00:30:19.823: INFO: Deleting pod "var-expansion-e631b16a-736c-4159-8804-cbdab0582145" in namespace "var-expansion-8357"
  Feb 21 00:30:19.858: INFO: Wait up to 5m0s for pod "var-expansion-e631b16a-736c-4159-8804-cbdab0582145" to be fully deleted
  E0221 00:30:20.227288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:21.227516      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:22.228796      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:23.229491      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:24.229912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:25.230840      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:26.231942      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:27.232599      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:28.232961      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:29.233136      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:30.234318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:31.234626      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:32.234910      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:33.235309      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:34.235806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:35.236759      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:36.237548      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:37.238242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:38.239543      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:39.239778      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:40.240237      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:41.241354      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:42.242272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:43.242931      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:44.243434      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:45.244444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:46.245427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:47.245465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:48.246164      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:49.246273      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:50.247199      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:51.247402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:30:52.076: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "var-expansion-8357" for this suite. @ 02/21/24 00:30:52.089
• [155.757 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Discovery should validate PreferredVersion for each APIGroup [Conformance]
test/e2e/apimachinery/discovery.go:125
  STEP: Creating a kubernetes client @ 02/21/24 00:30:52.122
  Feb 21 00:30:52.122: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename discovery @ 02/21/24 00:30:52.124
  E0221 00:30:52.248055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:30:52.691
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:30:52.694
  STEP: Setting up server cert @ 02/21/24 00:30:52.698
  Feb 21 00:30:52.946: INFO: Checking APIGroup: apiregistration.k8s.io
  Feb 21 00:30:52.946: INFO: PreferredVersion.GroupVersion: apiregistration.k8s.io/v1
  Feb 21 00:30:52.946: INFO: Versions found [{apiregistration.k8s.io/v1 v1}]
  Feb 21 00:30:52.946: INFO: apiregistration.k8s.io/v1 matches apiregistration.k8s.io/v1
  Feb 21 00:30:52.946: INFO: Checking APIGroup: apps
  Feb 21 00:30:52.947: INFO: PreferredVersion.GroupVersion: apps/v1
  Feb 21 00:30:52.947: INFO: Versions found [{apps/v1 v1}]
  Feb 21 00:30:52.947: INFO: apps/v1 matches apps/v1
  Feb 21 00:30:52.947: INFO: Checking APIGroup: events.k8s.io
  Feb 21 00:30:52.947: INFO: PreferredVersion.GroupVersion: events.k8s.io/v1
  Feb 21 00:30:52.947: INFO: Versions found [{events.k8s.io/v1 v1}]
  Feb 21 00:30:52.947: INFO: events.k8s.io/v1 matches events.k8s.io/v1
  Feb 21 00:30:52.947: INFO: Checking APIGroup: authentication.k8s.io
  Feb 21 00:30:52.948: INFO: PreferredVersion.GroupVersion: authentication.k8s.io/v1
  Feb 21 00:30:52.948: INFO: Versions found [{authentication.k8s.io/v1 v1}]
  Feb 21 00:30:52.948: INFO: authentication.k8s.io/v1 matches authentication.k8s.io/v1
  Feb 21 00:30:52.948: INFO: Checking APIGroup: authorization.k8s.io
  Feb 21 00:30:52.949: INFO: PreferredVersion.GroupVersion: authorization.k8s.io/v1
  Feb 21 00:30:52.949: INFO: Versions found [{authorization.k8s.io/v1 v1}]
  Feb 21 00:30:52.949: INFO: authorization.k8s.io/v1 matches authorization.k8s.io/v1
  Feb 21 00:30:52.949: INFO: Checking APIGroup: autoscaling
  Feb 21 00:30:52.949: INFO: PreferredVersion.GroupVersion: autoscaling/v2
  Feb 21 00:30:52.949: INFO: Versions found [{autoscaling/v2 v2} {autoscaling/v1 v1}]
  Feb 21 00:30:52.949: INFO: autoscaling/v2 matches autoscaling/v2
  Feb 21 00:30:52.949: INFO: Checking APIGroup: batch
  Feb 21 00:30:52.950: INFO: PreferredVersion.GroupVersion: batch/v1
  Feb 21 00:30:52.950: INFO: Versions found [{batch/v1 v1}]
  Feb 21 00:30:52.950: INFO: batch/v1 matches batch/v1
  Feb 21 00:30:52.950: INFO: Checking APIGroup: certificates.k8s.io
  Feb 21 00:30:52.950: INFO: PreferredVersion.GroupVersion: certificates.k8s.io/v1
  Feb 21 00:30:52.950: INFO: Versions found [{certificates.k8s.io/v1 v1}]
  Feb 21 00:30:52.950: INFO: certificates.k8s.io/v1 matches certificates.k8s.io/v1
  Feb 21 00:30:52.950: INFO: Checking APIGroup: networking.k8s.io
  Feb 21 00:30:52.951: INFO: PreferredVersion.GroupVersion: networking.k8s.io/v1
  Feb 21 00:30:52.951: INFO: Versions found [{networking.k8s.io/v1 v1}]
  Feb 21 00:30:52.951: INFO: networking.k8s.io/v1 matches networking.k8s.io/v1
  Feb 21 00:30:52.951: INFO: Checking APIGroup: policy
  Feb 21 00:30:52.952: INFO: PreferredVersion.GroupVersion: policy/v1
  Feb 21 00:30:52.952: INFO: Versions found [{policy/v1 v1}]
  Feb 21 00:30:52.952: INFO: policy/v1 matches policy/v1
  Feb 21 00:30:52.952: INFO: Checking APIGroup: rbac.authorization.k8s.io
  Feb 21 00:30:52.952: INFO: PreferredVersion.GroupVersion: rbac.authorization.k8s.io/v1
  Feb 21 00:30:52.952: INFO: Versions found [{rbac.authorization.k8s.io/v1 v1}]
  Feb 21 00:30:52.952: INFO: rbac.authorization.k8s.io/v1 matches rbac.authorization.k8s.io/v1
  Feb 21 00:30:52.952: INFO: Checking APIGroup: storage.k8s.io
  Feb 21 00:30:52.953: INFO: PreferredVersion.GroupVersion: storage.k8s.io/v1
  Feb 21 00:30:52.953: INFO: Versions found [{storage.k8s.io/v1 v1}]
  Feb 21 00:30:52.953: INFO: storage.k8s.io/v1 matches storage.k8s.io/v1
  Feb 21 00:30:52.953: INFO: Checking APIGroup: admissionregistration.k8s.io
  Feb 21 00:30:52.953: INFO: PreferredVersion.GroupVersion: admissionregistration.k8s.io/v1
  Feb 21 00:30:52.953: INFO: Versions found [{admissionregistration.k8s.io/v1 v1}]
  Feb 21 00:30:52.953: INFO: admissionregistration.k8s.io/v1 matches admissionregistration.k8s.io/v1
  Feb 21 00:30:52.953: INFO: Checking APIGroup: apiextensions.k8s.io
  Feb 21 00:30:52.954: INFO: PreferredVersion.GroupVersion: apiextensions.k8s.io/v1
  Feb 21 00:30:52.954: INFO: Versions found [{apiextensions.k8s.io/v1 v1}]
  Feb 21 00:30:52.954: INFO: apiextensions.k8s.io/v1 matches apiextensions.k8s.io/v1
  Feb 21 00:30:52.954: INFO: Checking APIGroup: scheduling.k8s.io
  Feb 21 00:30:52.954: INFO: PreferredVersion.GroupVersion: scheduling.k8s.io/v1
  Feb 21 00:30:52.954: INFO: Versions found [{scheduling.k8s.io/v1 v1}]
  Feb 21 00:30:52.954: INFO: scheduling.k8s.io/v1 matches scheduling.k8s.io/v1
  Feb 21 00:30:52.954: INFO: Checking APIGroup: coordination.k8s.io
  Feb 21 00:30:52.955: INFO: PreferredVersion.GroupVersion: coordination.k8s.io/v1
  Feb 21 00:30:52.955: INFO: Versions found [{coordination.k8s.io/v1 v1}]
  Feb 21 00:30:52.955: INFO: coordination.k8s.io/v1 matches coordination.k8s.io/v1
  Feb 21 00:30:52.955: INFO: Checking APIGroup: node.k8s.io
  Feb 21 00:30:52.956: INFO: PreferredVersion.GroupVersion: node.k8s.io/v1
  Feb 21 00:30:52.956: INFO: Versions found [{node.k8s.io/v1 v1}]
  Feb 21 00:30:52.956: INFO: node.k8s.io/v1 matches node.k8s.io/v1
  Feb 21 00:30:52.956: INFO: Checking APIGroup: discovery.k8s.io
  Feb 21 00:30:52.956: INFO: PreferredVersion.GroupVersion: discovery.k8s.io/v1
  Feb 21 00:30:52.956: INFO: Versions found [{discovery.k8s.io/v1 v1}]
  Feb 21 00:30:52.956: INFO: discovery.k8s.io/v1 matches discovery.k8s.io/v1
  Feb 21 00:30:52.956: INFO: Checking APIGroup: flowcontrol.apiserver.k8s.io
  Feb 21 00:30:52.957: INFO: PreferredVersion.GroupVersion: flowcontrol.apiserver.k8s.io/v1beta3
  Feb 21 00:30:52.957: INFO: Versions found [{flowcontrol.apiserver.k8s.io/v1beta3 v1beta3} {flowcontrol.apiserver.k8s.io/v1beta2 v1beta2}]
  Feb 21 00:30:52.957: INFO: flowcontrol.apiserver.k8s.io/v1beta3 matches flowcontrol.apiserver.k8s.io/v1beta3
  Feb 21 00:30:52.957: INFO: Checking APIGroup: crd.projectcalico.org
  Feb 21 00:30:52.957: INFO: PreferredVersion.GroupVersion: crd.projectcalico.org/v1
  Feb 21 00:30:52.957: INFO: Versions found [{crd.projectcalico.org/v1 v1}]
  Feb 21 00:30:52.957: INFO: crd.projectcalico.org/v1 matches crd.projectcalico.org/v1
  Feb 21 00:30:52.957: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "discovery-1858" for this suite. @ 02/21/24 00:30:52.96
• [0.853 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should run through a ConfigMap lifecycle [Conformance]
test/e2e/common/node/configmap.go:169
  STEP: Creating a kubernetes client @ 02/21/24 00:30:52.975
  Feb 21 00:30:52.975: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:30:52.976
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:30:53.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:30:53.195
  STEP: creating a ConfigMap @ 02/21/24 00:30:53.202
  STEP: fetching the ConfigMap @ 02/21/24 00:30:53.225
  STEP: patching the ConfigMap @ 02/21/24 00:30:53.235
  E0221 00:30:53.249133      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: listing all ConfigMaps in all namespaces with a label selector @ 02/21/24 00:30:53.258
  STEP: deleting the ConfigMap by collection with a label selector @ 02/21/24 00:30:53.271
  STEP: listing all ConfigMaps in test namespace @ 02/21/24 00:30:53.305
  Feb 21 00:30:53.315: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-9896" for this suite. @ 02/21/24 00:30:53.327
• [0.376 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Projected combined should project all components that make up the projection API [Projection][NodeConformance] [Conformance]
test/e2e/common/storage/projected_combined.go:44
  STEP: Creating a kubernetes client @ 02/21/24 00:30:53.353
  Feb 21 00:30:53.353: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:30:53.355
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:30:53.621
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:30:53.628
  STEP: Creating configMap with name configmap-projected-all-test-volume-3fd375db-a797-45cf-982d-64d00a7c3b58 @ 02/21/24 00:30:53.636
  STEP: Creating secret with name secret-projected-all-test-volume-5cd52e49-0647-44fe-9944-97dbc86fb030 @ 02/21/24 00:30:53.661
  STEP: Creating a pod to test Check all projections for projected volume plugin @ 02/21/24 00:30:53.673
  E0221 00:30:54.249217      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:55.250097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:56.250472      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:57.251041      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:30:57.72
  Feb 21 00:30:57.730: INFO: Trying to get logs from node control-plane pod projected-volume-938ce6c4-3cc7-4682-a0e7-74c3668d4476 container projected-all-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:30:57.768
  Feb 21 00:30:57.822: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-9937" for this suite. @ 02/21/24 00:30:57.828
• [4.485 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update annotations on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:163
  STEP: Creating a kubernetes client @ 02/21/24 00:30:57.839
  Feb 21 00:30:57.839: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:30:57.839
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:30:58.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:30:58.186
  STEP: Creating the pod @ 02/21/24 00:30:58.188
  E0221 00:30:58.251636      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:30:59.252002      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:00.252940      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:31:00.771: INFO: Successfully updated pod "annotationupdate3096d644-1a17-4c42-800c-65402118b7f6"
  E0221 00:31:01.253187      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:02.253551      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:31:02.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8051" for this suite. @ 02/21/24 00:31:02.831
• [5.019 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-node] Probing container with readiness probe that fails should never be ready and never restart [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:107
  STEP: Creating a kubernetes client @ 02/21/24 00:31:02.859
  Feb 21 00:31:02.859: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/21/24 00:31:02.861
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:31:03.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:31:03.188
  E0221 00:31:03.254030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:04.254939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:05.255068      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:06.255934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:07.256502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:08.256455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:09.257076      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:10.257540      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:11.258274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:12.259087      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:13.260104      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:14.260961      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:15.261147      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:16.261937      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:17.262559      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:18.263553      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:19.263962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:20.264528      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:21.264870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:22.265105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:23.266081      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:24.266577      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:25.266750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:26.267061      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:27.267979      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:28.268807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:29.268900      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:30.270083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:31.270691      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:32.271663      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:33.271827      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:34.272168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:35.272898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:36.273195      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:37.273339      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:38.274127      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:39.274272      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:40.275370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:41.275678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:42.276763      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:43.277730      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:44.278421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:45.278752      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:46.279098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:47.280180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:48.280590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:49.281400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:50.282075      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:51.282442      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:52.283444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:53.284180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:54.285334      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:55.286097      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:56.286226      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:57.286519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:58.287444      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:31:59.287387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:00.287436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:01.288587      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:02.289576      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:03.217: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-probe-5636" for this suite. @ 02/21/24 00:32:03.23
• [60.401 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] CustomResourceConversionWebhook [Privileged:ClusterAdmin] should be able to convert from CR v1 to CR v2 [Conformance]
test/e2e/apimachinery/crd_conversion_webhook.go:141
  STEP: Creating a kubernetes client @ 02/21/24 00:32:03.262
  Feb 21 00:32:03.262: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-webhook @ 02/21/24 00:32:03.264
  E0221 00:32:03.290625      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:03.598
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:03.601
  STEP: Setting up server cert @ 02/21/24 00:32:03.603
  STEP: Create role binding to let cr conversion webhook read extension-apiserver-authentication @ 02/21/24 00:32:03.802
  STEP: Deploying the custom resource conversion webhook pod @ 02/21/24 00:32:03.812
  STEP: Wait for the deployment to be ready @ 02/21/24 00:32:03.83
  Feb 21 00:32:03.835: INFO: new replicaset for deployment "sample-crd-conversion-webhook-deployment" is yet to be created
  E0221 00:32:04.290882      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:05.291807      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 02/21/24 00:32:05.85
  STEP: Verifying the service has paired with the endpoint @ 02/21/24 00:32:05.877
  E0221 00:32:06.292834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:06.877: INFO: Waiting for amount of service:e2e-test-crd-conversion-webhook endpoints to be 1
  Feb 21 00:32:06.901: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:32:07.293446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:08.294255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:09.294665      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a v1 custom resource @ 02/21/24 00:32:09.568
  STEP: v2 custom resource should be converted @ 02/21/24 00:32:09.588
  Feb 21 00:32:09.601: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-webhook-1820" for this suite. @ 02/21/24 00:32:10.284
• [7.031 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:99
  STEP: Creating a kubernetes client @ 02/21/24 00:32:10.294
  Feb 21 00:32:10.294: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:32:10.294
  E0221 00:32:10.294905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:10.45
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:10.454
  STEP: Creating configMap with name configmap-test-volume-map-32e48039-21d6-44c5-bf9a-f3b1e5dc7ebb @ 02/21/24 00:32:10.462
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:32:10.471
  E0221 00:32:11.295282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:12.295722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:13.296058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:14.296518      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:32:14.509
  Feb 21 00:32:14.520: INFO: Trying to get logs from node control-plane pod pod-configmaps-97566a98-663e-4c58-b705-52bb69a70852 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:32:14.54
  Feb 21 00:32:14.607: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-3188" for this suite. @ 02/21/24 00:32:14.62
• [4.353 seconds]
------------------------------
SSSSSS
------------------------------
[sig-storage] Secrets should be able to mount in a volume regardless of a different secret existing with same name in different namespace [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:99
  STEP: Creating a kubernetes client @ 02/21/24 00:32:14.648
  Feb 21 00:32:14.648: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:32:14.65
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:15.226
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:15.229
  E0221 00:32:15.297383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating secret with name secret-test-45f2dea2-82e0-43ff-97e2-a5173bfd1814 @ 02/21/24 00:32:15.5
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:32:15.506
  E0221 00:32:16.297785      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:17.298026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:18.298506      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:19.298671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:32:19.542
  Feb 21 00:32:19.553: INFO: Trying to get logs from node control-plane pod pod-secrets-d52e3d58-5fd2-4950-893c-52cf9bba9306 container secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:32:19.572
  Feb 21 00:32:19.631: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-7910" for this suite. @ 02/21/24 00:32:19.643
  STEP: Destroying namespace "secret-namespace-7466" for this suite. @ 02/21/24 00:32:19.657
• [5.022 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-network] EndpointSlice should support creating EndpointSlice API operations [Conformance]
test/e2e/network/endpointslice.go:355
  STEP: Creating a kubernetes client @ 02/21/24 00:32:19.671
  Feb 21 00:32:19.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename endpointslice @ 02/21/24 00:32:19.673
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:20.188
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:20.195
  STEP: getting /apis @ 02/21/24 00:32:20.203
  STEP: getting /apis/discovery.k8s.io @ 02/21/24 00:32:20.215
  STEP: getting /apis/discovery.k8s.iov1 @ 02/21/24 00:32:20.218
  STEP: creating @ 02/21/24 00:32:20.221
  STEP: getting @ 02/21/24 00:32:20.279
  STEP: listing @ 02/21/24 00:32:20.289
  STEP: watching @ 02/21/24 00:32:20.298
  Feb 21 00:32:20.299: INFO: starting watch
  E0221 00:32:20.299072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: cluster-wide listing @ 02/21/24 00:32:20.302
  STEP: cluster-wide watching @ 02/21/24 00:32:20.313
  Feb 21 00:32:20.313: INFO: starting watch
  STEP: patching @ 02/21/24 00:32:20.316
  STEP: updating @ 02/21/24 00:32:20.339
  Feb 21 00:32:20.368: INFO: waiting for watch events with expected annotations
  Feb 21 00:32:20.368: INFO: saw patched and updated annotations
  STEP: deleting @ 02/21/24 00:32:20.368
  STEP: deleting a collection @ 02/21/24 00:32:20.414
  Feb 21 00:32:20.482: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "endpointslice-48" for this suite. @ 02/21/24 00:32:20.494
• [0.850 seconds]
------------------------------
SS
------------------------------
[sig-api-machinery] FieldValidation should detect unknown metadata fields of a typed object [Conformance]
test/e2e/apimachinery/field_validation.go:117
  STEP: Creating a kubernetes client @ 02/21/24 00:32:20.522
  Feb 21 00:32:20.522: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/21/24 00:32:20.524
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:21.018
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:21.021
  STEP: apply creating a deployment @ 02/21/24 00:32:21.023
  Feb 21 00:32:21.025: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-1845" for this suite. @ 02/21/24 00:32:21.038
• [0.524 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop complex daemon [Conformance]
test/e2e/apps/daemon_set.go:205
  STEP: Creating a kubernetes client @ 02/21/24 00:32:21.047
  Feb 21 00:32:21.047: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/21/24 00:32:21.047
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:21.186
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:21.194
  Feb 21 00:32:21.255: INFO: Creating daemon "daemon-set" with a node selector
  STEP: Initially, daemon pods should not be running on any nodes. @ 02/21/24 00:32:21.271
  Feb 21 00:32:21.283: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:21.283: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Change node label to blue, check that daemon pod is launched. @ 02/21/24 00:32:21.283
  E0221 00:32:21.299351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:21.329: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:21.329: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:32:22.299743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:22.341: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:22.341: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:32:23.300314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:23.340: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:32:23.340: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Update the node label to green, and wait for daemons to be unscheduled @ 02/21/24 00:32:23.35
  Feb 21 00:32:23.407: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:32:23.407: INFO: Number of running nodes: 0, number of available pods: 1 in daemonset daemon-set
  E0221 00:32:24.300452      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:24.419: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:24.419: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  STEP: Update DaemonSet node selector to green, and change its update strategy to RollingUpdate @ 02/21/24 00:32:24.419
  Feb 21 00:32:24.459: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:24.459: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:32:25.300311      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:25.462: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:25.462: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:32:26.300639      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:26.465: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:26.465: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:32:27.301205      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:27.467: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:32:27.467: INFO: Number of running nodes: 1, number of available pods: 1 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 02/21/24 00:32:27.479
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-6919, will wait for the garbage collector to delete the pods @ 02/21/24 00:32:27.479
  Feb 21 00:32:27.564: INFO: Deleting DaemonSet.extensions daemon-set took: 27.734693ms
  Feb 21 00:32:27.965: INFO: Terminating DaemonSet.extensions daemon-set pods took: 400.971613ms
  E0221 00:32:28.302321      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:29.303250      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:30.282: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:32:30.283: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 21 00:32:30.299: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"31326"},"items":null}

  E0221 00:32:30.304033      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:32:30.314: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"31326"},"items":null}

  Feb 21 00:32:30.361: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-6919" for this suite. @ 02/21/24 00:32:30.37
• [9.332 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] ConfigMap should fail to create ConfigMap with empty key [Conformance]
test/e2e/common/node/configmap.go:138
  STEP: Creating a kubernetes client @ 02/21/24 00:32:30.38
  Feb 21 00:32:30.380: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:32:30.38
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:30.849
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:30.858
  STEP: Creating configMap that has name configmap-test-emptyKey-108f60ed-be01-4b09-acd8-1194f81487ce @ 02/21/24 00:32:30.866
  Feb 21 00:32:30.871: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-1832" for this suite. @ 02/21/24 00:32:30.884
• [0.532 seconds]
------------------------------
SSSS
------------------------------
[sig-storage] Subpath Atomic writer volumes should support subpaths with secret pod [Conformance]
test/e2e/storage/subpath.go:59
  STEP: Creating a kubernetes client @ 02/21/24 00:32:30.913
  Feb 21 00:32:30.913: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename subpath @ 02/21/24 00:32:30.915
  E0221 00:32:31.304490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:31.325
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:31.333
  STEP: Setting up data @ 02/21/24 00:32:31.341
  STEP: Creating pod pod-subpath-test-secret-zjph @ 02/21/24 00:32:31.375
  STEP: Creating a pod to test atomic-volume-subpath @ 02/21/24 00:32:31.375
  E0221 00:32:32.305377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:33.306016      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:34.307001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:35.307047      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:36.307304      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:37.307673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:38.307939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:39.308395      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:40.309596      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:41.310072      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:42.310062      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:43.310496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:44.310834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:45.311677      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:46.311771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:47.312453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:48.312670      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:49.313050      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:50.314283      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:51.315212      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:52.315875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:53.316845      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:54.317121      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:55.318186      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:32:55.547
  Feb 21 00:32:55.558: INFO: Trying to get logs from node control-plane pod pod-subpath-test-secret-zjph container test-container-subpath-secret-zjph: <nil>
  STEP: delete the pod @ 02/21/24 00:32:55.579
  STEP: Deleting pod pod-subpath-test-secret-zjph @ 02/21/24 00:32:55.646
  Feb 21 00:32:55.646: INFO: Deleting pod "pod-subpath-test-secret-zjph" in namespace "subpath-8079"
  Feb 21 00:32:55.652: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "subpath-8079" for this suite. @ 02/21/24 00:32:55.659
• [24.757 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:236
  STEP: Creating a kubernetes client @ 02/21/24 00:32:55.671
  Feb 21 00:32:55.671: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:32:55.671
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:32:55.933
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:32:55.937
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:32:55.942
  E0221 00:32:56.318504      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:57.319069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:58.320091      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:32:59.320563      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:32:59.996
  Feb 21 00:33:00.006: INFO: Trying to get logs from node control-plane pod downwardapi-volume-a81be47d-d130-4d28-9252-5a92c12147dd container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:33:00.026
  Feb 21 00:33:00.114: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4806" for this suite. @ 02/21/24 00:33:00.118
• [4.457 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Deployment should run the lifecycle of a Deployment [Conformance]
test/e2e/apps/deployment.go:185
  STEP: Creating a kubernetes client @ 02/21/24 00:33:00.13
  Feb 21 00:33:00.130: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/21/24 00:33:00.13
  E0221 00:33:00.321779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:01.187
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:01.195
  STEP: creating a Deployment @ 02/21/24 00:33:01.218
  STEP: waiting for Deployment to be created @ 02/21/24 00:33:01.24
  STEP: waiting for all Replicas to be Ready @ 02/21/24 00:33:01.244
  Feb 21 00:33:01.248: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.248: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  E0221 00:33:01.322558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  Feb 21 00:33:01.869: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0 and labels map[test-deployment-static:true]
  E0221 00:33:02.322726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:02.476: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  Feb 21 00:33:02.476: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment-static:true]
  E0221 00:33:03.323537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:03.628: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2 and labels map[test-deployment-static:true]
  STEP: patching the Deployment @ 02/21/24 00:33:03.628
  Feb 21 00:33:03.661: INFO: observed event type ADDED
  STEP: waiting for Replicas to scale @ 02/21/24 00:33:03.661
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.663: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 0
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:03.664: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:04.190: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:04.190: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:04.191: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:04.191: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:04.191: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:04.191: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:04.191: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:04.192: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  E0221 00:33:04.324223      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:05.325193      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:05.637: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:05.637: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:05.638: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  STEP: listing Deployments @ 02/21/24 00:33:05.638
  Feb 21 00:33:05.646: INFO: Found test-deployment with labels: map[test-deployment:patched test-deployment-static:true]
  STEP: updating the Deployment @ 02/21/24 00:33:05.646
  Feb 21 00:33:05.674: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  STEP: fetching the DeploymentStatus @ 02/21/24 00:33:05.674
  Feb 21 00:33:05.692: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:05.742: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:06.096: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:06.097: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:06.097: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:06.097: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1 and labels map[test-deployment:updated test-deployment-static:true]
  E0221 00:33:06.325690      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:07.326156      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:07.460: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:07.460: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  Feb 21 00:33:07.460: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2 and labels map[test-deployment:updated test-deployment-static:true]
  E0221 00:33:08.326380      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:08.600: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 3 and labels map[test-deployment:updated test-deployment-static:true]
  STEP: patching the DeploymentStatus @ 02/21/24 00:33:08.6
  STEP: fetching the DeploymentStatus @ 02/21/24 00:33:08.652
  Feb 21 00:33:08.656: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.656: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.656: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.656: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 1
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 2
  Feb 21 00:33:08.657: INFO: observed Deployment test-deployment in namespace deployment-951 with ReadyReplicas 3
  STEP: deleting the Deployment @ 02/21/24 00:33:08.657
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.667: INFO: observed event type MODIFIED
  Feb 21 00:33:08.668: INFO: observed event type MODIFIED
  Feb 21 00:33:08.668: INFO: observed event type MODIFIED
  Feb 21 00:33:08.668: INFO: observed event type MODIFIED
  Feb 21 00:33:08.668: INFO: observed event type MODIFIED
  Feb 21 00:33:08.668: INFO: observed event type MODIFIED
  Feb 21 00:33:08.671: INFO: Log out all the ReplicaSets if there is no deployment created
  Feb 21 00:33:08.674: INFO: ReplicaSet "test-deployment-69d58987ff":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-69d58987ff",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "1c820590-4d63-428f-b2fe-4bd5e0d92364",
      ResourceVersion: (string) (len=5) "31547",
      Generation: (int64) 3,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072381,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "aa34d2e0-afb9-4b5e-b202-76a7e7ec854c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 61 61 33 34  64 32 65 30 2d 61 66 62  |":\"aa34d2e0-afb|
              00000130  39 2d 34 62 35 65 2d 62  32 30 32 2d 37 36 61 37  |9-4b5e-b202-76a7|
              00000140  65 37 65 63 38 35 34 63  5c 22 7d 22 3a 7b 7d 7d  |e7ec854c\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "69d58987ff",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 3,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Feb 21 00:33:08.677: INFO: ReplicaSet "test-deployment-79ff746c4":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=25) "test-deployment-79ff746c4",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "b74beb42-7d3f-4e20-ab84-7970e69397af",
      ResourceVersion: (string) (len=5) "31638",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072385,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "3",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "aa34d2e0-afb9-4b5e-b202-76a7e7ec854c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 61 61 33 34  64 32 65 30 2d 61 66 62  |":\"aa34d2e0-afb|
              00000130  39 2d 34 62 35 65 2d 62  32 30 32 2d 37 36 61 37  |9-4b5e-b202-76a7|
              00000140  65 37 65 63 38 35 34 63  5c 22 7d 22 3a 7b 7d 7d  |e7ec854c\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(2),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=22) "test-deployment-static": (string) (len=4) "true",
            (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(1),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 2,
      FullyLabeledReplicas: (int32) 2,
      ReadyReplicas: (int32) 2,
      AvailableReplicas: (int32) 2,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Feb 21 00:33:08.681: INFO: pod: "test-deployment-79ff746c4-tk2sr":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-tk2sr",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "82e30509-2bc5-4b7e-976f-cec50f9caac5",
      ResourceVersion: (string) (len=5) "31609",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072385,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "fd1f09f5ea357a4829af142b4d774b5b839f520587810272f22a7d5493ac7e0a",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.133/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.133/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "b74beb42-7d3f-4e20-ab84-7970e69397af",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  62 37 34 62 65 62 34 32  |uid\":\"b74beb42|
              000000a0  2d 37 64 33 66 2d 34 65  32 30 2d 61 62 38 34 2d  |-7d3f-4e20-ab84-|
              000000b0  37 39 37 30 65 36 39 33  39 37 61 66 5c 22 7d 22  |7970e69397af\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072386,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 33 33 5c 22 7d 22  |10.1.235.133\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-v8n26",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-v8n26",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072386,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.133",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.133"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072386,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844072386,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://9bf719a931202337f0bced8db341b31956d723be0d77c9be5aa56ed2e604cad9",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Feb 21 00:33:08.682: INFO: pod: "test-deployment-79ff746c4-gw2gn":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=31) "test-deployment-79ff746c4-gw2gn",
      GenerateName: (string) (len=26) "test-deployment-79ff746c4-",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "ed27f643-c03b-4b17-8103-e89dbf2c7cbd",
      ResourceVersion: (string) (len=5) "31637",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072387,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=9) "79ff746c4",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "e074490ba8f9d37c4d9101e59616b93f445db1366d8f0ce7c0ddd4aa63ce1896",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=14) "10.1.171.89/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=14) "10.1.171.89/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=25) "test-deployment-79ff746c4",
          UID: (types.UID) (len=36) "b74beb42-7d3f-4e20-ab84-7970e69397af",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  62 37 34 62 65 62 34 32  |uid\":\"b74beb42|
              000000a0  2d 37 64 33 66 2d 34 65  32 30 2d 61 62 38 34 2d  |-7d3f-4e20-ab84-|
              000000b0  37 39 37 30 65 36 39 33  39 37 61 66 5c 22 7d 22  |7970e69397af\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 38 39 5c 22 7d 22 3a  |10.1.171.89\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-5trs5",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-5trs5",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(1),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.89",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.89"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072387,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844072388,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
          ImageID: (string) (len=109) "registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22",
          ContainerID: (string) (len=77) "containerd://6a4be7f9f1094096034163853ae8bc130c334c6b7eaaf0fa5873a30a61d05fa1",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Feb 21 00:33:08.683: INFO: ReplicaSet "test-deployment-64fd565c98":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=26) "test-deployment-64fd565c98",
      GenerateName: (string) "",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "04a77d1e-b8f2-40d7-a84a-df5fce0d5195",
      ResourceVersion: (string) (len=5) "31645",
      Generation: (int64) 4,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072383,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "3",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=15) "test-deployment",
          UID: (types.UID) (len=36) "aa34d2e0-afb9-4b5e-b202-76a7e7ec854c",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=827) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              000000d0  65 2d 68 61 73 68 22 3a  7b 7d 2c 22 66 3a 74 65  |e-hash":{},"f:te|
              000000e0  73 74 2d 64 65 70 6c 6f  79 6d 65 6e 74 2d 73 74  |st-deployment-st|
              000000f0  61 74 69 63 22 3a 7b 7d  7d 2c 22 66 3a 6f 77 6e  |atic":{}},"f:own|
              00000100  65 72 52 65 66 65 72 65  6e 63 65 73 22 3a 7b 22  |erReferences":{"|
              00000110  2e 22 3a 7b 7d 2c 22 6b  3a 7b 5c 22 75 69 64 5c  |.":{},"k:{\"uid\|
              00000120  22 3a 5c 22 61 61 33 34  64 32 65 30 2d 61 66 62  |":\"aa34d2e0-afb|
              00000130  39 2d 34 62 35 65 2d 62  32 30 32 2d 37 36 61 37  |9-4b5e-b202-76a7|
              00000140  65 37 65 63 38 35 34 63  5c 22 7d 22 3a 7b 7d 7d  |e7ec854c\"}":{}}|
              00000150  7d 2c 22 66 3a 73 70 65  63 22 3a 7b 22 66 3a 72  |},"f:spec":{"f:r|
              00000160  65 70 6c 69 63 61 73 22  3a 7b 7d 2c 22 66 3a 73  |eplicas":{},"f:s|
              00000170  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 74  |elector":{},"f:t|
              00000180  65 6d 70 6c 61 74 65 22  3a 7b 22 66 3a 6d 65 74  |emplate":{"f:met|
              00000190  61 64 61 74 61 22 3a 7b  22 66 3a 6c 61 62 65 6c  |adata":{"f:label|
              000001a0  73 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 70 6f  |s":{".":{},"f:po|
              000001b0  64 2d 74 65 6d 70 6c 61  74 65 2d 68 61 73 68 22  |d-template-hash"|
              000001c0  3a 7b 7d 2c 22 66 3a 74  65 73 74 2d 64 65 70 6c  |:{},"f:test-depl|
              000001d0  6f 79 6d 65 6e 74 2d 73  74 61 74 69 63 22 3a 7b  |oyment-static":{|
              000001e0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000001f0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              00000200  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 74 65 73  |:{\"name\":\"tes|
              00000210  74 2d 64 65 70 6c 6f 79  6d 65 6e 74 5c 22 7d 22  |t-deployment\"}"|
              00000220  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 6d 61 67  |:{".":{},"f:imag|
              00000230  65 22 3a 7b 7d 2c 22 66  3a 69 6d 61 67 65 50 75  |e":{},"f:imagePu|
              00000240  6c 6c 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |llPolicy":{},"f:|
              00000250  6e 61 6d 65 22 3a 7b 7d  2c 22 66 3a 72 65 73 6f  |name":{},"f:reso|
              00000260  75 72 63 65 73 22 3a 7b  7d 2c 22 66 3a 73 65 63  |urces":{},"f:sec|
              00000270  75 72 69 74 79 43 6f 6e  74 65 78 74 22 3a 7b 7d  |urityContext":{}|
              00000280  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000290  65 73 73 61 67 65 50 61  74 68 22 3a 7b 7d 2c 22  |essagePath":{},"|
              000002a0  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 4d 65 73  |f:terminationMes|
              000002b0  73 61 67 65 50 6f 6c 69  63 79 22 3a 7b 7d 7d 7d  |sagePolicy":{}}}|
              000002c0  2c 22 66 3a 64 6e 73 50  6f 6c 69 63 79 22 3a 7b  |,"f:dnsPolicy":{|
              000002d0  7d 2c 22 66 3a 72 65 73  74 61 72 74 50 6f 6c 69  |},"f:restartPoli|
              000002e0  63 79 22 3a 7b 7d 2c 22  66 3a 73 63 68 65 64 75  |cy":{},"f:schedu|
              000002f0  6c 65 72 4e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 73  |lerName":{},"f:s|
              00000300  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000310  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000320  6e 47 72 61 63 65 50 65  72 69 6f 64 53 65 63 6f  |nGracePeriodSeco|
              00000330  6e 64 73 22 3a 7b 7d 7d  7d 7d 7d                 |nds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
          (string) (len=22) "test-deployment-static": (string) (len=4) "true"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
            (string) (len=22) "test-deployment-static": (string) (len=4) "true"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=15) "test-deployment",
              Image: (string) (len=25) "registry.k8s.io/pause:3.9",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(2),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 4,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }


  Feb 21 00:33:08.688: INFO: pod: "test-deployment-64fd565c98-ttjhl":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-ttjhl",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "10e9cf26-ebe8-4f66-96f0-665129653b47",
      ResourceVersion: (string) (len=5) "31642",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072383,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072390,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98",
        (string) (len=22) "test-deployment-static": (string) (len=4) "true"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "d702433d0dd609abd1faeff4bc3a5217ecc8933b7c1ed68bce15879ee8c80a47",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.189/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.189/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "04a77d1e-b8f2-40d7-a84a-df5fce0d5195",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072383,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  30 34 61 37 37 64 31 65  |uid\":\"04a77d1e|
              000000a0  2d 62 38 66 32 2d 34 30  64 37 2d 61 38 34 61 2d  |-b8f2-40d7-a84a-|
              000000b0  64 66 35 66 63 65 30 64  35 31 39 35 5c 22 7d 22  |df5fce0d5195\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072384,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 38 39 5c 22 7d 22  |10.1.235.189\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-tdk2f",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-tdk2f",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072384,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072383,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.189",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.189"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072384,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844072385,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://e71ecb373ca7a4efb49feacc64e7112298aa35470374082c03380e24c7a02f0a",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Feb 21 00:33:08.689: INFO: pod: "test-deployment-64fd565c98-fsbch":
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=32) "test-deployment-64fd565c98-fsbch",
      GenerateName: (string) (len=27) "test-deployment-64fd565c98-",
      Namespace: (string) (len=14) "deployment-951",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "36023695-a8cb-42d5-9b59-136239fa87a1",
      ResourceVersion: (string) (len=5) "31648",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072385,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072389,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      DeletionGracePeriodSeconds: (*int64)(2),
      Labels: (map[string]string) (len=2) {
        (string) (len=22) "test-deployment-static": (string) (len=4) "true",
        (string) (len=17) "pod-template-hash": (string) (len=10) "64fd565c98"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "6feabbfb20b8271760864d1222e3c4c3f35e65384af93ea20a7f07efc20420a3",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) "",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) ""
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=26) "test-deployment-64fd565c98",
          UID: (types.UID) (len=36) "04a77d1e-b8f2-40d7-a84a-df5fce0d5195",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=565) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 70 6f 64 2d 74 65 6d  |.":{},"f:pod-tem|
              00000040  70 6c 61 74 65 2d 68 61  73 68 22 3a 7b 7d 2c 22  |plate-hash":{},"|
              00000050  66 3a 74 65 73 74 2d 64  65 70 6c 6f 79 6d 65 6e  |f:test-deploymen|
              00000060  74 2d 73 74 61 74 69 63  22 3a 7b 7d 7d 2c 22 66  |t-static":{}},"f|
              00000070  3a 6f 77 6e 65 72 52 65  66 65 72 65 6e 63 65 73  |:ownerReferences|
              00000080  22 3a 7b 22 2e 22 3a 7b  7d 2c 22 6b 3a 7b 5c 22  |":{".":{},"k:{\"|
              00000090  75 69 64 5c 22 3a 5c 22  30 34 61 37 37 64 31 65  |uid\":\"04a77d1e|
              000000a0  2d 62 38 66 32 2d 34 30  64 37 2d 61 38 34 61 2d  |-b8f2-40d7-a84a-|
              000000b0  64 66 35 66 63 65 30 64  35 31 39 35 5c 22 7d 22  |df5fce0d5195\"}"|
              000000c0  3a 7b 7d 7d 7d 2c 22 66  3a 73 70 65 63 22 3a 7b  |:{}}},"f:spec":{|
              000000d0  22 66 3a 63 6f 6e 74 61  69 6e 65 72 73 22 3a 7b  |"f:containers":{|
              000000e0  22 6b 3a 7b 5c 22 6e 61  6d 65 5c 22 3a 5c 22 74  |"k:{\"name\":\"t|
              000000f0  65 73 74 2d 64 65 70 6c  6f 79 6d 65 6e 74 5c 22  |est-deployment\"|
              00000100  7d 22 3a 7b 22 2e 22 3a  7b 7d 2c 22 66 3a 69 6d  |}":{".":{},"f:im|
              00000110  61 67 65 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |age":{},"f:image|
              00000120  50 75 6c 6c 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |PullPolicy":{},"|
              00000130  66 3a 6e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 72 65  |f:name":{},"f:re|
              00000140  73 6f 75 72 63 65 73 22  3a 7b 7d 2c 22 66 3a 73  |sources":{},"f:s|
              00000150  65 63 75 72 69 74 79 43  6f 6e 74 65 78 74 22 3a  |ecurityContext":|
              00000160  7b 7d 2c 22 66 3a 74 65  72 6d 69 6e 61 74 69 6f  |{},"f:terminatio|
              00000170  6e 4d 65 73 73 61 67 65  50 61 74 68 22 3a 7b 7d  |nMessagePath":{}|
              00000180  2c 22 66 3a 74 65 72 6d  69 6e 61 74 69 6f 6e 4d  |,"f:terminationM|
              00000190  65 73 73 61 67 65 50 6f  6c 69 63 79 22 3a 7b 7d  |essagePolicy":{}|
              000001a0  7d 7d 2c 22 66 3a 64 6e  73 50 6f 6c 69 63 79 22  |}},"f:dnsPolicy"|
              000001b0  3a 7b 7d 2c 22 66 3a 65  6e 61 62 6c 65 53 65 72  |:{},"f:enableSer|
              000001c0  76 69 63 65 4c 69 6e 6b  73 22 3a 7b 7d 2c 22 66  |viceLinks":{},"f|
              000001d0  3a 72 65 73 74 61 72 74  50 6f 6c 69 63 79 22 3a  |:restartPolicy":|
              000001e0  7b 7d 2c 22 66 3a 73 63  68 65 64 75 6c 65 72 4e  |{},"f:schedulerN|
              000001f0  61 6d 65 22 3a 7b 7d 2c  22 66 3a 73 65 63 75 72  |ame":{},"f:secur|
              00000200  69 74 79 43 6f 6e 74 65  78 74 22 3a 7b 7d 2c 22  |ityContext":{},"|
              00000210  66 3a 74 65 72 6d 69 6e  61 74 69 6f 6e 47 72 61  |f:terminationGra|
              00000220  63 65 50 65 72 69 6f 64  53 65 63 6f 6e 64 73 22  |cePeriodSeconds"|
              00000230  3a 7b 7d 7d 7d                                    |:{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=518) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 31 37 31  2e 38 38 5c 22 7d 22 3a  |10.1.171.88\"}":|
              000001e0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 70 22 3a 7b  |{".":{},"f:ip":{|
              000001f0  7d 7d 7d 2c 22 66 3a 73  74 61 72 74 54 69 6d 65  |}}},"f:startTime|
              00000200  22 3a 7b 7d 7d 7d                                 |":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072388,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-kwmq8",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=15) "test-deployment",
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-kwmq8",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(2),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=6) "worker",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072387,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072385,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.108",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=11) "10.1.171.88",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=11) "10.1.171.88"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072385,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=15) "test-deployment",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844072386,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=25) "registry.k8s.io/pause:3.9",
          ImageID: (string) (len=93) "registry.k8s.io/pause@sha256:7031c1b283388d2c2e09b57badb803c05ebed362dc88d84b480cc47f72a21097",
          ContainerID: (string) (len=77) "containerd://998b977b863f60042c12a7987191826c7ada66ad4a5d0be59b675a3e10795ef8",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }


  Feb 21 00:33:08.690: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-951" for this suite. @ 02/21/24 00:33:08.694
• [8.572 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Pods should support remote command execution over websockets [NodeConformance] [Conformance]
test/e2e/common/node/pods.go:537
  STEP: Creating a kubernetes client @ 02/21/24 00:33:08.703
  Feb 21 00:33:08.703: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/21/24 00:33:08.704
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:08.789
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:08.792
  Feb 21 00:33:08.795: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: creating the pod @ 02/21/24 00:33:08.795
  STEP: submitting the pod to kubernetes @ 02/21/24 00:33:08.795
  E0221 00:33:09.327079      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:10.327648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:10.864: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-6460" for this suite. @ 02/21/24 00:33:10.868
• [2.171 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-node] RuntimeClass should schedule a Pod requesting a RuntimeClass without PodOverhead [NodeConformance] [Conformance]
test/e2e/common/node/runtimeclass.go:104
  STEP: Creating a kubernetes client @ 02/21/24 00:33:10.875
  Feb 21 00:33:10.875: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename runtimeclass @ 02/21/24 00:33:10.875
  E0221 00:33:11.328420      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:11.651
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:11.655
  E0221 00:33:12.329702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:13.330347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:13.688: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "runtimeclass-3108" for this suite. @ 02/21/24 00:33:13.727
• [2.878 seconds]
------------------------------
SSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes should support (root,0644,tmpfs) [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:97
  STEP: Creating a kubernetes client @ 02/21/24 00:33:13.754
  Feb 21 00:33:13.754: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:33:13.755
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:14.001
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:14.003
  STEP: Creating a pod to test emptydir 0644 on tmpfs @ 02/21/24 00:33:14.005
  E0221 00:33:14.330960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:15.331351      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:16.331834      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:17.332539      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:33:18.061
  Feb 21 00:33:18.072: INFO: Trying to get logs from node control-plane pod pod-8686e25c-94b5-4ab6-85da-59f017e62943 container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:33:18.093
  Feb 21 00:33:18.145: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-4824" for this suite. @ 02/21/24 00:33:18.154
• [4.420 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-node] Secrets should patch a secret [Conformance]
test/e2e/common/node/secrets.go:154
  STEP: Creating a kubernetes client @ 02/21/24 00:33:18.175
  Feb 21 00:33:18.175: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:33:18.177
  E0221 00:33:18.333363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:18.69
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:18.692
  STEP: creating a secret @ 02/21/24 00:33:18.695
  STEP: listing secrets in all namespaces to ensure that there are more than zero @ 02/21/24 00:33:18.702
  STEP: patching the secret @ 02/21/24 00:33:18.705
  STEP: deleting the secret using a LabelSelector @ 02/21/24 00:33:18.714
  STEP: listing secrets in all namespaces, searching for label name and value in patch @ 02/21/24 00:33:18.724
  Feb 21 00:33:18.727: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-2890" for this suite. @ 02/21/24 00:33:18.73
• [0.562 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-apps] Deployment deployment should support rollover [Conformance]
test/e2e/apps/deployment.go:132
  STEP: Creating a kubernetes client @ 02/21/24 00:33:18.737
  Feb 21 00:33:18.737: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename deployment @ 02/21/24 00:33:18.738
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:18.779
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:18.782
  Feb 21 00:33:18.795: INFO: Pod name rollover-pod: Found 0 pods out of 1
  E0221 00:33:19.334184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:20.334307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:21.334847      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:22.335489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:23.335717      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:23.804: INFO: Pod name rollover-pod: Found 1 pods out of 1
  STEP: ensuring each pod is running @ 02/21/24 00:33:23.804
  Feb 21 00:33:23.804: INFO: Waiting for pods owned by replica set "test-rollover-controller" to become ready
  E0221 00:33:24.336046      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:25.337262      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:25.848: INFO: Creating deployment "test-rollover-deployment"
  Feb 21 00:33:25.886: INFO: Make sure deployment "test-rollover-deployment" performs scaling operations
  E0221 00:33:26.337453      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:27.337620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:27.900: INFO: Check revision of new replica set for deployment "test-rollover-deployment"
  Feb 21 00:33:27.926: INFO: Ensure that both replica sets have 1 created replica
  Feb 21 00:33:27.931: INFO: Rollover old replica sets for deployment "test-rollover-deployment" with new image update
  Feb 21 00:33:27.942: INFO: Updating deployment test-rollover-deployment
  Feb 21 00:33:27.942: INFO: Wait deployment "test-rollover-deployment" to be observed by the deployment controller
  E0221 00:33:28.338755      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:29.339770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:29.997: INFO: Wait for revision update of deployment "test-rollover-deployment" to 2
  Feb 21 00:33:30.024: INFO: Make sure deployment "test-rollover-deployment" is complete
  Feb 21 00:33:30.029: INFO: all replica sets need to contain the pod-template-hash label
  Feb 21 00:33:30.029: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:33:30.340023      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:31.339685      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:32.111: INFO: all replica sets need to contain the pod-template-hash label
  Feb 21 00:33:32.111: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:33:32.340720      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:33.341379      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:34.054: INFO: all replica sets need to contain the pod-template-hash label
  Feb 21 00:33:34.054: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:33:34.341789      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:35.342770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:36.036: INFO: all replica sets need to contain the pod-template-hash label
  Feb 21 00:33:36.036: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:33:36.343251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:37.343826      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:38.052: INFO: all replica sets need to contain the pod-template-hash label
  Feb 21 00:33:38.052: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:2, Replicas:2, UpdatedReplicas:1, ReadyReplicas:2, AvailableReplicas:1, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"MinimumReplicasAvailable", Message:"Deployment has minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 33, 29, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 33, 26, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"test-rollover-deployment-5d484bf7f9\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:33:38.344769      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:39.345427      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:33:40.044: INFO: 
  Feb 21 00:33:40.044: INFO: Ensure that both old replica sets have no replicas
  Feb 21 00:33:40.056: INFO: Deployment "test-rollover-deployment":
  (v1.Deployment) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-deployment",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2674",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "6201b726-1e53-42eb-b60f-beac8b3aaf26",
      ResourceVersion: (string) (len=5) "31958",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072405,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=1) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod"
      },
      Annotations: (map[string]string) (len=1) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) <nil>,
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072407,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=660) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 7d 7d 2c  |},"f:name":{}}},|
              00000030  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000040  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000050  2c 22 66 3a 70 72 6f 67  72 65 73 73 44 65 61 64  |,"f:progressDead|
              00000060  6c 69 6e 65 53 65 63 6f  6e 64 73 22 3a 7b 7d 2c  |lineSeconds":{},|
              00000070  22 66 3a 72 65 70 6c 69  63 61 73 22 3a 7b 7d 2c  |"f:replicas":{},|
              00000080  22 66 3a 72 65 76 69 73  69 6f 6e 48 69 73 74 6f  |"f:revisionHisto|
              00000090  72 79 4c 69 6d 69 74 22  3a 7b 7d 2c 22 66 3a 73  |ryLimit":{},"f:s|
              000000a0  65 6c 65 63 74 6f 72 22  3a 7b 7d 2c 22 66 3a 73  |elector":{},"f:s|
              000000b0  74 72 61 74 65 67 79 22  3a 7b 22 66 3a 72 6f 6c  |trategy":{"f:rol|
              000000c0  6c 69 6e 67 55 70 64 61  74 65 22 3a 7b 22 2e 22  |lingUpdate":{"."|
              000000d0  3a 7b 7d 2c 22 66 3a 6d  61 78 53 75 72 67 65 22  |:{},"f:maxSurge"|
              000000e0  3a 7b 7d 2c 22 66 3a 6d  61 78 55 6e 61 76 61 69  |:{},"f:maxUnavai|
              000000f0  6c 61 62 6c 65 22 3a 7b  7d 7d 2c 22 66 3a 74 79  |lable":{}},"f:ty|
              00000100  70 65 22 3a 7b 7d 7d 2c  22 66 3a 74 65 6d 70 6c  |pe":{}},"f:templ|
              00000110  61 74 65 22 3a 7b 22 66  3a 6d 65 74 61 64 61 74  |ate":{"f:metadat|
              00000120  61 22 3a 7b 22 66 3a 6c  61 62 65 6c 73 22 3a 7b  |a":{"f:labels":{|
              00000130  22 2e 22 3a 7b 7d 2c 22  66 3a 6e 61 6d 65 22 3a  |".":{},"f:name":|
              00000140  7b 7d 7d 7d 2c 22 66 3a  73 70 65 63 22 3a 7b 22  |{}}},"f:spec":{"|
              00000150  66 3a 63 6f 6e 74 61 69  6e 65 72 73 22 3a 7b 22  |f:containers":{"|
              00000160  6b 3a 7b 5c 22 6e 61 6d  65 5c 22 3a 5c 22 61 67  |k:{\"name\":\"ag|
              00000170  6e 68 6f 73 74 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |nhost\"}":{".":{|
              00000180  7d 2c 22 66 3a 69 6d 61  67 65 22 3a 7b 7d 2c 22  |},"f:image":{},"|
              00000190  66 3a 69 6d 61 67 65 50  75 6c 6c 50 6f 6c 69 63  |f:imagePullPolic|
              000001a0  79 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |y":{},"f:name":{|
              000001b0  7d 2c 22 66 3a 72 65 73  6f 75 72 63 65 73 22 3a  |},"f:resources":|
              000001c0  7b 7d 2c 22 66 3a 73 65  63 75 72 69 74 79 43 6f  |{},"f:securityCo|
              000001d0  6e 74 65 78 74 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ntext":{},"f:ter|
              000001e0  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000001f0  61 74 68 22 3a 7b 7d 2c  22 66 3a 74 65 72 6d 69  |ath":{},"f:termi|
              00000200  6e 61 74 69 6f 6e 4d 65  73 73 61 67 65 50 6f 6c  |nationMessagePol|
              00000210  69 63 79 22 3a 7b 7d 7d  7d 2c 22 66 3a 64 6e 73  |icy":{}}},"f:dns|
              00000220  50 6f 6c 69 63 79 22 3a  7b 7d 2c 22 66 3a 72 65  |Policy":{},"f:re|
              00000230  73 74 61 72 74 50 6f 6c  69 63 79 22 3a 7b 7d 2c  |startPolicy":{},|
              00000240  22 66 3a 73 63 68 65 64  75 6c 65 72 4e 61 6d 65  |"f:schedulerName|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 47 72 61 63 65 50  |erminationGraceP|
              00000280  65 72 69 6f 64 53 65 63  6f 6e 64 73 22 3a 7b 7d  |eriodSeconds":{}|
              00000290  7d 7d 7d 7d                                       |}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072419,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=514) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 72 65 76 69 73  69 6f 6e 22 3a 7b 7d 7d  |io/revision":{}}|
              00000050  7d 2c 22 66 3a 73 74 61  74 75 73 22 3a 7b 22 66  |},"f:status":{"f|
              00000060  3a 61 76 61 69 6c 61 62  6c 65 52 65 70 6c 69 63  |:availableReplic|
              00000070  61 73 22 3a 7b 7d 2c 22  66 3a 63 6f 6e 64 69 74  |as":{},"f:condit|
              00000080  69 6f 6e 73 22 3a 7b 22  2e 22 3a 7b 7d 2c 22 6b  |ions":{".":{},"k|
              00000090  3a 7b 5c 22 74 79 70 65  5c 22 3a 5c 22 41 76 61  |:{\"type\":\"Ava|
              000000a0  69 6c 61 62 6c 65 5c 22  7d 22 3a 7b 22 2e 22 3a  |ilable\"}":{".":|
              000000b0  7b 7d 2c 22 66 3a 6c 61  73 74 54 72 61 6e 73 69  |{},"f:lastTransi|
              000000c0  74 69 6f 6e 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |tionTime":{},"f:|
              000000d0  6c 61 73 74 55 70 64 61  74 65 54 69 6d 65 22 3a  |lastUpdateTime":|
              000000e0  7b 7d 2c 22 66 3a 6d 65  73 73 61 67 65 22 3a 7b  |{},"f:message":{|
              000000f0  7d 2c 22 66 3a 72 65 61  73 6f 6e 22 3a 7b 7d 2c  |},"f:reason":{},|
              00000100  22 66 3a 73 74 61 74 75  73 22 3a 7b 7d 2c 22 66  |"f:status":{},"f|
              00000110  3a 74 79 70 65 22 3a 7b  7d 7d 2c 22 6b 3a 7b 5c  |:type":{}},"k:{\|
              00000120  22 74 79 70 65 5c 22 3a  5c 22 50 72 6f 67 72 65  |"type\":\"Progre|
              00000130  73 73 69 6e 67 5c 22 7d  22 3a 7b 22 2e 22 3a 7b  |ssing\"}":{".":{|
              00000140  7d 2c 22 66 3a 6c 61 73  74 54 72 61 6e 73 69 74  |},"f:lastTransit|
              00000150  69 6f 6e 54 69 6d 65 22  3a 7b 7d 2c 22 66 3a 6c  |ionTime":{},"f:l|
              00000160  61 73 74 55 70 64 61 74  65 54 69 6d 65 22 3a 7b  |astUpdateTime":{|
              00000170  7d 2c 22 66 3a 6d 65 73  73 61 67 65 22 3a 7b 7d  |},"f:message":{}|
              00000180  2c 22 66 3a 72 65 61 73  6f 6e 22 3a 7b 7d 2c 22  |,"f:reason":{},"|
              00000190  66 3a 73 74 61 74 75 73  22 3a 7b 7d 2c 22 66 3a  |f:status":{},"f:|
              000001a0  74 79 70 65 22 3a 7b 7d  7d 7d 2c 22 66 3a 6f 62  |type":{}}},"f:ob|
              000001b0  73 65 72 76 65 64 47 65  6e 65 72 61 74 69 6f 6e  |servedGeneration|
              000001c0  22 3a 7b 7d 2c 22 66 3a  72 65 61 64 79 52 65 70  |":{},"f:readyRep|
              000001d0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 72 65 70  |licas":{},"f:rep|
              000001e0  6c 69 63 61 73 22 3a 7b  7d 2c 22 66 3a 75 70 64  |licas":{},"f:upd|
              000001f0  61 74 65 64 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |atedReplicas":{}|
              00000200  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.DeploymentSpec) {
      Replicas: (*int32)(1),
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=1) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=1) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      },
      Strategy: (v1.DeploymentStrategy) {
        Type: (v1.DeploymentStrategyType) (len=13) "RollingUpdate",
        RollingUpdate: (*v1.RollingUpdateDeployment)({
          MaxUnavailable: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 0,
            StrVal: (string) ""
          }),
          MaxSurge: (*intstr.IntOrString)({
            Type: (intstr.Type) 0,
            IntVal: (int32) 1,
            StrVal: (string) ""
          })
        })
      },
      MinReadySeconds: (int32) 10,
      RevisionHistoryLimit: (*int32)(10),
      Paused: (bool) false,
      ProgressDeadlineSeconds: (*int32)(600)
    },
    Status: (v1.DeploymentStatus) {
      ObservedGeneration: (int64) 2,
      Replicas: (int32) 1,
      UpdatedReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      UnavailableReplicas: (int32) 0,
      Conditions: ([]v1.DeploymentCondition) (len=2) {
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=9) "Available",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=24) "MinimumReplicasAvailable",
          Message: (string) (len=36) "Deployment has minimum availability."
        },
        (v1.DeploymentCondition) {
          Type: (v1.DeploymentConditionType) (len=11) "Progressing",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastUpdateTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072419,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072406,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) (len=22) "NewReplicaSetAvailable",
          Message: (string) (len=77) "ReplicaSet \"test-rollover-deployment-5d484bf7f9\" has successfully progressed."
        }
      },
      CollisionCount: (*int32)(<nil>)
    }
  }


  Feb 21 00:33:40.061: INFO: New ReplicaSet "test-rollover-deployment-5d484bf7f9" of Deployment "test-rollover-deployment":
  (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2674",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "62c9ee81-5886-486c-a6c2-310e6f621f7f",
      ResourceVersion: (string) (len=5) "31949",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072408,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2",
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6201b726-1e53-42eb-b60f-beac8b3aaf26",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=806) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 36 32 30 31 62 37  32 36 2d 31 65 35 33 2d  |\"6201b726-1e53-|
              00000120  34 32 65 62 2d 62 36 30  66 2d 62 65 61 63 38 62  |42eb-b60f-beac8b|
              00000130  33 61 61 66 32 36 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |3aaf26\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  61 67 6e 68 6f 73 74 5c  22 7d 22 3a 7b 22 2e 22  |agnhost\"}":{"."|
              00000210  3a 7b 7d 2c 22 66 3a 69  6d 61 67 65 22 3a 7b 7d  |:{},"f:image":{}|
              00000220  2c 22 66 3a 69 6d 61 67  65 50 75 6c 6c 50 6f 6c  |,"f:imagePullPol|
              00000230  69 63 79 22 3a 7b 7d 2c  22 66 3a 6e 61 6d 65 22  |icy":{},"f:name"|
              00000240  3a 7b 7d 2c 22 66 3a 72  65 73 6f 75 72 63 65 73  |:{},"f:resources|
              00000250  22 3a 7b 7d 2c 22 66 3a  73 65 63 75 72 69 74 79  |":{},"f:security|
              00000260  43 6f 6e 74 65 78 74 22  3a 7b 7d 2c 22 66 3a 74  |Context":{},"f:t|
              00000270  65 72 6d 69 6e 61 74 69  6f 6e 4d 65 73 73 61 67  |erminationMessag|
              00000280  65 50 61 74 68 22 3a 7b  7d 2c 22 66 3a 74 65 72  |ePath":{},"f:ter|
              00000290  6d 69 6e 61 74 69 6f 6e  4d 65 73 73 61 67 65 50  |minationMessageP|
              000002a0  6f 6c 69 63 79 22 3a 7b  7d 7d 7d 2c 22 66 3a 64  |olicy":{}}},"f:d|
              000002b0  6e 73 50 6f 6c 69 63 79  22 3a 7b 7d 2c 22 66 3a  |nsPolicy":{},"f:|
              000002c0  72 65 73 74 61 72 74 50  6f 6c 69 63 79 22 3a 7b  |restartPolicy":{|
              000002d0  7d 2c 22 66 3a 73 63 68  65 64 75 6c 65 72 4e 61  |},"f:schedulerNa|
              000002e0  6d 65 22 3a 7b 7d 2c 22  66 3a 73 65 63 75 72 69  |me":{},"f:securi|
              000002f0  74 79 43 6f 6e 74 65 78  74 22 3a 7b 7d 2c 22 66  |tyContext":{},"f|
              00000300  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 47 72 61 63  |:terminationGrac|
              00000310  65 50 65 72 69 6f 64 53  65 63 6f 6e 64 73 22 3a  |ePeriodSeconds":|
              00000320  7b 7d 7d 7d 7d 7d                                 |{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072419,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=130) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  61 76 61 69 6c 61 62 6c  65 52 65 70 6c 69 63 61  |availableReplica|
              00000020  73 22 3a 7b 7d 2c 22 66  3a 66 75 6c 6c 79 4c 61  |s":{},"f:fullyLa|
              00000030  62 65 6c 65 64 52 65 70  6c 69 63 61 73 22 3a 7b  |beledReplicas":{|
              00000040  7d 2c 22 66 3a 6f 62 73  65 72 76 65 64 47 65 6e  |},"f:observedGen|
              00000050  65 72 61 74 69 6f 6e 22  3a 7b 7d 2c 22 66 3a 72  |eration":{},"f:r|
              00000060  65 61 64 79 52 65 70 6c  69 63 61 73 22 3a 7b 7d  |eadyReplicas":{}|
              00000070  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000080  7d 7d                                             |}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(1),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9",
            (string) (len=4) "name": (string) (len=12) "rollover-pod"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=7) "agnhost",
              Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 1,
      FullyLabeledReplicas: (int32) 1,
      ReadyReplicas: (int32) 1,
      AvailableReplicas: (int32) 1,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:33:40.061: INFO: All old ReplicaSets of Deployment "test-rollover-deployment":
  Feb 21 00:33:40.061: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=24) "test-rollover-controller",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2674",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "87bde9aa-7e81-4fd6-b09d-4731372ed5d7",
      ResourceVersion: (string) (len=5) "31957",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072398,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=3) "pod": (string) (len=5) "httpd"
      },
      Annotations: (map[string]string) (len=2) {
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6201b726-1e53-42eb-b60f-beac8b3aaf26",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "e2e.test",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072398,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=467) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              00000020  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              00000030  3a 70 6f 64 22 3a 7b 7d  7d 7d 2c 22 66 3a 73 70  |:pod":{}}},"f:sp|
              00000040  65 63 22 3a 7b 22 66 3a  73 65 6c 65 63 74 6f 72  |ec":{"f:selector|
              00000050  22 3a 7b 7d 2c 22 66 3a  74 65 6d 70 6c 61 74 65  |":{},"f:template|
              00000060  22 3a 7b 22 66 3a 6d 65  74 61 64 61 74 61 22 3a  |":{"f:metadata":|
              00000070  7b 22 66 3a 6c 61 62 65  6c 73 22 3a 7b 22 2e 22  |{"f:labels":{"."|
              00000080  3a 7b 7d 2c 22 66 3a 6e  61 6d 65 22 3a 7b 7d 2c  |:{},"f:name":{},|
              00000090  22 66 3a 70 6f 64 22 3a  7b 7d 7d 7d 2c 22 66 3a  |"f:pod":{}}},"f:|
              000000a0  73 70 65 63 22 3a 7b 22  66 3a 63 6f 6e 74 61 69  |spec":{"f:contai|
              000000b0  6e 65 72 73 22 3a 7b 22  6b 3a 7b 5c 22 6e 61 6d  |ners":{"k:{\"nam|
              000000c0  65 5c 22 3a 5c 22 68 74  74 70 64 5c 22 7d 22 3a  |e\":\"httpd\"}":|
              000000d0  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              000000e0  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              000000f0  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000100  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000110  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |rces":{},"f:term|
              00000120  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000130  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000140  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000150  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000160  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 72 65 73  |olicy":{},"f:res|
              00000170  74 61 72 74 50 6f 6c 69  63 79 22 3a 7b 7d 2c 22  |tartPolicy":{},"|
              00000180  66 3a 73 63 68 65 64 75  6c 65 72 4e 61 6d 65 22  |f:schedulerName"|
              00000190  3a 7b 7d 2c 22 66 3a 73  65 63 75 72 69 74 79 43  |:{},"f:securityC|
              000001a0  6f 6e 74 65 78 74 22 3a  7b 7d 2c 22 66 3a 74 65  |ontext":{},"f:te|
              000001b0  72 6d 69 6e 61 74 69 6f  6e 47 72 61 63 65 50 65  |rminationGracePe|
              000001c0  72 69 6f 64 53 65 63 6f  6e 64 73 22 3a 7b 7d 7d  |riodSeconds":{}}|
              000001d0  7d 7d 7d                                          |}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072419,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=249) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 7d 2c 22 66  3a 6f 77 6e 65 72 52 65  |":{}},"f:ownerRe|
              00000090  66 65 72 65 6e 63 65 73  22 3a 7b 22 2e 22 3a 7b  |ferences":{".":{|
              000000a0  7d 2c 22 6b 3a 7b 5c 22  75 69 64 5c 22 3a 5c 22  |},"k:{\"uid\":\"|
              000000b0  36 32 30 31 62 37 32 36  2d 31 65 35 33 2d 34 32  |6201b726-1e53-42|
              000000c0  65 62 2d 62 36 30 66 2d  62 65 61 63 38 62 33 61  |eb-b60f-beac8b3a|
              000000d0  61 66 32 36 5c 22 7d 22  3a 7b 7d 7d 7d 2c 22 66  |af26\"}":{}}},"f|
              000000e0  3a 73 70 65 63 22 3a 7b  22 66 3a 72 65 70 6c 69  |:spec":{"f:repli|
              000000f0  63 61 73 22 3a 7b 7d 7d  7d                       |cas":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072419,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 0,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=3) "pod": (string) (len=5) "httpd"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=3) "pod": (string) (len=5) "httpd"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=5) "httpd",
              Image: (string) (len=46) "registry.k8s.io/e2e-test-images/httpd:2.4.38-4",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)(<nil>),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:33:40.062: INFO: (v1.ReplicaSet) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=35) "test-rollover-deployment-664fc6c874",
      GenerateName: (string) "",
      Namespace: (string) (len=15) "deployment-2674",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "2ed37792-9174-47d7-ab76-a7a4a67eddf7",
      ResourceVersion: (string) (len=5) "31912",
      Generation: (int64) 2,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072406,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "deployment.kubernetes.io/revision": (string) (len=1) "1",
        (string) (len=41) "deployment.kubernetes.io/desired-replicas": (string) (len=1) "1",
        (string) (len=37) "deployment.kubernetes.io/max-replicas": (string) (len=1) "2"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "Deployment",
          Name: (string) (len=24) "test-rollover-deployment",
          UID: (types.UID) (len=36) "6201b726-1e53-42eb-b60f-beac8b3aaf26",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=2) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=810) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 64 65 70 6c 6f 79  |".":{},"f:deploy|
              00000030  6d 65 6e 74 2e 6b 75 62  65 72 6e 65 74 65 73 2e  |ment.kubernetes.|
              00000040  69 6f 2f 64 65 73 69 72  65 64 2d 72 65 70 6c 69  |io/desired-repli|
              00000050  63 61 73 22 3a 7b 7d 2c  22 66 3a 64 65 70 6c 6f  |cas":{},"f:deplo|
              00000060  79 6d 65 6e 74 2e 6b 75  62 65 72 6e 65 74 65 73  |yment.kubernetes|
              00000070  2e 69 6f 2f 6d 61 78 2d  72 65 70 6c 69 63 61 73  |.io/max-replicas|
              00000080  22 3a 7b 7d 2c 22 66 3a  64 65 70 6c 6f 79 6d 65  |":{},"f:deployme|
              00000090  6e 74 2e 6b 75 62 65 72  6e 65 74 65 73 2e 69 6f  |nt.kubernetes.io|
              000000a0  2f 72 65 76 69 73 69 6f  6e 22 3a 7b 7d 7d 2c 22  |/revision":{}},"|
              000000b0  66 3a 6c 61 62 65 6c 73  22 3a 7b 22 2e 22 3a 7b  |f:labels":{".":{|
              000000c0  7d 2c 22 66 3a 6e 61 6d  65 22 3a 7b 7d 2c 22 66  |},"f:name":{},"f|
              000000d0  3a 70 6f 64 2d 74 65 6d  70 6c 61 74 65 2d 68 61  |:pod-template-ha|
              000000e0  73 68 22 3a 7b 7d 7d 2c  22 66 3a 6f 77 6e 65 72  |sh":{}},"f:owner|
              000000f0  52 65 66 65 72 65 6e 63  65 73 22 3a 7b 22 2e 22  |References":{"."|
              00000100  3a 7b 7d 2c 22 6b 3a 7b  5c 22 75 69 64 5c 22 3a  |:{},"k:{\"uid\":|
              00000110  5c 22 36 32 30 31 62 37  32 36 2d 31 65 35 33 2d  |\"6201b726-1e53-|
              00000120  34 32 65 62 2d 62 36 30  66 2d 62 65 61 63 38 62  |42eb-b60f-beac8b|
              00000130  33 61 61 66 32 36 5c 22  7d 22 3a 7b 7d 7d 7d 2c  |3aaf26\"}":{}}},|
              00000140  22 66 3a 73 70 65 63 22  3a 7b 22 66 3a 6d 69 6e  |"f:spec":{"f:min|
              00000150  52 65 61 64 79 53 65 63  6f 6e 64 73 22 3a 7b 7d  |ReadySeconds":{}|
              00000160  2c 22 66 3a 72 65 70 6c  69 63 61 73 22 3a 7b 7d  |,"f:replicas":{}|
              00000170  2c 22 66 3a 73 65 6c 65  63 74 6f 72 22 3a 7b 7d  |,"f:selector":{}|
              00000180  2c 22 66 3a 74 65 6d 70  6c 61 74 65 22 3a 7b 22  |,"f:template":{"|
              00000190  66 3a 6d 65 74 61 64 61  74 61 22 3a 7b 22 66 3a  |f:metadata":{"f:|
              000001a0  6c 61 62 65 6c 73 22 3a  7b 22 2e 22 3a 7b 7d 2c  |labels":{".":{},|
              000001b0  22 66 3a 6e 61 6d 65 22  3a 7b 7d 2c 22 66 3a 70  |"f:name":{},"f:p|
              000001c0  6f 64 2d 74 65 6d 70 6c  61 74 65 2d 68 61 73 68  |od-template-hash|
              000001d0  22 3a 7b 7d 7d 7d 2c 22  66 3a 73 70 65 63 22 3a  |":{}}},"f:spec":|
              000001e0  7b 22 66 3a 63 6f 6e 74  61 69 6e 65 72 73 22 3a  |{"f:containers":|
              000001f0  7b 22 6b 3a 7b 5c 22 6e  61 6d 65 5c 22 3a 5c 22  |{"k:{\"name\":\"|
              00000200  72 65 64 69 73 2d 73 6c  61 76 65 5c 22 7d 22 3a  |redis-slave\"}":|
              00000210  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 69 6d 61 67 65  |{".":{},"f:image|
              00000220  22 3a 7b 7d 2c 22 66 3a  69 6d 61 67 65 50 75 6c  |":{},"f:imagePul|
              00000230  6c 50 6f 6c 69 63 79 22  3a 7b 7d 2c 22 66 3a 6e  |lPolicy":{},"f:n|
              00000240  61 6d 65 22 3a 7b 7d 2c  22 66 3a 72 65 73 6f 75  |ame":{},"f:resou|
              00000250  72 63 65 73 22 3a 7b 7d  2c 22 66 3a 73 65 63 75  |rces":{},"f:secu|
              00000260  72 69 74 79 43 6f 6e 74  65 78 74 22 3a 7b 7d 2c  |rityContext":{},|
              00000270  22 66 3a 74 65 72 6d 69  6e 61 74 69 6f 6e 4d 65  |"f:terminationMe|
              00000280  73 73 61 67 65 50 61 74  68 22 3a 7b 7d 2c 22 66  |ssagePath":{},"f|
              00000290  3a 74 65 72 6d 69 6e 61  74 69 6f 6e 4d 65 73 73  |:terminationMess|
              000002a0  61 67 65 50 6f 6c 69 63  79 22 3a 7b 7d 7d 7d 2c  |agePolicy":{}}},|
              000002b0  22 66 3a 64 6e 73 50 6f  6c 69 63 79 22 3a 7b 7d  |"f:dnsPolicy":{}|
              000002c0  2c 22 66 3a 72 65 73 74  61 72 74 50 6f 6c 69 63  |,"f:restartPolic|
              000002d0  79 22 3a 7b 7d 2c 22 66  3a 73 63 68 65 64 75 6c  |y":{},"f:schedul|
              000002e0  65 72 4e 61 6d 65 22 3a  7b 7d 2c 22 66 3a 73 65  |erName":{},"f:se|
              000002f0  63 75 72 69 74 79 43 6f  6e 74 65 78 74 22 3a 7b  |curityContext":{|
              00000300  7d 2c 22 66 3a 74 65 72  6d 69 6e 61 74 69 6f 6e  |},"f:termination|
              00000310  47 72 61 63 65 50 65 72  69 6f 64 53 65 63 6f 6e  |GracePeriodSecon|
              00000320  64 73 22 3a 7b 7d 7d 7d  7d 7d                    |ds":{}}}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=7) "apps/v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=56) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  6f 62 73 65 72 76 65 64  47 65 6e 65 72 61 74 69  |observedGenerati|
              00000020  6f 6e 22 3a 7b 7d 2c 22  66 3a 72 65 70 6c 69 63  |on":{},"f:replic|
              00000030  61 73 22 3a 7b 7d 7d 7d                           |as":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.ReplicaSetSpec) {
      Replicas: (*int32)(0),
      MinReadySeconds: (int32) 10,
      Selector: (*v1.LabelSelector)({
        MatchLabels: (map[string]string) (len=2) {
          (string) (len=4) "name": (string) (len=12) "rollover-pod",
          (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
        },
        MatchExpressions: ([]v1.LabelSelectorRequirement) <nil>
      }),
      Template: (v1.PodTemplateSpec) {
        ObjectMeta: (v1.ObjectMeta) {
          Name: (string) "",
          GenerateName: (string) "",
          Namespace: (string) "",
          SelfLink: (string) "",
          UID: (types.UID) "",
          ResourceVersion: (string) "",
          Generation: (int64) 0,
          CreationTimestamp: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          DeletionTimestamp: (*v1.Time)(<nil>),
          DeletionGracePeriodSeconds: (*int64)(<nil>),
          Labels: (map[string]string) (len=2) {
            (string) (len=4) "name": (string) (len=12) "rollover-pod",
            (string) (len=17) "pod-template-hash": (string) (len=10) "664fc6c874"
          },
          Annotations: (map[string]string) <nil>,
          OwnerReferences: ([]v1.OwnerReference) <nil>,
          Finalizers: ([]string) <nil>,
          ManagedFields: ([]v1.ManagedFieldsEntry) <nil>
        },
        Spec: (v1.PodSpec) {
          Volumes: ([]v1.Volume) <nil>,
          InitContainers: ([]v1.Container) <nil>,
          Containers: ([]v1.Container) (len=1) {
            (v1.Container) {
              Name: (string) (len=11) "redis-slave",
              Image: (string) (len=47) "gcr.io/google_samples/gb-redisslave:nonexistent",
              Command: ([]string) <nil>,
              Args: ([]string) <nil>,
              WorkingDir: (string) "",
              Ports: ([]v1.ContainerPort) <nil>,
              EnvFrom: ([]v1.EnvFromSource) <nil>,
              Env: ([]v1.EnvVar) <nil>,
              Resources: (v1.ResourceRequirements) {
                Limits: (v1.ResourceList) <nil>,
                Requests: (v1.ResourceList) <nil>,
                Claims: ([]v1.ResourceClaim) <nil>
              },
              ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
              RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
              VolumeMounts: ([]v1.VolumeMount) <nil>,
              VolumeDevices: ([]v1.VolumeDevice) <nil>,
              LivenessProbe: (*v1.Probe)(<nil>),
              ReadinessProbe: (*v1.Probe)(<nil>),
              StartupProbe: (*v1.Probe)(<nil>),
              Lifecycle: (*v1.Lifecycle)(<nil>),
              TerminationMessagePath: (string) (len=20) "/dev/termination-log",
              TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
              ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
              SecurityContext: (*v1.SecurityContext)({
                Capabilities: (*v1.Capabilities)(<nil>),
                Privileged: (*bool)(<nil>),
                SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
                WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
                RunAsUser: (*int64)(<nil>),
                RunAsGroup: (*int64)(<nil>),
                RunAsNonRoot: (*bool)(<nil>),
                ReadOnlyRootFilesystem: (*bool)(<nil>),
                AllowPrivilegeEscalation: (*bool)(<nil>),
                ProcMount: (*v1.ProcMountType)(<nil>),
                SeccompProfile: (*v1.SeccompProfile)(<nil>)
              }),
              Stdin: (bool) false,
              StdinOnce: (bool) false,
              TTY: (bool) false
            }
          },
          EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
          RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
          TerminationGracePeriodSeconds: (*int64)(0),
          ActiveDeadlineSeconds: (*int64)(<nil>),
          DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
          NodeSelector: (map[string]string) <nil>,
          ServiceAccountName: (string) "",
          DeprecatedServiceAccount: (string) "",
          AutomountServiceAccountToken: (*bool)(<nil>),
          NodeName: (string) "",
          HostNetwork: (bool) false,
          HostPID: (bool) false,
          HostIPC: (bool) false,
          ShareProcessNamespace: (*bool)(<nil>),
          SecurityContext: (*v1.PodSecurityContext)({
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            SupplementalGroups: ([]int64) <nil>,
            FSGroup: (*int64)(<nil>),
            Sysctls: ([]v1.Sysctl) <nil>,
            FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
          Hostname: (string) "",
          Subdomain: (string) "",
          Affinity: (*v1.Affinity)(<nil>),
          SchedulerName: (string) (len=17) "default-scheduler",
          Tolerations: ([]v1.Toleration) <nil>,
          HostAliases: ([]v1.HostAlias) <nil>,
          PriorityClassName: (string) "",
          Priority: (*int32)(<nil>),
          DNSConfig: (*v1.PodDNSConfig)(<nil>),
          ReadinessGates: ([]v1.PodReadinessGate) <nil>,
          RuntimeClassName: (*string)(<nil>),
          EnableServiceLinks: (*bool)(<nil>),
          PreemptionPolicy: (*v1.PreemptionPolicy)(<nil>),
          Overhead: (v1.ResourceList) <nil>,
          TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
          SetHostnameAsFQDN: (*bool)(<nil>),
          OS: (*v1.PodOS)(<nil>),
          HostUsers: (*bool)(<nil>),
          SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
          ResourceClaims: ([]v1.PodResourceClaim) <nil>
        }
      }
    },
    Status: (v1.ReplicaSetStatus) {
      Replicas: (int32) 0,
      FullyLabeledReplicas: (int32) 0,
      ReadyReplicas: (int32) 0,
      AvailableReplicas: (int32) 0,
      ObservedGeneration: (int64) 2,
      Conditions: ([]v1.ReplicaSetCondition) <nil>
    }
  }

  Feb 21 00:33:40.067: INFO: Pod "test-rollover-deployment-5d484bf7f9-qqm4b" is available:
  (v1.Pod) {
    TypeMeta: (v1.TypeMeta) {
      Kind: (string) "",
      APIVersion: (string) ""
    },
    ObjectMeta: (v1.ObjectMeta) {
      Name: (string) (len=41) "test-rollover-deployment-5d484bf7f9-qqm4b",
      GenerateName: (string) (len=36) "test-rollover-deployment-5d484bf7f9-",
      Namespace: (string) (len=15) "deployment-2674",
      SelfLink: (string) "",
      UID: (types.UID) (len=36) "45daf383-90ce-4c83-8bba-c461ca7fadbb",
      ResourceVersion: (string) (len=5) "31927",
      Generation: (int64) 0,
      CreationTimestamp: (v1.Time) {
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072408,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      },
      DeletionTimestamp: (*v1.Time)(<nil>),
      DeletionGracePeriodSeconds: (*int64)(<nil>),
      Labels: (map[string]string) (len=2) {
        (string) (len=4) "name": (string) (len=12) "rollover-pod",
        (string) (len=17) "pod-template-hash": (string) (len=10) "5d484bf7f9"
      },
      Annotations: (map[string]string) (len=3) {
        (string) (len=33) "cni.projectcalico.org/containerID": (string) (len=64) "c296a07a71a362eb5339f9599f34de62b7cf055c5d3a639190429c9879482732",
        (string) (len=27) "cni.projectcalico.org/podIP": (string) (len=15) "10.1.235.136/32",
        (string) (len=28) "cni.projectcalico.org/podIPs": (string) (len=15) "10.1.235.136/32"
      },
      OwnerReferences: ([]v1.OwnerReference) (len=1) {
        (v1.OwnerReference) {
          APIVersion: (string) (len=7) "apps/v1",
          Kind: (string) (len=10) "ReplicaSet",
          Name: (string) (len=35) "test-rollover-deployment-5d484bf7f9",
          UID: (types.UID) (len=36) "62c9ee81-5886-486c-a6c2-310e6f621f7f",
          Controller: (*bool)(true),
          BlockOwnerDeletion: (*bool)(true)
        }
      },
      Finalizers: ([]string) <nil>,
      ManagedFields: ([]v1.ManagedFieldsEntry) (len=3) {
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=6) "calico",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=153) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 61 6e 6e 6f 74 61  74 69 6f 6e 73 22 3a 7b  |f:annotations":{|
              00000020  22 2e 22 3a 7b 7d 2c 22  66 3a 63 6e 69 2e 70 72  |".":{},"f:cni.pr|
              00000030  6f 6a 65 63 74 63 61 6c  69 63 6f 2e 6f 72 67 2f  |ojectcalico.org/|
              00000040  63 6f 6e 74 61 69 6e 65  72 49 44 22 3a 7b 7d 2c  |containerID":{},|
              00000050  22 66 3a 63 6e 69 2e 70  72 6f 6a 65 63 74 63 61  |"f:cni.projectca|
              00000060  6c 69 63 6f 2e 6f 72 67  2f 70 6f 64 49 50 22 3a  |lico.org/podIP":|
              00000070  7b 7d 2c 22 66 3a 63 6e  69 2e 70 72 6f 6a 65 63  |{},"f:cni.projec|
              00000080  74 63 61 6c 69 63 6f 2e  6f 72 67 2f 70 6f 64 49  |tcalico.org/podI|
              00000090  50 73 22 3a 7b 7d 7d 7d  7d                       |Ps":{}}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=539) {
              00000000  7b 22 66 3a 6d 65 74 61  64 61 74 61 22 3a 7b 22  |{"f:metadata":{"|
              00000010  66 3a 67 65 6e 65 72 61  74 65 4e 61 6d 65 22 3a  |f:generateName":|
              00000020  7b 7d 2c 22 66 3a 6c 61  62 65 6c 73 22 3a 7b 22  |{},"f:labels":{"|
              00000030  2e 22 3a 7b 7d 2c 22 66  3a 6e 61 6d 65 22 3a 7b  |.":{},"f:name":{|
              00000040  7d 2c 22 66 3a 70 6f 64  2d 74 65 6d 70 6c 61 74  |},"f:pod-templat|
              00000050  65 2d 68 61 73 68 22 3a  7b 7d 7d 2c 22 66 3a 6f  |e-hash":{}},"f:o|
              00000060  77 6e 65 72 52 65 66 65  72 65 6e 63 65 73 22 3a  |wnerReferences":|
              00000070  7b 22 2e 22 3a 7b 7d 2c  22 6b 3a 7b 5c 22 75 69  |{".":{},"k:{\"ui|
              00000080  64 5c 22 3a 5c 22 36 32  63 39 65 65 38 31 2d 35  |d\":\"62c9ee81-5|
              00000090  38 38 36 2d 34 38 36 63  2d 61 36 63 32 2d 33 31  |886-486c-a6c2-31|
              000000a0  30 65 36 66 36 32 31 66  37 66 5c 22 7d 22 3a 7b  |0e6f621f7f\"}":{|
              000000b0  7d 7d 7d 2c 22 66 3a 73  70 65 63 22 3a 7b 22 66  |}}},"f:spec":{"f|
              000000c0  3a 63 6f 6e 74 61 69 6e  65 72 73 22 3a 7b 22 6b  |:containers":{"k|
              000000d0  3a 7b 5c 22 6e 61 6d 65  5c 22 3a 5c 22 61 67 6e  |:{\"name\":\"agn|
              000000e0  68 6f 73 74 5c 22 7d 22  3a 7b 22 2e 22 3a 7b 7d  |host\"}":{".":{}|
              000000f0  2c 22 66 3a 69 6d 61 67  65 22 3a 7b 7d 2c 22 66  |,"f:image":{},"f|
              00000100  3a 69 6d 61 67 65 50 75  6c 6c 50 6f 6c 69 63 79  |:imagePullPolicy|
              00000110  22 3a 7b 7d 2c 22 66 3a  6e 61 6d 65 22 3a 7b 7d  |":{},"f:name":{}|
              00000120  2c 22 66 3a 72 65 73 6f  75 72 63 65 73 22 3a 7b  |,"f:resources":{|
              00000130  7d 2c 22 66 3a 73 65 63  75 72 69 74 79 43 6f 6e  |},"f:securityCon|
              00000140  74 65 78 74 22 3a 7b 7d  2c 22 66 3a 74 65 72 6d  |text":{},"f:term|
              00000150  69 6e 61 74 69 6f 6e 4d  65 73 73 61 67 65 50 61  |inationMessagePa|
              00000160  74 68 22 3a 7b 7d 2c 22  66 3a 74 65 72 6d 69 6e  |th":{},"f:termin|
              00000170  61 74 69 6f 6e 4d 65 73  73 61 67 65 50 6f 6c 69  |ationMessagePoli|
              00000180  63 79 22 3a 7b 7d 7d 7d  2c 22 66 3a 64 6e 73 50  |cy":{}}},"f:dnsP|
              00000190  6f 6c 69 63 79 22 3a 7b  7d 2c 22 66 3a 65 6e 61  |olicy":{},"f:ena|
              000001a0  62 6c 65 53 65 72 76 69  63 65 4c 69 6e 6b 73 22  |bleServiceLinks"|
              000001b0  3a 7b 7d 2c 22 66 3a 72  65 73 74 61 72 74 50 6f  |:{},"f:restartPo|
              000001c0  6c 69 63 79 22 3a 7b 7d  2c 22 66 3a 73 63 68 65  |licy":{},"f:sche|
              000001d0  64 75 6c 65 72 4e 61 6d  65 22 3a 7b 7d 2c 22 66  |dulerName":{},"f|
              000001e0  3a 73 65 63 75 72 69 74  79 43 6f 6e 74 65 78 74  |:securityContext|
              000001f0  22 3a 7b 7d 2c 22 66 3a  74 65 72 6d 69 6e 61 74  |":{},"f:terminat|
              00000200  69 6f 6e 47 72 61 63 65  50 65 72 69 6f 64 53 65  |ionGracePeriodSe|
              00000210  63 6f 6e 64 73 22 3a 7b  7d 7d 7d                 |conds":{}}}|
            }
          }),
          Subresource: (string) ""
        },
        (v1.ManagedFieldsEntry) {
          Manager: (string) (len=8) "kubelite",
          Operation: (v1.ManagedFieldsOperationType) (len=6) "Update",
          APIVersion: (string) (len=2) "v1",
          Time: (*v1.Time)({
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072409,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          }),
          FieldsType: (string) (len=8) "FieldsV1",
          FieldsV1: (*v1.FieldsV1)({
            Raw: ([]uint8) (len=519) {
              00000000  7b 22 66 3a 73 74 61 74  75 73 22 3a 7b 22 66 3a  |{"f:status":{"f:|
              00000010  63 6f 6e 64 69 74 69 6f  6e 73 22 3a 7b 22 6b 3a  |conditions":{"k:|
              00000020  7b 5c 22 74 79 70 65 5c  22 3a 5c 22 43 6f 6e 74  |{\"type\":\"Cont|
              00000030  61 69 6e 65 72 73 52 65  61 64 79 5c 22 7d 22 3a  |ainersReady\"}":|
              00000040  7b 22 2e 22 3a 7b 7d 2c  22 66 3a 6c 61 73 74 50  |{".":{},"f:lastP|
              00000050  72 6f 62 65 54 69 6d 65  22 3a 7b 7d 2c 22 66 3a  |robeTime":{},"f:|
              00000060  6c 61 73 74 54 72 61 6e  73 69 74 69 6f 6e 54 69  |lastTransitionTi|
              00000070  6d 65 22 3a 7b 7d 2c 22  66 3a 73 74 61 74 75 73  |me":{},"f:status|
              00000080  22 3a 7b 7d 2c 22 66 3a  74 79 70 65 22 3a 7b 7d  |":{},"f:type":{}|
              00000090  7d 2c 22 6b 3a 7b 5c 22  74 79 70 65 5c 22 3a 5c  |},"k:{\"type\":\|
              000000a0  22 49 6e 69 74 69 61 6c  69 7a 65 64 5c 22 7d 22  |"Initialized\"}"|
              000000b0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |:{".":{},"f:last|
              000000c0  50 72 6f 62 65 54 69 6d  65 22 3a 7b 7d 2c 22 66  |ProbeTime":{},"f|
              000000d0  3a 6c 61 73 74 54 72 61  6e 73 69 74 69 6f 6e 54  |:lastTransitionT|
              000000e0  69 6d 65 22 3a 7b 7d 2c  22 66 3a 73 74 61 74 75  |ime":{},"f:statu|
              000000f0  73 22 3a 7b 7d 2c 22 66  3a 74 79 70 65 22 3a 7b  |s":{},"f:type":{|
              00000100  7d 7d 2c 22 6b 3a 7b 5c  22 74 79 70 65 5c 22 3a  |}},"k:{\"type\":|
              00000110  5c 22 52 65 61 64 79 5c  22 7d 22 3a 7b 22 2e 22  |\"Ready\"}":{"."|
              00000120  3a 7b 7d 2c 22 66 3a 6c  61 73 74 50 72 6f 62 65  |:{},"f:lastProbe|
              00000130  54 69 6d 65 22 3a 7b 7d  2c 22 66 3a 6c 61 73 74  |Time":{},"f:last|
              00000140  54 72 61 6e 73 69 74 69  6f 6e 54 69 6d 65 22 3a  |TransitionTime":|
              00000150  7b 7d 2c 22 66 3a 73 74  61 74 75 73 22 3a 7b 7d  |{},"f:status":{}|
              00000160  2c 22 66 3a 74 79 70 65  22 3a 7b 7d 7d 7d 2c 22  |,"f:type":{}}},"|
              00000170  66 3a 63 6f 6e 74 61 69  6e 65 72 53 74 61 74 75  |f:containerStatu|
              00000180  73 65 73 22 3a 7b 7d 2c  22 66 3a 68 6f 73 74 49  |ses":{},"f:hostI|
              00000190  50 22 3a 7b 7d 2c 22 66  3a 70 68 61 73 65 22 3a  |P":{},"f:phase":|
              000001a0  7b 7d 2c 22 66 3a 70 6f  64 49 50 22 3a 7b 7d 2c  |{},"f:podIP":{},|
              000001b0  22 66 3a 70 6f 64 49 50  73 22 3a 7b 22 2e 22 3a  |"f:podIPs":{".":|
              000001c0  7b 7d 2c 22 6b 3a 7b 5c  22 69 70 5c 22 3a 5c 22  |{},"k:{\"ip\":\"|
              000001d0  31 30 2e 31 2e 32 33 35  2e 31 33 36 5c 22 7d 22  |10.1.235.136\"}"|
              000001e0  3a 7b 22 2e 22 3a 7b 7d  2c 22 66 3a 69 70 22 3a  |:{".":{},"f:ip":|
              000001f0  7b 7d 7d 7d 2c 22 66 3a  73 74 61 72 74 54 69 6d  |{}}},"f:startTim|
              00000200  65 22 3a 7b 7d 7d 7d                              |e":{}}}|
            }
          }),
          Subresource: (string) (len=6) "status"
        }
      }
    },
    Spec: (v1.PodSpec) {
      Volumes: ([]v1.Volume) (len=1) {
        (v1.Volume) {
          Name: (string) (len=21) "kube-api-access-cplkg",
          VolumeSource: (v1.VolumeSource) {
            HostPath: (*v1.HostPathVolumeSource)(<nil>),
            EmptyDir: (*v1.EmptyDirVolumeSource)(<nil>),
            GCEPersistentDisk: (*v1.GCEPersistentDiskVolumeSource)(<nil>),
            AWSElasticBlockStore: (*v1.AWSElasticBlockStoreVolumeSource)(<nil>),
            GitRepo: (*v1.GitRepoVolumeSource)(<nil>),
            Secret: (*v1.SecretVolumeSource)(<nil>),
            NFS: (*v1.NFSVolumeSource)(<nil>),
            ISCSI: (*v1.ISCSIVolumeSource)(<nil>),
            Glusterfs: (*v1.GlusterfsVolumeSource)(<nil>),
            PersistentVolumeClaim: (*v1.PersistentVolumeClaimVolumeSource)(<nil>),
            RBD: (*v1.RBDVolumeSource)(<nil>),
            FlexVolume: (*v1.FlexVolumeSource)(<nil>),
            Cinder: (*v1.CinderVolumeSource)(<nil>),
            CephFS: (*v1.CephFSVolumeSource)(<nil>),
            Flocker: (*v1.FlockerVolumeSource)(<nil>),
            DownwardAPI: (*v1.DownwardAPIVolumeSource)(<nil>),
            FC: (*v1.FCVolumeSource)(<nil>),
            AzureFile: (*v1.AzureFileVolumeSource)(<nil>),
            ConfigMap: (*v1.ConfigMapVolumeSource)(<nil>),
            VsphereVolume: (*v1.VsphereVirtualDiskVolumeSource)(<nil>),
            Quobyte: (*v1.QuobyteVolumeSource)(<nil>),
            AzureDisk: (*v1.AzureDiskVolumeSource)(<nil>),
            PhotonPersistentDisk: (*v1.PhotonPersistentDiskVolumeSource)(<nil>),
            Projected: (*v1.ProjectedVolumeSource)({
              Sources: ([]v1.VolumeProjection) (len=3) {
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)({
                    Audience: (string) "",
                    ExpirationSeconds: (*int64)(3607),
                    Path: (string) (len=5) "token"
                  })
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)(<nil>),
                  ConfigMap: (*v1.ConfigMapProjection)({
                    LocalObjectReference: (v1.LocalObjectReference) {
                      Name: (string) (len=16) "kube-root-ca.crt"
                    },
                    Items: ([]v1.KeyToPath) (len=1) {
                      (v1.KeyToPath) {
                        Key: (string) (len=6) "ca.crt",
                        Path: (string) (len=6) "ca.crt",
                        Mode: (*int32)(<nil>)
                      }
                    },
                    Optional: (*bool)(<nil>)
                  }),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                },
                (v1.VolumeProjection) {
                  Secret: (*v1.SecretProjection)(<nil>),
                  DownwardAPI: (*v1.DownwardAPIProjection)({
                    Items: ([]v1.DownwardAPIVolumeFile) (len=1) {
                      (v1.DownwardAPIVolumeFile) {
                        Path: (string) (len=9) "namespace",
                        FieldRef: (*v1.ObjectFieldSelector)({
                          APIVersion: (string) (len=2) "v1",
                          FieldPath: (string) (len=18) "metadata.namespace"
                        }),
                        ResourceFieldRef: (*v1.ResourceFieldSelector)(<nil>),
                        Mode: (*int32)(<nil>)
                      }
                    }
                  }),
                  ConfigMap: (*v1.ConfigMapProjection)(<nil>),
                  ServiceAccountToken: (*v1.ServiceAccountTokenProjection)(<nil>)
                }
              },
              DefaultMode: (*int32)(420)
            }),
            PortworxVolume: (*v1.PortworxVolumeSource)(<nil>),
            ScaleIO: (*v1.ScaleIOVolumeSource)(<nil>),
            StorageOS: (*v1.StorageOSVolumeSource)(<nil>),
            CSI: (*v1.CSIVolumeSource)(<nil>),
            Ephemeral: (*v1.EphemeralVolumeSource)(<nil>)
          }
        }
      },
      InitContainers: ([]v1.Container) <nil>,
      Containers: ([]v1.Container) (len=1) {
        (v1.Container) {
          Name: (string) (len=7) "agnhost",
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          Command: ([]string) <nil>,
          Args: ([]string) <nil>,
          WorkingDir: (string) "",
          Ports: ([]v1.ContainerPort) <nil>,
          EnvFrom: ([]v1.EnvFromSource) <nil>,
          Env: ([]v1.EnvVar) <nil>,
          Resources: (v1.ResourceRequirements) {
            Limits: (v1.ResourceList) <nil>,
            Requests: (v1.ResourceList) <nil>,
            Claims: ([]v1.ResourceClaim) <nil>
          },
          ResizePolicy: ([]v1.ContainerResizePolicy) <nil>,
          RestartPolicy: (*v1.ContainerRestartPolicy)(<nil>),
          VolumeMounts: ([]v1.VolumeMount) (len=1) {
            (v1.VolumeMount) {
              Name: (string) (len=21) "kube-api-access-cplkg",
              ReadOnly: (bool) true,
              MountPath: (string) (len=45) "/var/run/secrets/kubernetes.io/serviceaccount",
              SubPath: (string) "",
              MountPropagation: (*v1.MountPropagationMode)(<nil>),
              SubPathExpr: (string) ""
            }
          },
          VolumeDevices: ([]v1.VolumeDevice) <nil>,
          LivenessProbe: (*v1.Probe)(<nil>),
          ReadinessProbe: (*v1.Probe)(<nil>),
          StartupProbe: (*v1.Probe)(<nil>),
          Lifecycle: (*v1.Lifecycle)(<nil>),
          TerminationMessagePath: (string) (len=20) "/dev/termination-log",
          TerminationMessagePolicy: (v1.TerminationMessagePolicy) (len=4) "File",
          ImagePullPolicy: (v1.PullPolicy) (len=12) "IfNotPresent",
          SecurityContext: (*v1.SecurityContext)({
            Capabilities: (*v1.Capabilities)(<nil>),
            Privileged: (*bool)(<nil>),
            SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
            WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
            RunAsUser: (*int64)(<nil>),
            RunAsGroup: (*int64)(<nil>),
            RunAsNonRoot: (*bool)(<nil>),
            ReadOnlyRootFilesystem: (*bool)(<nil>),
            AllowPrivilegeEscalation: (*bool)(<nil>),
            ProcMount: (*v1.ProcMountType)(<nil>),
            SeccompProfile: (*v1.SeccompProfile)(<nil>)
          }),
          Stdin: (bool) false,
          StdinOnce: (bool) false,
          TTY: (bool) false
        }
      },
      EphemeralContainers: ([]v1.EphemeralContainer) <nil>,
      RestartPolicy: (v1.RestartPolicy) (len=6) "Always",
      TerminationGracePeriodSeconds: (*int64)(0),
      ActiveDeadlineSeconds: (*int64)(<nil>),
      DNSPolicy: (v1.DNSPolicy) (len=12) "ClusterFirst",
      NodeSelector: (map[string]string) <nil>,
      ServiceAccountName: (string) (len=7) "default",
      DeprecatedServiceAccount: (string) (len=7) "default",
      AutomountServiceAccountToken: (*bool)(<nil>),
      NodeName: (string) (len=13) "control-plane",
      HostNetwork: (bool) false,
      HostPID: (bool) false,
      HostIPC: (bool) false,
      ShareProcessNamespace: (*bool)(<nil>),
      SecurityContext: (*v1.PodSecurityContext)({
        SELinuxOptions: (*v1.SELinuxOptions)(<nil>),
        WindowsOptions: (*v1.WindowsSecurityContextOptions)(<nil>),
        RunAsUser: (*int64)(<nil>),
        RunAsGroup: (*int64)(<nil>),
        RunAsNonRoot: (*bool)(<nil>),
        SupplementalGroups: ([]int64) <nil>,
        FSGroup: (*int64)(<nil>),
        Sysctls: ([]v1.Sysctl) <nil>,
        FSGroupChangePolicy: (*v1.PodFSGroupChangePolicy)(<nil>),
        SeccompProfile: (*v1.SeccompProfile)(<nil>)
      }),
      ImagePullSecrets: ([]v1.LocalObjectReference) <nil>,
      Hostname: (string) "",
      Subdomain: (string) "",
      Affinity: (*v1.Affinity)(<nil>),
      SchedulerName: (string) (len=17) "default-scheduler",
      Tolerations: ([]v1.Toleration) (len=2) {
        (v1.Toleration) {
          Key: (string) (len=28) "node.kubernetes.io/not-ready",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        },
        (v1.Toleration) {
          Key: (string) (len=30) "node.kubernetes.io/unreachable",
          Operator: (v1.TolerationOperator) (len=6) "Exists",
          Value: (string) "",
          Effect: (v1.TaintEffect) (len=9) "NoExecute",
          TolerationSeconds: (*int64)(300)
        }
      },
      HostAliases: ([]v1.HostAlias) <nil>,
      PriorityClassName: (string) "",
      Priority: (*int32)(0),
      DNSConfig: (*v1.PodDNSConfig)(<nil>),
      ReadinessGates: ([]v1.PodReadinessGate) <nil>,
      RuntimeClassName: (*string)(<nil>),
      EnableServiceLinks: (*bool)(true),
      PreemptionPolicy: (*v1.PreemptionPolicy)((len=20) "PreemptLowerPriority"),
      Overhead: (v1.ResourceList) <nil>,
      TopologySpreadConstraints: ([]v1.TopologySpreadConstraint) <nil>,
      SetHostnameAsFQDN: (*bool)(<nil>),
      OS: (*v1.PodOS)(<nil>),
      HostUsers: (*bool)(<nil>),
      SchedulingGates: ([]v1.PodSchedulingGate) <nil>,
      ResourceClaims: ([]v1.PodResourceClaim) <nil>
    },
    Status: (v1.PodStatus) {
      Phase: (v1.PodPhase) (len=7) "Running",
      Conditions: ([]v1.PodCondition) (len=4) {
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=11) "Initialized",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=5) "Ready",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072409,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=15) "ContainersReady",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072409,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        },
        (v1.PodCondition) {
          Type: (v1.PodConditionType) (len=12) "PodScheduled",
          Status: (v1.ConditionStatus) (len=4) "True",
          LastProbeTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 0,
              loc: (*time.Location)(<nil>)
            }
          },
          LastTransitionTime: (v1.Time) {
            Time: (time.Time) {
              wall: (uint64) 0,
              ext: (int64) 63844072408,
              loc: (*time.Location)({
                name: (string) (len=3) "UTC",
                zone: ([]time.zone) <nil>,
                tx: ([]time.zoneTrans) <nil>,
                extend: (string) "",
                cacheStart: (int64) 0,
                cacheEnd: (int64) 0,
                cacheZone: (*time.zone)(<nil>)
              })
            }
          },
          Reason: (string) "",
          Message: (string) ""
        }
      },
      Message: (string) "",
      Reason: (string) "",
      NominatedNodeName: (string) "",
      HostIP: (string) (len=14) "10.100.138.210",
      HostIPs: ([]v1.HostIP) <nil>,
      PodIP: (string) (len=12) "10.1.235.136",
      PodIPs: ([]v1.PodIP) (len=1) {
        (v1.PodIP) {
          IP: (string) (len=12) "10.1.235.136"
        }
      },
      StartTime: (*v1.Time)({
        Time: (time.Time) {
          wall: (uint64) 0,
          ext: (int64) 63844072408,
          loc: (*time.Location)({
            name: (string) (len=3) "UTC",
            zone: ([]time.zone) <nil>,
            tx: ([]time.zoneTrans) <nil>,
            extend: (string) "",
            cacheStart: (int64) 0,
            cacheEnd: (int64) 0,
            cacheZone: (*time.zone)(<nil>)
          })
        }
      }),
      InitContainerStatuses: ([]v1.ContainerStatus) <nil>,
      ContainerStatuses: ([]v1.ContainerStatus) (len=1) {
        (v1.ContainerStatus) {
          Name: (string) (len=7) "agnhost",
          State: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)({
              StartedAt: (v1.Time) {
                Time: (time.Time) {
                  wall: (uint64) 0,
                  ext: (int64) 63844072408,
                  loc: (*time.Location)(<already shown>)
                }
              }
            }),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          LastTerminationState: (v1.ContainerState) {
            Waiting: (*v1.ContainerStateWaiting)(<nil>),
            Running: (*v1.ContainerStateRunning)(<nil>),
            Terminated: (*v1.ContainerStateTerminated)(<nil>)
          },
          Ready: (bool) true,
          RestartCount: (int32) 0,
          Image: (string) (len=44) "registry.k8s.io/e2e-test-images/agnhost:2.45",
          ImageID: (string) (len=111) "registry.k8s.io/e2e-test-images/agnhost@sha256:2c5b5b056076334e4cf431d964d102e44cbca8f1e6b16ac1e477a0ffbe6caac4",
          ContainerID: (string) (len=77) "containerd://d2e6ae10435bf8a8b72e07c55e873ea8e149ef7a551628ebfa0f56e2d3fc41aa",
          Started: (*bool)(true),
          AllocatedResources: (v1.ResourceList) <nil>,
          Resources: (*v1.ResourceRequirements)(<nil>)
        }
      },
      QOSClass: (v1.PodQOSClass) (len=10) "BestEffort",
      EphemeralContainerStatuses: ([]v1.ContainerStatus) <nil>,
      Resize: (v1.PodResizeStatus) "",
      ResourceClaimStatuses: ([]v1.PodResourceClaimStatus) <nil>
    }
  }

  Feb 21 00:33:40.068: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "deployment-2674" for this suite. @ 02/21/24 00:33:40.073
• [21.345 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap updates should be reflected in volume [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:124
  STEP: Creating a kubernetes client @ 02/21/24 00:33:40.082
  Feb 21 00:33:40.082: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:33:40.083
  E0221 00:33:40.346475      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:33:40.445
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:33:40.447
  STEP: Creating projection with configMap that has name projected-configmap-test-upd-ad007f99-5462-4658-9c83-9e52c07bb9ef @ 02/21/24 00:33:40.452
  STEP: Creating the pod @ 02/21/24 00:33:40.459
  E0221 00:33:41.346419      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:42.346948      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:43.347601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:44.348605      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Updating configmap projected-configmap-test-upd-ad007f99-5462-4658-9c83-9e52c07bb9ef @ 02/21/24 00:33:44.533
  STEP: waiting to observe update in volume @ 02/21/24 00:33:44.561
  E0221 00:33:45.348922      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:46.349335      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:47.350479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:48.351157      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:49.351501      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:50.352299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:51.352479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:52.352801      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:53.353346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:54.353891      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:55.354172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:56.354437      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:57.355381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:58.355949      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:33:59.356955      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:00.357862      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:01.358619      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:02.359110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:03.359327      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:04.359878      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:05.360810      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:06.361455      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:07.362433      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:08.363085      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:09.364042      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:10.364200      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:11.364451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:12.365307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:13.365399      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:14.366601      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:15.367368      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:16.368022      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:17.369043      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:18.369404      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:19.370012      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:20.370367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:21.371326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:22.372112      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:23.372252      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:24.372853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:25.373413      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:26.374024      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:27.374363      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:28.374456      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:29.375432      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:30.376011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:31.376771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:32.377572      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:33.378604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:34.379113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:35.379887      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:36.380466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:37.381139      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:38.381549      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:39.382260      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:40.382361      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:41.383479      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:42.384118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:43.385069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:44.385443      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:45.386635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:46.387152      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:47.387196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:48.387783      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:49.388714      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:50.388845      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:51.389525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:52.390222      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:53.391225      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:34:53.415: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6745" for this suite. @ 02/21/24 00:34:53.428
• [73.376 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should list and delete a collection of DaemonSets [Conformance]
test/e2e/apps/daemon_set.go:836
  STEP: Creating a kubernetes client @ 02/21/24 00:34:53.46
  Feb 21 00:34:53.460: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/21/24 00:34:53.462
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:34:53.621
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:34:53.623
  STEP: Creating simple DaemonSet "daemon-set" @ 02/21/24 00:34:53.646
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/21/24 00:34:53.653
  Feb 21 00:34:53.662: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:34:53.662: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:34:54.392489      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:34:54.692: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:34:54.692: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:34:55.397898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:34:55.682: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:34:55.682: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:34:56.398436      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:34:56.687: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:34:56.687: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: listing all DaemonSets @ 02/21/24 00:34:56.698
  STEP: DeleteCollection of the DaemonSets @ 02/21/24 00:34:56.712
  STEP: Verify that ReplicaSets have been deleted @ 02/21/24 00:34:56.746
  Feb 21 00:34:56.792: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"32182"},"items":null}

  Feb 21 00:34:56.803: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"32182"},"items":[{"metadata":{"name":"daemon-set-nvlmt","generateName":"daemon-set-","namespace":"daemonsets-2894","uid":"2089fe81-727a-4a99-a8a2-a3161496fe92","resourceVersion":"32177","creationTimestamp":"2024-02-21T00:34:54Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"annotations":{"cni.projectcalico.org/containerID":"ee14da51a0ff2391690c273a62eaa3bac6462cba8a7a5d515ba5f5cd2508b5aa","cni.projectcalico.org/podIP":"10.1.235.131/32","cni.projectcalico.org/podIPs":"10.1.235.131/32"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"a9919bd2-ca84-49f9-9729-5dd7d76fee90","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:54Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a9919bd2-ca84-49f9-9729-5dd7d76fee90\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"calico","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:cni.projectcalico.org/containerID":{},"f:cni.projectcalico.org/podIP":{},"f:cni.projectcalico.org/podIPs":{}}}},"subresource":"status"},{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.1.235.131\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-v9fmb","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-v9fmb","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"control-plane","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["control-plane"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:54Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:55Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:55Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:54Z"}],"hostIP":"10.100.138.210","podIP":"10.1.235.131","podIPs":[{"ip":"10.1.235.131"}],"startTime":"2024-02-21T00:34:54Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-02-21T00:34:55Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://c5e40954f4ef1294be3e4f551d29e06bc7f0205f19535ff0603150e19ec2abd3","started":true}],"qosClass":"BestEffort"}},{"metadata":{"name":"daemon-set-gtr4v","generateName":"daemon-set-","namespace":"daemonsets-2894","uid":"025a507b-9db4-4a47-ba40-bd7a7cb0f3f2","resourceVersion":"32180","creationTimestamp":"2024-02-21T00:34:54Z","labels":{"controller-revision-hash":"58cb6b5b65","daemonset-name":"daemon-set","pod-template-generation":"1"},"annotations":{"cni.projectcalico.org/containerID":"1e3d7d4566b501aed3a6bf27c0c627b652ba4184f5760e13bc92da3f8bb5b785","cni.projectcalico.org/podIP":"10.1.171.87/32","cni.projectcalico.org/podIPs":"10.1.171.87/32"},"ownerReferences":[{"apiVersion":"apps/v1","kind":"DaemonSet","name":"daemon-set","uid":"a9919bd2-ca84-49f9-9729-5dd7d76fee90","controller":true,"blockOwnerDeletion":true}],"managedFields":[{"manager":"calico","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:54Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:annotations":{".":{},"f:cni.projectcalico.org/containerID":{},"f:cni.projectcalico.org/podIP":{},"f:cni.projectcalico.org/podIPs":{}}}},"subresource":"status"},{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:54Z","fieldsType":"FieldsV1","fieldsV1":{"f:metadata":{"f:generateName":{},"f:labels":{".":{},"f:controller-revision-hash":{},"f:daemonset-name":{},"f:pod-template-generation":{}},"f:ownerReferences":{".":{},"k:{\"uid\":\"a9919bd2-ca84-49f9-9729-5dd7d76fee90\"}":{}}},"f:spec":{"f:affinity":{".":{},"f:nodeAffinity":{".":{},"f:requiredDuringSchedulingIgnoredDuringExecution":{}}},"f:containers":{"k:{\"name\":\"app\"}":{".":{},"f:image":{},"f:imagePullPolicy":{},"f:name":{},"f:ports":{".":{},"k:{\"containerPort\":9376,\"protocol\":\"TCP\"}":{".":{},"f:containerPort":{},"f:protocol":{}}},"f:resources":{},"f:securityContext":{},"f:terminationMessagePath":{},"f:terminationMessagePolicy":{}}},"f:dnsPolicy":{},"f:enableServiceLinks":{},"f:restartPolicy":{},"f:schedulerName":{},"f:securityContext":{},"f:terminationGracePeriodSeconds":{},"f:tolerations":{}}}},{"manager":"kubelite","operation":"Update","apiVersion":"v1","time":"2024-02-21T00:34:55Z","fieldsType":"FieldsV1","fieldsV1":{"f:status":{"f:conditions":{"k:{\"type\":\"ContainersReady\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Initialized\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}},"k:{\"type\":\"Ready\"}":{".":{},"f:lastProbeTime":{},"f:lastTransitionTime":{},"f:status":{},"f:type":{}}},"f:containerStatuses":{},"f:hostIP":{},"f:phase":{},"f:podIP":{},"f:podIPs":{".":{},"k:{\"ip\":\"10.1.171.87\"}":{".":{},"f:ip":{}}},"f:startTime":{}}},"subresource":"status"}]},"spec":{"volumes":[{"name":"kube-api-access-574pw","projected":{"sources":[{"serviceAccountToken":{"expirationSeconds":3607,"path":"token"}},{"configMap":{"name":"kube-root-ca.crt","items":[{"key":"ca.crt","path":"ca.crt"}]}},{"downwardAPI":{"items":[{"path":"namespace","fieldRef":{"apiVersion":"v1","fieldPath":"metadata.namespace"}}]}}],"defaultMode":420}}],"containers":[{"name":"app","image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","ports":[{"containerPort":9376,"protocol":"TCP"}],"resources":{},"volumeMounts":[{"name":"kube-api-access-574pw","readOnly":true,"mountPath":"/var/run/secrets/kubernetes.io/serviceaccount"}],"terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"File","imagePullPolicy":"IfNotPresent","securityContext":{}}],"restartPolicy":"Always","terminationGracePeriodSeconds":30,"dnsPolicy":"ClusterFirst","serviceAccountName":"default","serviceAccount":"default","nodeName":"worker","securityContext":{},"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchFields":[{"key":"metadata.name","operator":"In","values":["worker"]}]}]}}},"schedulerName":"default-scheduler","tolerations":[{"key":"node.kubernetes.io/not-ready","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/unreachable","operator":"Exists","effect":"NoExecute"},{"key":"node.kubernetes.io/disk-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/memory-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/pid-pressure","operator":"Exists","effect":"NoSchedule"},{"key":"node.kubernetes.io/unschedulable","operator":"Exists","effect":"NoSchedule"}],"priority":0,"enableServiceLinks":true,"preemptionPolicy":"PreemptLowerPriority"},"status":{"phase":"Running","conditions":[{"type":"Initialized","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:54Z"},{"type":"Ready","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:55Z"},{"type":"ContainersReady","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:55Z"},{"type":"PodScheduled","status":"True","lastProbeTime":null,"lastTransitionTime":"2024-02-21T00:34:54Z"}],"hostIP":"10.100.138.108","podIP":"10.1.171.87","podIPs":[{"ip":"10.1.171.87"}],"startTime":"2024-02-21T00:34:54Z","containerStatuses":[{"name":"app","state":{"running":{"startedAt":"2024-02-21T00:34:55Z"}},"lastState":{},"ready":true,"restartCount":0,"image":"registry.k8s.io/e2e-test-images/httpd:2.4.38-4","imageID":"registry.k8s.io/e2e-test-images/httpd@sha256:148b022f5c5da426fc2f3c14b5c0867e58ef05961510c84749ac1fddcb0fef22","containerID":"containerd://546ec7145bd82802bf6ff5134d6b535da1378683c5a32479fb813bc4c3aa62d0","started":true}],"qosClass":"BestEffort"}}]}

  Feb 21 00:34:56.837: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-2894" for this suite. @ 02/21/24 00:34:56.849
• [3.410 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPredicates [Serial] validates that NodeSelector is respected if matching  [Conformance]
test/e2e/scheduling/predicates.go:467
  STEP: Creating a kubernetes client @ 02/21/24 00:34:56.872
  Feb 21 00:34:56.872: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-pred @ 02/21/24 00:34:56.873
  E0221 00:34:57.399402      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:34:57.813
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:34:57.816
  Feb 21 00:34:57.819: INFO: Waiting up to 1m0s for all (but 0) nodes to be ready
  Feb 21 00:34:57.825: INFO: Waiting for terminating namespaces to be deleted...
  Feb 21 00:34:57.829: INFO: 
  Logging pods the apiserver thinks is on node worker before test
  Feb 21 00:34:57.838: INFO: calico-node-psfx2 from kube-system started at 2024-02-20 22:52:21 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: sonobuoy-e2e-job-f933256834384d63 from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container e2e ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-852jd from sonobuoy started at 2024-02-20 23:00:17 +0000 UTC (2 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: sonobuoy from sonobuoy started at 2024-02-20 23:00:07 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container kube-sonobuoy ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: coredns-864597b5fd-jrm2t from kube-system started at 2024-02-20 23:28:47 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container coredns ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: calico-kube-controllers-77bd7c5b-p4cwm from kube-system started at 2024-02-21 00:11:15 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container calico-kube-controllers ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: daemon-set-gtr4v from daemonsets-2894 started at 2024-02-21 00:34:54 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.838: INFO: 	Container app ready: true, restart count 0
  Feb 21 00:34:57.838: INFO: 
  Logging pods the apiserver thinks is on node control-plane before test
  Feb 21 00:34:57.844: INFO: calico-node-8lb8x from kube-system started at 2024-02-20 22:52:26 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.844: INFO: 	Container calico-node ready: true, restart count 0
  Feb 21 00:34:57.844: INFO: sonobuoy-systemd-logs-daemon-set-c296e959ad004788-lh7bn from sonobuoy started at 2024-02-20 23:00:18 +0000 UTC (2 container statuses recorded)
  Feb 21 00:34:57.844: INFO: 	Container sonobuoy-worker ready: true, restart count 0
  Feb 21 00:34:57.844: INFO: 	Container systemd-logs ready: true, restart count 0
  Feb 21 00:34:57.844: INFO: pod-projected-configmaps-be7dba85-f624-41af-b85a-1d52f9f490ac from projected-6745 started at 2024-02-21 00:33:40 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.844: INFO: 	Container agnhost-container ready: true, restart count 0
  Feb 21 00:34:57.844: INFO: daemon-set-nvlmt from daemonsets-2894 started at 2024-02-21 00:34:54 +0000 UTC (1 container statuses recorded)
  Feb 21 00:34:57.844: INFO: 	Container app ready: true, restart count 0
  STEP: Trying to launch a pod without a label to get a node which can launch it. @ 02/21/24 00:34:57.844
  E0221 00:34:58.399805      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:34:59.400211      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Explicitly delete pod here to free the resource it takes. @ 02/21/24 00:34:59.877
  STEP: Trying to apply a random label on the found node. @ 02/21/24 00:34:59.894
  STEP: verifying the node has the label kubernetes.io/e2e-b8edf0e7-2584-456d-9537-5b08db29f45c 42 @ 02/21/24 00:34:59.902
  STEP: Trying to relaunch the pod, now with labels. @ 02/21/24 00:34:59.905
  E0221 00:35:00.400644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:01.401178      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: removing the label kubernetes.io/e2e-b8edf0e7-2584-456d-9537-5b08db29f45c off the node control-plane @ 02/21/24 00:35:01.935
  STEP: verifying the node doesn't have the label kubernetes.io/e2e-b8edf0e7-2584-456d-9537-5b08db29f45c @ 02/21/24 00:35:01.955
  Feb 21 00:35:01.959: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-pred-1182" for this suite. @ 02/21/24 00:35:01.963
• [5.104 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should serve a basic endpoint from pods  [Conformance]
test/e2e/network/service.go:785
  STEP: Creating a kubernetes client @ 02/21/24 00:35:01.976
  Feb 21 00:35:01.976: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/21/24 00:35:01.977
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:02.185
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:02.192
  STEP: creating service endpoint-test2 in namespace services-1287 @ 02/21/24 00:35:02.201
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-1287 to expose endpoints map[] @ 02/21/24 00:35:02.246
  Feb 21 00:35:02.256: INFO: Failed go get Endpoints object: endpoints "endpoint-test2" not found
  E0221 00:35:02.402107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:03.271: INFO: successfully validated that service endpoint-test2 in namespace services-1287 exposes endpoints map[]
  STEP: Creating pod pod1 in namespace services-1287 @ 02/21/24 00:35:03.271
  E0221 00:35:03.403376      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:04.404029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-1287 to expose endpoints map[pod1:[80]] @ 02/21/24 00:35:05.31
  Feb 21 00:35:05.342: INFO: successfully validated that service endpoint-test2 in namespace services-1287 exposes endpoints map[pod1:[80]]
  STEP: Checking if the Service forwards traffic to pod1 @ 02/21/24 00:35:05.342
  Feb 21 00:35:05.342: INFO: Creating new exec pod
  E0221 00:35:05.404266      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:06.405083      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:07.405323      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:08.405535      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:09.405653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:10.398: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  E0221 00:35:10.406391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:10.520: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:10.520: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 21 00:35:10.520: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.254 80'
  Feb 21 00:35:10.624: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.254 80\nConnection to 10.152.183.254 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:10.624: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Creating pod pod2 in namespace services-1287 @ 02/21/24 00:35:10.624
  E0221 00:35:11.406466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:12.406500      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-1287 to expose endpoints map[pod1:[80] pod2:[80]] @ 02/21/24 00:35:12.647
  Feb 21 00:35:12.669: INFO: successfully validated that service endpoint-test2 in namespace services-1287 exposes endpoints map[pod1:[80] pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod1 and pod2 @ 02/21/24 00:35:12.669
  E0221 00:35:13.406971      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:13.670: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Feb 21 00:35:13.769: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:13.769: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 21 00:35:13.769: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.254 80'
  Feb 21 00:35:13.856: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.254 80\nConnection to 10.152.183.254 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:13.856: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod1 in namespace services-1287 @ 02/21/24 00:35:13.856
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-1287 to expose endpoints map[pod2:[80]] @ 02/21/24 00:35:13.882
  E0221 00:35:14.407726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:14.919: INFO: successfully validated that service endpoint-test2 in namespace services-1287 exposes endpoints map[pod2:[80]]
  STEP: Checking if the Service forwards traffic to pod2 @ 02/21/24 00:35:14.919
  E0221 00:35:15.408564      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:15.920: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 endpoint-test2 80'
  Feb 21 00:35:16.006: INFO: stderr: "+ + echonc -v hostName -t\n -w 2 endpoint-test2 80\nConnection to endpoint-test2 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:16.006: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  Feb 21 00:35:16.006: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-1287 exec execpoddsc7k -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.254 80'
  Feb 21 00:35:16.076: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.254 80\nConnection to 10.152.183.254 80 port [tcp/http] succeeded!\n"
  Feb 21 00:35:16.076: INFO: stdout: "HTTP/1.1 400 Bad Request\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n400 Bad Request"
  STEP: Deleting pod pod2 in namespace services-1287 @ 02/21/24 00:35:16.076
  STEP: waiting up to 3m0s for service endpoint-test2 in namespace services-1287 to expose endpoints map[] @ 02/21/24 00:35:16.092
  E0221 00:35:16.409077      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:17.104: INFO: successfully validated that service endpoint-test2 in namespace services-1287 exposes endpoints map[]
  Feb 21 00:35:17.104: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-1287" for this suite. @ 02/21/24 00:35:17.131
• [15.162 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should not delete dependents that have both valid owner and owner that's waiting for dependents to be deleted [Conformance]
test/e2e/apimachinery/garbage_collector.go:713
  STEP: Creating a kubernetes client @ 02/21/24 00:35:17.138
  Feb 21 00:35:17.138: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/21/24 00:35:17.139
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:17.181
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:17.183
  STEP: create the rc1 @ 02/21/24 00:35:17.188
  STEP: create the rc2 @ 02/21/24 00:35:17.194
  E0221 00:35:17.409332      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:18.409525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:19.415708      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:20.416762      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:21.417369      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:22.418092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: set half of pods created by rc simpletest-rc-to-be-deleted to have rc simpletest-rc-to-stay as owner as well @ 02/21/24 00:35:23.21
  E0221 00:35:23.418118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:24.418806      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:25.419405      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc simpletest-rc-to-be-deleted @ 02/21/24 00:35:26.398
  E0221 00:35:26.419648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: wait for the rc to be deleted @ 02/21/24 00:35:26.467
  E0221 00:35:27.420129      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:28.421238      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:29.433230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:30.436232      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:31.439523      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:31.508: INFO: 67 pods remaining
  Feb 21 00:35:31.508: INFO: 67 pods has nil DeletionTimestamp
  Feb 21 00:35:31.508: INFO: 
  E0221 00:35:32.439954      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:33.440586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:34.441370      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:35.442026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:36.442519      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 02/21/24 00:35:36.504
  W0221 00:35:36.511093      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 21 00:35:36.511: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 21 00:35:36.511: INFO: Deleting pod "simpletest-rc-to-be-deleted-jzjln" in namespace "gc-2936"
  Feb 21 00:35:36.535: INFO: Deleting pod "simpletest-rc-to-be-deleted-mfpv5" in namespace "gc-2936"
  Feb 21 00:35:36.556: INFO: Deleting pod "simpletest-rc-to-be-deleted-bpwx2" in namespace "gc-2936"
  Feb 21 00:35:36.577: INFO: Deleting pod "simpletest-rc-to-be-deleted-l4bmc" in namespace "gc-2936"
  Feb 21 00:35:36.604: INFO: Deleting pod "simpletest-rc-to-be-deleted-r9rq2" in namespace "gc-2936"
  Feb 21 00:35:36.636: INFO: Deleting pod "simpletest-rc-to-be-deleted-fs7rv" in namespace "gc-2936"
  Feb 21 00:35:36.662: INFO: Deleting pod "simpletest-rc-to-be-deleted-f6q6v" in namespace "gc-2936"
  Feb 21 00:35:36.686: INFO: Deleting pod "simpletest-rc-to-be-deleted-bn2zc" in namespace "gc-2936"
  Feb 21 00:35:36.708: INFO: Deleting pod "simpletest-rc-to-be-deleted-l7t9l" in namespace "gc-2936"
  Feb 21 00:35:36.736: INFO: Deleting pod "simpletest-rc-to-be-deleted-b8cm5" in namespace "gc-2936"
  Feb 21 00:35:36.816: INFO: Deleting pod "simpletest-rc-to-be-deleted-v8wr7" in namespace "gc-2936"
  Feb 21 00:35:36.894: INFO: Deleting pod "simpletest-rc-to-be-deleted-wx54m" in namespace "gc-2936"
  Feb 21 00:35:36.931: INFO: Deleting pod "simpletest-rc-to-be-deleted-q5mh9" in namespace "gc-2936"
  Feb 21 00:35:37.090: INFO: Deleting pod "simpletest-rc-to-be-deleted-9n5lj" in namespace "gc-2936"
  Feb 21 00:35:37.140: INFO: Deleting pod "simpletest-rc-to-be-deleted-jlmb7" in namespace "gc-2936"
  Feb 21 00:35:37.248: INFO: Deleting pod "simpletest-rc-to-be-deleted-smppd" in namespace "gc-2936"
  Feb 21 00:35:37.331: INFO: Deleting pod "simpletest-rc-to-be-deleted-bgg5s" in namespace "gc-2936"
  Feb 21 00:35:37.373: INFO: Deleting pod "simpletest-rc-to-be-deleted-bjrkf" in namespace "gc-2936"
  Feb 21 00:35:37.435: INFO: Deleting pod "simpletest-rc-to-be-deleted-6g4gq" in namespace "gc-2936"
  E0221 00:35:37.442898      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:37.488: INFO: Deleting pod "simpletest-rc-to-be-deleted-5p49m" in namespace "gc-2936"
  Feb 21 00:35:37.578: INFO: Deleting pod "simpletest-rc-to-be-deleted-rw7pr" in namespace "gc-2936"
  Feb 21 00:35:37.686: INFO: Deleting pod "simpletest-rc-to-be-deleted-pqkjr" in namespace "gc-2936"
  Feb 21 00:35:37.737: INFO: Deleting pod "simpletest-rc-to-be-deleted-f98qh" in namespace "gc-2936"
  Feb 21 00:35:37.805: INFO: Deleting pod "simpletest-rc-to-be-deleted-8d68r" in namespace "gc-2936"
  Feb 21 00:35:37.924: INFO: Deleting pod "simpletest-rc-to-be-deleted-fm6bb" in namespace "gc-2936"
  Feb 21 00:35:37.949: INFO: Deleting pod "simpletest-rc-to-be-deleted-prnmx" in namespace "gc-2936"
  Feb 21 00:35:38.089: INFO: Deleting pod "simpletest-rc-to-be-deleted-z2rg6" in namespace "gc-2936"
  Feb 21 00:35:38.157: INFO: Deleting pod "simpletest-rc-to-be-deleted-gzbsq" in namespace "gc-2936"
  Feb 21 00:35:38.228: INFO: Deleting pod "simpletest-rc-to-be-deleted-mb7hk" in namespace "gc-2936"
  Feb 21 00:35:38.310: INFO: Deleting pod "simpletest-rc-to-be-deleted-k6dlc" in namespace "gc-2936"
  Feb 21 00:35:38.390: INFO: Deleting pod "simpletest-rc-to-be-deleted-nddq9" in namespace "gc-2936"
  E0221 00:35:38.444275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:38.467: INFO: Deleting pod "simpletest-rc-to-be-deleted-bwwbc" in namespace "gc-2936"
  Feb 21 00:35:38.552: INFO: Deleting pod "simpletest-rc-to-be-deleted-rmzmm" in namespace "gc-2936"
  Feb 21 00:35:38.631: INFO: Deleting pod "simpletest-rc-to-be-deleted-9ms48" in namespace "gc-2936"
  Feb 21 00:35:38.707: INFO: Deleting pod "simpletest-rc-to-be-deleted-gjs9k" in namespace "gc-2936"
  Feb 21 00:35:38.788: INFO: Deleting pod "simpletest-rc-to-be-deleted-7rxdw" in namespace "gc-2936"
  Feb 21 00:35:38.894: INFO: Deleting pod "simpletest-rc-to-be-deleted-lvd2n" in namespace "gc-2936"
  Feb 21 00:35:38.953: INFO: Deleting pod "simpletest-rc-to-be-deleted-4jts5" in namespace "gc-2936"
  Feb 21 00:35:39.072: INFO: Deleting pod "simpletest-rc-to-be-deleted-mbrnd" in namespace "gc-2936"
  Feb 21 00:35:39.123: INFO: Deleting pod "simpletest-rc-to-be-deleted-587sh" in namespace "gc-2936"
  Feb 21 00:35:39.195: INFO: Deleting pod "simpletest-rc-to-be-deleted-p7kgt" in namespace "gc-2936"
  Feb 21 00:35:39.304: INFO: Deleting pod "simpletest-rc-to-be-deleted-lrzlk" in namespace "gc-2936"
  Feb 21 00:35:39.332: INFO: Deleting pod "simpletest-rc-to-be-deleted-jv9ls" in namespace "gc-2936"
  Feb 21 00:35:39.383: INFO: Deleting pod "simpletest-rc-to-be-deleted-bcn9z" in namespace "gc-2936"
  E0221 00:35:39.445185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:39.524: INFO: Deleting pod "simpletest-rc-to-be-deleted-5kvh5" in namespace "gc-2936"
  Feb 21 00:35:39.641: INFO: Deleting pod "simpletest-rc-to-be-deleted-24vnk" in namespace "gc-2936"
  Feb 21 00:35:39.715: INFO: Deleting pod "simpletest-rc-to-be-deleted-75lhf" in namespace "gc-2936"
  Feb 21 00:35:39.840: INFO: Deleting pod "simpletest-rc-to-be-deleted-src8t" in namespace "gc-2936"
  Feb 21 00:35:39.885: INFO: Deleting pod "simpletest-rc-to-be-deleted-ktz6d" in namespace "gc-2936"
  Feb 21 00:35:39.923: INFO: Deleting pod "simpletest-rc-to-be-deleted-s9nbc" in namespace "gc-2936"
  Feb 21 00:35:40.059: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-2936" for this suite. @ 02/21/24 00:35:40.068
• [23.029 seconds]
------------------------------
SSS
------------------------------
[sig-node] Pods Extended Pods Set QOS Class should be set on Pods with matching resource requests and limits for memory and cpu [Conformance]
test/e2e/node/pods.go:163
  STEP: Creating a kubernetes client @ 02/21/24 00:35:40.168
  Feb 21 00:35:40.168: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pods @ 02/21/24 00:35:40.168
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:40.277
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:40.279
  STEP: creating the pod @ 02/21/24 00:35:40.282
  STEP: submitting the pod to kubernetes @ 02/21/24 00:35:40.282
  STEP: verifying QOS class is set on the pod @ 02/21/24 00:35:40.298
  Feb 21 00:35:40.308: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pods-3897" for this suite. @ 02/21/24 00:35:40.316
• [0.177 seconds]
------------------------------
[sig-apps] Daemon set [Serial] should retry creating failed daemon pods [Conformance]
test/e2e/apps/daemon_set.go:305
  STEP: Creating a kubernetes client @ 02/21/24 00:35:40.345
  Feb 21 00:35:40.345: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/21/24 00:35:40.346
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:40.409
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:40.411
  E0221 00:35:40.446172      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a simple DaemonSet "daemon-set" @ 02/21/24 00:35:40.449
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/21/24 00:35:40.459
  Feb 21 00:35:40.478: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:35:40.478: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:35:41.446788      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:41.487: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:35:41.487: INFO: Node control-plane is running 0 daemon pod, expected 1
  E0221 00:35:42.447307      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:42.485: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:35:42.485: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Set a daemon pod's phase to 'Failed', check that the daemon pod is revived. @ 02/21/24 00:35:42.488
  Feb 21 00:35:42.506: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:35:42.506: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Wait for the failed daemon pod to be completely deleted. @ 02/21/24 00:35:42.506
  E0221 00:35:43.448132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting DaemonSet "daemon-set" @ 02/21/24 00:35:43.516
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-7311, will wait for the garbage collector to delete the pods @ 02/21/24 00:35:43.516
  Feb 21 00:35:43.580: INFO: Deleting DaemonSet.extensions daemon-set took: 11.369608ms
  Feb 21 00:35:43.681: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.563448ms
  E0221 00:35:44.449132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:45.449026      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:46.450039      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:47.285: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:35:47.285: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 21 00:35:47.293: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"34648"},"items":null}

  Feb 21 00:35:47.297: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"34649"},"items":null}

  Feb 21 00:35:47.306: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-7311" for this suite. @ 02/21/24 00:35:47.309
• [6.973 seconds]
------------------------------
SSSSSSSS
------------------------------
[sig-instrumentation] Events API should ensure that an event can be fetched, patched, deleted, and listed [Conformance]
test/e2e/instrumentation/events.go:98
  STEP: Creating a kubernetes client @ 02/21/24 00:35:47.319
  Feb 21 00:35:47.319: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename events @ 02/21/24 00:35:47.319
  E0221 00:35:47.450586      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:47.503
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:47.512
  STEP: creating a test event @ 02/21/24 00:35:47.523
  STEP: listing events in all namespaces @ 02/21/24 00:35:47.557
  STEP: listing events in test namespace @ 02/21/24 00:35:47.602
  STEP: listing events with field selection filtering on source @ 02/21/24 00:35:47.617
  STEP: listing events with field selection filtering on reportingController @ 02/21/24 00:35:47.626
  STEP: getting the test event @ 02/21/24 00:35:47.636
  STEP: patching the test event @ 02/21/24 00:35:47.643
  STEP: getting the test event @ 02/21/24 00:35:47.669
  STEP: updating the test event @ 02/21/24 00:35:47.676
  STEP: getting the test event @ 02/21/24 00:35:47.7
  STEP: deleting the test event @ 02/21/24 00:35:47.712
  STEP: listing events in all namespaces @ 02/21/24 00:35:47.734
  STEP: listing events in test namespace @ 02/21/24 00:35:47.76
  Feb 21 00:35:47.771: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "events-5089" for this suite. @ 02/21/24 00:35:47.781
• [0.485 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-apps] ReplicaSet should serve a basic image on each replica with a public image  [Conformance]
test/e2e/apps/replica_set.go:111
  STEP: Creating a kubernetes client @ 02/21/24 00:35:47.805
  Feb 21 00:35:47.805: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename replicaset @ 02/21/24 00:35:47.806
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:48.186
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:48.191
  Feb 21 00:35:48.198: INFO: Creating ReplicaSet my-hostname-basic-0614bb25-2634-4bc3-873f-0fd7c385e775
  Feb 21 00:35:48.234: INFO: Pod name my-hostname-basic-0614bb25-2634-4bc3-873f-0fd7c385e775: Found 0 pods out of 1
  E0221 00:35:48.451400      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:49.452377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:50.453597      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:51.454055      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:52.454488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:35:53.246: INFO: Pod name my-hostname-basic-0614bb25-2634-4bc3-873f-0fd7c385e775: Found 1 pods out of 1
  Feb 21 00:35:53.246: INFO: Ensuring a pod for ReplicaSet "my-hostname-basic-0614bb25-2634-4bc3-873f-0fd7c385e775" is running
  Feb 21 00:35:53.258: INFO: Pod "my-hostname-basic-0614bb25-2634-4bc3-873f-0fd7c385e775-kvj87" is running (conditions: [{Type:Initialized Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-21 00:35:48 +0000 UTC Reason: Message:} {Type:Ready Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-21 00:35:49 +0000 UTC Reason: Message:} {Type:ContainersReady Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-21 00:35:49 +0000 UTC Reason: Message:} {Type:PodScheduled Status:True LastProbeTime:0001-01-01 00:00:00 +0000 UTC LastTransitionTime:2024-02-21 00:35:48 +0000 UTC Reason: Message:}])
  Feb 21 00:35:53.258: INFO: Trying to dial the pod
  STEP: trying to dial each unique pod @ 02/21/24 00:35:53.258
  Feb 21 00:35:53.290: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "replicaset-6446" for this suite. @ 02/21/24 00:35:53.301
• [5.528 seconds]
------------------------------
SSSSSSSSSSSSSSSS
------------------------------
[sig-storage] EmptyDir volumes volume on default medium should have the correct mode [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/empty_dir.go:157
  STEP: Creating a kubernetes client @ 02/21/24 00:35:53.335
  Feb 21 00:35:53.335: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename emptydir @ 02/21/24 00:35:53.337
  E0221 00:35:53.455302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:53.636
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:53.643
  STEP: Creating a pod to test emptydir volume type on node default medium @ 02/21/24 00:35:53.652
  E0221 00:35:54.456058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:55.456960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:56.457166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:57.457520      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:58.457435      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:35:59.457650      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:35:59.719
  Feb 21 00:35:59.723: INFO: Trying to get logs from node control-plane pod pod-8fd28659-0a55-4ee4-b55e-63f2ba257862 container test-container: <nil>
  STEP: delete the pod @ 02/21/24 00:35:59.731
  Feb 21 00:35:59.787: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "emptydir-3064" for this suite. @ 02/21/24 00:35:59.79
• [6.469 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume as non-root with defaultMode and fsGroup set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:67
  STEP: Creating a kubernetes client @ 02/21/24 00:35:59.804
  Feb 21 00:35:59.804: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:35:59.805
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:35:59.912
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:35:59.914
  STEP: Creating projection with secret that has name projected-secret-test-c3d11e00-2cc1-4ed2-a9d0-bd4aa3fa8b7e @ 02/21/24 00:35:59.916
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:35:59.922
  E0221 00:36:00.457677      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:01.458727      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:02.459059      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:03.459253      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:36:03.943
  Feb 21 00:36:03.946: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-6782a47f-62d8-40a8-866b-3a45124ba398 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:36:03.953
  Feb 21 00:36:03.987: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-8049" for this suite. @ 02/21/24 00:36:03.99
• [4.193 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Security Context when creating containers with AllowPrivilegeEscalation should not allow privilege escalation when false [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/node/security_context.go:609
  STEP: Creating a kubernetes client @ 02/21/24 00:36:03.998
  Feb 21 00:36:03.998: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename security-context-test @ 02/21/24 00:36:03.998
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:36:04.16
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:36:04.161
  E0221 00:36:04.459391      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:05.459706      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:06.460558      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:07.460902      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:08.461393      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:09.462154      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:36:10.230: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "security-context-test-7910" for this suite. @ 02/21/24 00:36:10.242
• [6.276 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Networking Granular Checks: Pods should function for intra-pod communication: http [NodeConformance] [Conformance]
test/e2e/common/network/networking.go:84
  STEP: Creating a kubernetes client @ 02/21/24 00:36:10.278
  Feb 21 00:36:10.278: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename pod-network-test @ 02/21/24 00:36:10.279
  E0221 00:36:10.462274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:36:10.469
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:36:10.48
  STEP: Performing setup for networking test in namespace pod-network-test-4773 @ 02/21/24 00:36:10.489
  STEP: creating a selector @ 02/21/24 00:36:10.489
  STEP: Creating the service pods in kubernetes @ 02/21/24 00:36:10.489
  Feb 21 00:36:10.489: INFO: Waiting up to 10m0s for all (but 0) nodes to be schedulable
  E0221 00:36:11.462930      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:12.463302      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:13.464113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:14.464346      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:15.465496      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:16.466440      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:17.467073      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:18.468190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:19.468831      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:20.469583      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:21.469656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:22.470153      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating test pods @ 02/21/24 00:36:22.604
  E0221 00:36:23.470635      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:24.471314      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:25.471697      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:26.472166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:36:26.649: INFO: Setting MaxTries for pod polling to 34 for networking test based on endpoint count 2
  Feb 21 00:36:26.649: INFO: Breadth first check of 10.1.235.136 on host 10.100.138.210...
  Feb 21 00:36:26.660: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.235.135:9080/dial?request=hostname&protocol=http&host=10.1.235.136&port=8083&tries=1'] Namespace:pod-network-test-4773 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:36:26.660: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:36:26.662: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:36:26.662: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-4773/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.235.135%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.1.235.136%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Feb 21 00:36:26.723: INFO: Waiting for responses: map[]
  Feb 21 00:36:26.723: INFO: reached 10.1.235.136 after 0/1 tries
  Feb 21 00:36:26.723: INFO: Breadth first check of 10.1.171.85 on host 10.100.138.108...
  Feb 21 00:36:26.726: INFO: ExecWithOptions {Command:[/bin/sh -c curl -g -q -s 'http://10.1.235.135:9080/dial?request=hostname&protocol=http&host=10.1.171.85&port=8083&tries=1'] Namespace:pod-network-test-4773 PodName:test-container-pod ContainerName:webserver Stdin:<nil> CaptureStdout:true CaptureStderr:true PreserveWhitespace:false Quiet:false}
  Feb 21 00:36:26.726: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  Feb 21 00:36:26.726: INFO: ExecWithOptions: Clientset creation
  Feb 21 00:36:26.726: INFO: ExecWithOptions: execute(POST https://10.152.183.1:443/api/v1/namespaces/pod-network-test-4773/pods/test-container-pod/exec?command=%2Fbin%2Fsh&command=-c&command=curl+-g+-q+-s+%27http%3A%2F%2F10.1.235.135%3A9080%2Fdial%3Frequest%3Dhostname%26protocol%3Dhttp%26host%3D10.1.171.85%26port%3D8083%26tries%3D1%27&container=webserver&container=webserver&stderr=true&stdout=true)
  Feb 21 00:36:26.757: INFO: Waiting for responses: map[]
  Feb 21 00:36:26.757: INFO: reached 10.1.171.85 after 0/1 tries
  Feb 21 00:36:26.757: INFO: Going to retry 0 out of 2 pods....
  Feb 21 00:36:26.757: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "pod-network-test-4773" for this suite. @ 02/21/24 00:36:26.76
• [16.494 seconds]
------------------------------
SSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Namespaces [Serial] should patch a Namespace [Conformance]
test/e2e/apimachinery/namespace.go:272
  STEP: Creating a kubernetes client @ 02/21/24 00:36:26.771
  Feb 21 00:36:26.771: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename namespaces @ 02/21/24 00:36:26.772
  E0221 00:36:27.472919      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:36:27.474
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:36:27.481
  STEP: creating a Namespace @ 02/21/24 00:36:27.489
  STEP: patching the Namespace @ 02/21/24 00:36:27.774
  STEP: get the Namespace and ensuring it has the label @ 02/21/24 00:36:27.78
  Feb 21 00:36:27.783: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "namespaces-2169" for this suite. @ 02/21/24 00:36:27.786
  STEP: Destroying namespace "nspatchtest-9992de3a-9b3f-4174-bdaf-b10e09547368-8446" for this suite. @ 02/21/24 00:36:27.795
• [1.032 seconds]
------------------------------
SSSSSSS
------------------------------
[sig-api-machinery] AdmissionWebhook [Privileged:ClusterAdmin] should mutate custom resource [Conformance]
test/e2e/apimachinery/webhook.go:285
  STEP: Creating a kubernetes client @ 02/21/24 00:36:27.803
  Feb 21 00:36:27.803: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename webhook @ 02/21/24 00:36:27.804
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:36:28.184
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:36:28.186
  E0221 00:36:28.474143      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Setting up server cert @ 02/21/24 00:36:28.644
  STEP: Create role binding to let webhook read extension-apiserver-authentication @ 02/21/24 00:36:28.876
  STEP: Deploying the webhook pod @ 02/21/24 00:36:28.891
  STEP: Wait for the deployment to be ready @ 02/21/24 00:36:28.905
  Feb 21 00:36:28.910: INFO: new replicaset for deployment "sample-webhook-deployment" is yet to be created
  E0221 00:36:29.474738      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:30.475215      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deploying the webhook service @ 02/21/24 00:36:30.943
  STEP: Verifying the service has paired with the endpoint @ 02/21/24 00:36:30.984
  E0221 00:36:31.475477      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:36:31.985: INFO: Waiting for amount of service:e2e-test-webhook endpoints to be 1
  Feb 21 00:36:32.005: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:36:32.476293      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Registering the mutating webhook for custom resource e2e-test-webhook-8473-crds.webhook.example.com via the AdmissionRegistration API @ 02/21/24 00:36:32.538
  Feb 21 00:36:32.593: INFO: Waiting for webhook configuration to be ready...
  STEP: Creating a custom resource that should be mutated by the webhook @ 02/21/24 00:36:32.7
  E0221 00:36:33.477383      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:34.477466      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:36:34.755: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  E0221 00:36:35.478052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Destroying namespace "webhook-8300" for this suite. @ 02/21/24 00:36:35.486
  STEP: Destroying namespace "webhook-markers-6556" for this suite. @ 02/21/24 00:36:35.53
• [7.743 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] SchedulerPreemption [Serial] validates basic preemption works [Conformance]
test/e2e/scheduling/preemption.go:130
  STEP: Creating a kubernetes client @ 02/21/24 00:36:35.547
  Feb 21 00:36:35.547: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename sched-preemption @ 02/21/24 00:36:35.548
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:36:35.85
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:36:35.857
  Feb 21 00:36:35.994: INFO: Waiting up to 1m0s for all nodes to be ready
  E0221 00:36:36.479288      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:37.479348      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:38.479502      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:39.480110      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:40.480282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:41.480782      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:42.481082      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:43.482316      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:44.483226      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:45.483731      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:46.484152      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:47.484191      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:48.485382      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:49.485725      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:50.485855      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:51.486528      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:52.487403      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:53.488058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:54.488620      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:55.489422      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:56.489644      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:57.490282      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:58.490928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:36:59.491513      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:00.492094      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:01.492445      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:02.493124      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:03.493661      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:04.494468      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:05.495673      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:06.495808      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:07.496298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:08.497226      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:09.497750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:10.498471      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:11.499243      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:12.500465      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:13.501095      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:14.501939      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:15.502105      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:16.502198      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:17.502540      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:18.502866      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:19.503326      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:20.503894      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:21.504318      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:22.505416      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:23.506592      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:24.507256      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:25.508168      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:26.508408      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:27.509135      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:28.510274      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:29.511137      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:30.510997      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:31.510924      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:32.512141      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:33.512743      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:34.513451      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:35.514113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:36.033: INFO: Waiting for terminating namespaces to be deleted...
  STEP: Create pods that use 4/5 of node resources. @ 02/21/24 00:37:36.046
  Feb 21 00:37:36.114: INFO: Created pod: pod0-0-sched-preemption-low-priority
  Feb 21 00:37:36.134: INFO: Created pod: pod0-1-sched-preemption-medium-priority
  Feb 21 00:37:36.185: INFO: Created pod: pod1-0-sched-preemption-medium-priority
  Feb 21 00:37:36.195: INFO: Created pod: pod1-1-sched-preemption-medium-priority
  STEP: Wait for pods to be scheduled. @ 02/21/24 00:37:36.195
  E0221 00:37:36.514550      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:37.514820      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Run a high priority pod that has same requirements as that of lower priority pod @ 02/21/24 00:37:38.251
  E0221 00:37:38.515668      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:39.516011      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:40.517069      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:41.517418      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:42.517721      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:43.518367      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:44.367: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "sched-preemption-450" for this suite. @ 02/21/24 00:37:44.494
• [68.962 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Garbage collector should keep the rc around until all its pods are deleted if the deleteOptions says so [Conformance]
test/e2e/apimachinery/garbage_collector.go:638
  STEP: Creating a kubernetes client @ 02/21/24 00:37:44.51
  Feb 21 00:37:44.510: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename gc @ 02/21/24 00:37:44.51
  E0221 00:37:44.518927      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:37:44.81
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:37:44.813
  STEP: create the rc @ 02/21/24 00:37:44.82
  W0221 00:37:44.828428      22 warnings.go:70] metadata.name: this is used in Pod names and hostnames, which can result in surprising behavior; a DNS label is recommended: [must not contain dots]
  E0221 00:37:45.519498      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:46.526525      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:47.532291      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:48.532389      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:49.532821      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:50.534035      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the rc @ 02/21/24 00:37:50.856
  STEP: wait for the rc to be deleted @ 02/21/24 00:37:50.921
  E0221 00:37:51.534134      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:51.952: INFO: 83 pods remaining
  Feb 21 00:37:51.952: INFO: 80 pods has nil DeletionTimestamp
  Feb 21 00:37:51.952: INFO: 
  E0221 00:37:52.537169      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:52.950: INFO: 74 pods remaining
  Feb 21 00:37:52.950: INFO: 71 pods has nil DeletionTimestamp
  Feb 21 00:37:52.950: INFO: 
  E0221 00:37:53.537258      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:54.020: INFO: 58 pods remaining
  Feb 21 00:37:54.020: INFO: 58 pods has nil DeletionTimestamp
  Feb 21 00:37:54.020: INFO: 
  E0221 00:37:54.537481      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:55.007: INFO: 45 pods remaining
  Feb 21 00:37:55.007: INFO: 43 pods has nil DeletionTimestamp
  Feb 21 00:37:55.007: INFO: 
  E0221 00:37:55.538747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:55.967: INFO: 30 pods remaining
  Feb 21 00:37:55.967: INFO: 30 pods has nil DeletionTimestamp
  Feb 21 00:37:55.967: INFO: 
  E0221 00:37:56.538739      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:37:56.955: INFO: 17 pods remaining
  Feb 21 00:37:56.955: INFO: 17 pods has nil DeletionTimestamp
  Feb 21 00:37:56.955: INFO: 
  E0221 00:37:57.541951      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Gathering metrics @ 02/21/24 00:37:57.971
  W0221 00:37:57.987155      22 metrics_grabber.go:152] Can't find kube-controller-manager pod. Grabbing metrics from kube-controller-manager is disabled.
  Feb 21 00:37:57.987: INFO: For apiserver_request_total:
  For apiserver_request_latency_seconds:
  For apiserver_init_events_total:
  For garbage_collector_attempt_to_delete_queue_latency:
  For garbage_collector_attempt_to_delete_work_duration:
  For garbage_collector_attempt_to_orphan_queue_latency:
  For garbage_collector_attempt_to_orphan_work_duration:
  For garbage_collector_dirty_processing_latency_microseconds:
  For garbage_collector_event_processing_latency_microseconds:
  For garbage_collector_graph_changes_queue_latency:
  For garbage_collector_graph_changes_work_duration:
  For garbage_collector_orphan_processing_latency_microseconds:
  For namespace_queue_latency:
  For namespace_queue_latency_sum:
  For namespace_queue_latency_count:
  For namespace_retries:
  For namespace_work_duration:
  For namespace_work_duration_sum:
  For namespace_work_duration_count:
  For function_duration_seconds:
  For errors_total:
  For evicted_pods_total:

  Feb 21 00:37:57.988: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "gc-1372" for this suite. @ 02/21/24 00:37:58.037
• [13.556 seconds]
------------------------------
SSSSSSSSSSSS
------------------------------
[sig-apps] StatefulSet Basic StatefulSet functionality [StatefulSetBasic] should validate Statefulset Status endpoints [Conformance]
test/e2e/apps/statefulset.go:1030
  STEP: Creating a kubernetes client @ 02/21/24 00:37:58.066
  Feb 21 00:37:58.066: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename statefulset @ 02/21/24 00:37:58.067
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:37:58.26
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:37:58.263
  STEP: Creating service test in namespace statefulset-5666 @ 02/21/24 00:37:58.265
  STEP: Creating statefulset ss in namespace statefulset-5666 @ 02/21/24 00:37:58.302
  Feb 21 00:37:58.325: INFO: Found 0 stateful pods, waiting for 1
  E0221 00:37:58.542478      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:37:59.543485      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:00.544038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:01.544273      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:02.544373      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:03.544490      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:04.544671      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:05.545752      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:06.546347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:07.546488      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:08.329: INFO: Waiting for pod ss-0 to enter Running - Ready=true, currently Running - Ready=true
  STEP: Patch Statefulset to include a label @ 02/21/24 00:38:08.334
  STEP: Getting /status @ 02/21/24 00:38:08.35
  Feb 21 00:38:08.354: INFO: StatefulSet ss has Conditions: []v1.StatefulSetCondition(nil)
  STEP: updating the StatefulSet Status @ 02/21/24 00:38:08.354
  Feb 21 00:38:08.374: INFO: updatedStatus.Conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusUpdate", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: watching for the statefulset status to be updated @ 02/21/24 00:38:08.374
  Feb 21 00:38:08.376: INFO: Observed &StatefulSet event: ADDED
  Feb 21 00:38:08.376: INFO: Found Statefulset ss in namespace statefulset-5666 with labels: map[e2e:testing] annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 21 00:38:08.376: INFO: Statefulset ss has an updated status
  STEP: patching the Statefulset Status @ 02/21/24 00:38:08.376
  Feb 21 00:38:08.376: INFO: Patch payload: {"status":{"conditions":[{"type":"StatusPatched","status":"True"}]}}
  Feb 21 00:38:08.384: INFO: Patched status conditions: []v1.StatefulSetCondition{v1.StatefulSetCondition{Type:"StatusPatched", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"", Message:""}}
  STEP: watching for the Statefulset status to be patched @ 02/21/24 00:38:08.385
  Feb 21 00:38:08.386: INFO: Observed &StatefulSet event: ADDED
  Feb 21 00:38:08.386: INFO: Observed Statefulset ss in namespace statefulset-5666 with annotations: map[] & Conditions: {StatusUpdate True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 21 00:38:08.386: INFO: Observed &StatefulSet event: MODIFIED
  Feb 21 00:38:08.386: INFO: Deleting all statefulset in ns statefulset-5666
  Feb 21 00:38:08.389: INFO: Scaling statefulset ss to 0
  E0221 00:38:08.547494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:09.547656      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:10.547905      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:11.548387      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:12.548699      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:13.549118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:14.550170      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:15.551115      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:16.552144      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:17.552638      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:18.450: INFO: Waiting for statefulset status.replicas updated to 0
  Feb 21 00:38:18.460: INFO: Deleting statefulset ss
  Feb 21 00:38:18.518: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "statefulset-5666" for this suite. @ 02/21/24 00:38:18.531
  E0221 00:38:18.553599      22 retrywatcher.go:129] "Watch failed" err="context canceled"
• [20.490 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's cpu limit [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:194
  STEP: Creating a kubernetes client @ 02/21/24 00:38:18.558
  Feb 21 00:38:18.559: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:38:18.56
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:18.719
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:18.722
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:38:19.184
  E0221 00:38:19.554009      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:20.554821      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:21.556036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:22.557464      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:38:23.258
  Feb 21 00:38:23.271: INFO: Trying to get logs from node control-plane pod downwardapi-volume-b793e504-b153-4bd9-b2fb-e56a02301af5 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:38:23.311
  Feb 21 00:38:23.377: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-3597" for this suite. @ 02/21/24 00:38:23.39
• [4.854 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] works for multiple CRDs of different groups [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:276
  STEP: Creating a kubernetes client @ 02/21/24 00:38:23.412
  Feb 21 00:38:23.413: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/21/24 00:38:23.414
  E0221 00:38:23.557952      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:23.608
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:23.616
  STEP: CRs in different groups (two CRDs) show up in OpenAPI documentation @ 02/21/24 00:38:23.623
  Feb 21 00:38:23.625: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:38:24.558928      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:24.974: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:38:25.560221      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:26.561300      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:27.561648      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:28.561871      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:29.563057      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:30.241: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-3762" for this suite. @ 02/21/24 00:38:30.246
• [6.845 seconds]
------------------------------
S
------------------------------
[sig-apps] DisruptionController should block an eviction until the PDB is updated to allow it [Conformance]
test/e2e/apps/disruption.go:349
  STEP: Creating a kubernetes client @ 02/21/24 00:38:30.258
  Feb 21 00:38:30.258: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption @ 02/21/24 00:38:30.258
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:30.275
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:30.277
  STEP: Creating a pdb that targets all three pods in a test replica set @ 02/21/24 00:38:30.279
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:30.287
  E0221 00:38:30.564158      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:31.565317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: First trying to evict a pod which shouldn't be evictable @ 02/21/24 00:38:32.323
  STEP: Waiting for all pods to be running @ 02/21/24 00:38:32.323
  Feb 21 00:38:32.332: INFO: pods: 0 < 3
  E0221 00:38:32.565294      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:33.565701      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: locating a running pod @ 02/21/24 00:38:34.341
  STEP: Updating the pdb to allow a pod to be evicted @ 02/21/24 00:38:34.363
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:34.391
  E0221 00:38:34.565872      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:35.567001      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 02/21/24 00:38:36.405
  STEP: Waiting for all pods to be running @ 02/21/24 00:38:36.405
  STEP: Waiting for the pdb to observed all healthy pods @ 02/21/24 00:38:36.413
  STEP: Patching the pdb to disallow a pod to be evicted @ 02/21/24 00:38:36.518
  E0221 00:38:36.567107      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:36.596
  E0221 00:38:37.568284      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:38.568499      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for all pods to be running @ 02/21/24 00:38:38.607
  STEP: locating a running pod @ 02/21/24 00:38:38.616
  STEP: Deleting the pdb to allow a pod to be evicted @ 02/21/24 00:38:38.64
  STEP: Waiting for the pdb to be deleted @ 02/21/24 00:38:38.66
  STEP: Trying to evict the same pod we tried earlier which should now be evictable @ 02/21/24 00:38:38.665
  STEP: Waiting for all pods to be running @ 02/21/24 00:38:38.665
  Feb 21 00:38:38.698: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-9857" for this suite. @ 02/21/24 00:38:38.702
• [8.455 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should update labels on modification [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:131
  STEP: Creating a kubernetes client @ 02/21/24 00:38:38.714
  Feb 21 00:38:38.714: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:38:38.714
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:38.731
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:38.733
  STEP: Creating the pod @ 02/21/24 00:38:38.736
  E0221 00:38:39.568726      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:40.569132      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:41.309: INFO: Successfully updated pod "labelsupdatee6b675f0-11cb-4e74-bcb5-b9ac57b82c3a"
  E0221 00:38:41.569912      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:42.570421      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:43.571358      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:44.571994      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:45.350: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4185" for this suite. @ 02/21/24 00:38:45.353
• [6.655 seconds]
------------------------------
SSSSSSSSSSS
------------------------------
[sig-apps] DisruptionController Listing PodDisruptionBudgets for all namespaces should list and delete a collection of PodDisruptionBudgets [Conformance]
test/e2e/apps/disruption.go:87
  STEP: Creating a kubernetes client @ 02/21/24 00:38:45.37
  Feb 21 00:38:45.371: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption @ 02/21/24 00:38:45.372
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:45.416
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:45.419
  STEP: Creating a kubernetes client @ 02/21/24 00:38:45.421
  Feb 21 00:38:45.421: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename disruption-2 @ 02/21/24 00:38:45.422
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:45.439
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:45.442
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:45.458
  E0221 00:38:45.572578      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:46.572750      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:47.488
  E0221 00:38:47.573719      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:48.574368      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the pdb to be processed @ 02/21/24 00:38:49.515
  E0221 00:38:49.574514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:50.574771      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: listing a collection of PDBs across all namespaces @ 02/21/24 00:38:51.538
  STEP: listing a collection of PDBs in namespace disruption-7542 @ 02/21/24 00:38:51.553
  STEP: deleting a collection of PDBs @ 02/21/24 00:38:51.555
  E0221 00:38:51.575675      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for the PDB collection to be deleted @ 02/21/24 00:38:51.577
  Feb 21 00:38:51.579: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  Feb 21 00:38:51.581: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "disruption-2-8974" for this suite. @ 02/21/24 00:38:51.583
  STEP: Destroying namespace "disruption-7542" for this suite. @ 02/21/24 00:38:51.589
• [6.227 seconds]
------------------------------
SSSSS
------------------------------
[sig-api-machinery] CustomResourcePublishOpenAPI [Privileged:ClusterAdmin] removes definition from spec when one version gets changed to not be served [Conformance]
test/e2e/apimachinery/crd_publish_openapi.go:442
  STEP: Creating a kubernetes client @ 02/21/24 00:38:51.597
  Feb 21 00:38:51.597: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename crd-publish-openapi @ 02/21/24 00:38:51.598
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:51.621
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:51.623
  STEP: set up a multi version CRD @ 02/21/24 00:38:51.625
  Feb 21 00:38:51.625: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:38:52.575934      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:53.575977      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:54.577058      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: mark a version not serverd @ 02/21/24 00:38:54.856
  STEP: check the unserved version gets removed @ 02/21/24 00:38:54.877
  E0221 00:38:55.578096      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check the other version is not changed @ 02/21/24 00:38:55.684
  E0221 00:38:56.578423      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:57.579202      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:38:58.256: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "crd-publish-openapi-240" for this suite. @ 02/21/24 00:38:58.266
• [6.676 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide container's memory limit [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:208
  STEP: Creating a kubernetes client @ 02/21/24 00:38:58.274
  Feb 21 00:38:58.274: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:38:58.274
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:38:58.292
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:38:58.293
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:38:58.294
  E0221 00:38:58.580036      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:38:59.580960      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:00.581800      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:01.582419      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:39:02.324
  Feb 21 00:39:02.326: INFO: Trying to get logs from node control-plane pod downwardapi-volume-4d5d5df8-41b0-45b1-81ae-40920a40a879 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:39:02.329
  Feb 21 00:39:02.348: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-4838" for this suite. @ 02/21/24 00:39:02.35
• [4.123 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Secrets should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/secrets_volume.go:57
  STEP: Creating a kubernetes client @ 02/21/24 00:39:02.399
  Feb 21 00:39:02.399: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename secrets @ 02/21/24 00:39:02.399
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:02.427
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:02.428
  STEP: Creating secret with name secret-test-68fd20df-defb-462d-a241-df6de61574be @ 02/21/24 00:39:02.43
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:39:02.436
  E0221 00:39:02.582828      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:03.583319      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:04.583925      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:05.583975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:39:06.457
  Feb 21 00:39:06.464: INFO: Trying to get logs from node control-plane pod pod-secrets-3261113a-f37e-4111-9faf-aec3135b7967 container secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:39:06.519
  Feb 21 00:39:06.562: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "secrets-9587" for this suite. @ 02/21/24 00:39:06.564
• [4.171 seconds]
------------------------------
S
------------------------------
[sig-api-machinery] FieldValidation should create/apply a valid CR for CRD with validation schema [Conformance]
test/e2e/apimachinery/field_validation.go:168
  STEP: Creating a kubernetes client @ 02/21/24 00:39:06.57
  Feb 21 00:39:06.570: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename field-validation @ 02/21/24 00:39:06.57
  E0221 00:39:06.584772      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:06.587
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:06.588
  Feb 21 00:39:06.590: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  E0221 00:39:07.584867      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:08.585381      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  W0221 00:39:09.126451      22 warnings.go:70] unknown field "alpha"
  W0221 00:39:09.126515      22 warnings.go:70] unknown field "beta"
  W0221 00:39:09.126529      22 warnings.go:70] unknown field "delta"
  W0221 00:39:09.126540      22 warnings.go:70] unknown field "epsilon"
  W0221 00:39:09.126552      22 warnings.go:70] unknown field "gamma"
  E0221 00:39:09.586196      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:09.690: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "field-validation-6986" for this suite. @ 02/21/24 00:39:09.7
• [3.138 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] CronJob should support CronJob API operations [Conformance]
test/e2e/apps/cronjob.go:324
  STEP: Creating a kubernetes client @ 02/21/24 00:39:09.709
  Feb 21 00:39:09.709: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename cronjob @ 02/21/24 00:39:09.709
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:09.726
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:09.727
  STEP: Creating a cronjob @ 02/21/24 00:39:09.729
  STEP: creating @ 02/21/24 00:39:09.729
  STEP: getting @ 02/21/24 00:39:09.736
  STEP: listing @ 02/21/24 00:39:09.737
  STEP: watching @ 02/21/24 00:39:09.739
  Feb 21 00:39:09.739: INFO: starting watch
  STEP: cluster-wide listing @ 02/21/24 00:39:09.739
  STEP: cluster-wide watching @ 02/21/24 00:39:09.74
  Feb 21 00:39:09.740: INFO: starting watch
  STEP: patching @ 02/21/24 00:39:09.741
  STEP: updating @ 02/21/24 00:39:09.747
  Feb 21 00:39:09.756: INFO: waiting for watch events with expected annotations
  Feb 21 00:39:09.756: INFO: saw patched and updated annotations
  STEP: patching /status @ 02/21/24 00:39:09.756
  STEP: updating /status @ 02/21/24 00:39:09.762
  STEP: get /status @ 02/21/24 00:39:09.766
  STEP: deleting @ 02/21/24 00:39:09.768
  STEP: deleting a collection @ 02/21/24 00:39:09.799
  Feb 21 00:39:09.821: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "cronjob-7564" for this suite. @ 02/21/24 00:39:09.827
• [0.135 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-scheduling] LimitRange should list, patch and delete a LimitRange by collection [Conformance]
test/e2e/scheduling/limit_range.go:239
  STEP: Creating a kubernetes client @ 02/21/24 00:39:09.848
  Feb 21 00:39:09.848: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename limitrange @ 02/21/24 00:39:09.849
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:09.874
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:09.876
  STEP: Creating LimitRange "e2e-limitrange-95rcf" in namespace "limitrange-1608" @ 02/21/24 00:39:09.88
  STEP: Creating another limitRange in another namespace @ 02/21/24 00:39:09.887
  Feb 21 00:39:09.901: INFO: Namespace "e2e-limitrange-95rcf-594" created
  Feb 21 00:39:09.902: INFO: Creating LimitRange "e2e-limitrange-95rcf" in namespace "e2e-limitrange-95rcf-594"
  STEP: Listing all LimitRanges with label "e2e-test=e2e-limitrange-95rcf" @ 02/21/24 00:39:09.91
  Feb 21 00:39:09.912: INFO: Found 2 limitRanges
  STEP: Patching LimitRange "e2e-limitrange-95rcf" in "limitrange-1608" namespace @ 02/21/24 00:39:09.912
  Feb 21 00:39:09.920: INFO: LimitRange "e2e-limitrange-95rcf" has been patched
  STEP: Delete LimitRange "e2e-limitrange-95rcf" by Collection with labelSelector: "e2e-limitrange-95rcf=patched" @ 02/21/24 00:39:09.92
  STEP: Confirm that the limitRange "e2e-limitrange-95rcf" has been deleted @ 02/21/24 00:39:09.926
  Feb 21 00:39:09.926: INFO: Requesting list of LimitRange to confirm quantity
  Feb 21 00:39:09.929: INFO: Found 0 LimitRange with label "e2e-limitrange-95rcf=patched"
  Feb 21 00:39:09.929: INFO: LimitRange "e2e-limitrange-95rcf" has been deleted.
  STEP: Confirm that a single LimitRange still exists with label "e2e-test=e2e-limitrange-95rcf" @ 02/21/24 00:39:09.929
  Feb 21 00:39:09.930: INFO: Found 1 limitRange
  Feb 21 00:39:09.930: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "limitrange-1608" for this suite. @ 02/21/24 00:39:09.933
  STEP: Destroying namespace "e2e-limitrange-95rcf-594" for this suite. @ 02/21/24 00:39:09.938
• [0.098 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] ResourceQuota should create a ResourceQuota and capture the life of a service. [Conformance]
test/e2e/apimachinery/resource_quota.go:101
  STEP: Creating a kubernetes client @ 02/21/24 00:39:09.946
  Feb 21 00:39:09.946: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename resourcequota @ 02/21/24 00:39:09.947
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:09.963
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:09.964
  STEP: Counting existing ResourceQuota @ 02/21/24 00:39:09.966
  E0221 00:39:10.586528      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:11.587091      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:12.587722      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:13.588642      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:14.588966      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a ResourceQuota @ 02/21/24 00:39:14.97
  STEP: Ensuring resource quota status is calculated @ 02/21/24 00:39:14.978
  E0221 00:39:15.589299      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:16.589678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Creating a Service @ 02/21/24 00:39:16.981
  STEP: Creating a NodePort Service @ 02/21/24 00:39:17.011
  STEP: Not allowing a LoadBalancer Service with NodePort to be created that exceeds remaining quota @ 02/21/24 00:39:17.036
  STEP: Ensuring resource quota status captures service creation @ 02/21/24 00:39:17.056
  E0221 00:39:17.589975      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:18.590780      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Deleting Services @ 02/21/24 00:39:19.063
  STEP: Ensuring resource quota status released usage @ 02/21/24 00:39:19.132
  E0221 00:39:19.591056      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:20.591494      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:21.140: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "resourcequota-2002" for this suite. @ 02/21/24 00:39:21.148
• [11.221 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-network] Proxy version v1 A set of valid responses are returned for both pod and service Proxy [Conformance]
test/e2e/network/proxy.go:380
  STEP: Creating a kubernetes client @ 02/21/24 00:39:21.17
  Feb 21 00:39:21.170: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename proxy @ 02/21/24 00:39:21.171
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:21.227
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:21.23
  Feb 21 00:39:21.254: INFO: Creating pod...
  E0221 00:39:21.592177      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:22.593021      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:23.270: INFO: Creating service...
  Feb 21 00:39:23.299: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=DELETE
  Feb 21 00:39:23.311: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Feb 21 00:39:23.311: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=OPTIONS
  Feb 21 00:39:23.322: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Feb 21 00:39:23.322: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=PATCH
  Feb 21 00:39:23.329: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Feb 21 00:39:23.329: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=POST
  Feb 21 00:39:23.333: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Feb 21 00:39:23.333: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=PUT
  Feb 21 00:39:23.336: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Feb 21 00:39:23.337: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=DELETE
  Feb 21 00:39:23.340: INFO: http.Client request:DELETE | StatusCode:200 | Response:foo | Method:DELETE
  Feb 21 00:39:23.340: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=OPTIONS
  Feb 21 00:39:23.344: INFO: http.Client request:OPTIONS | StatusCode:200 | Response:foo | Method:OPTIONS
  Feb 21 00:39:23.344: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=PATCH
  Feb 21 00:39:23.347: INFO: http.Client request:PATCH | StatusCode:200 | Response:foo | Method:PATCH
  Feb 21 00:39:23.347: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=POST
  Feb 21 00:39:23.350: INFO: http.Client request:POST | StatusCode:200 | Response:foo | Method:POST
  Feb 21 00:39:23.350: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=PUT
  Feb 21 00:39:23.352: INFO: http.Client request:PUT | StatusCode:200 | Response:foo | Method:PUT
  Feb 21 00:39:23.352: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=GET
  Feb 21 00:39:23.354: INFO: http.Client request:GET StatusCode:301
  Feb 21 00:39:23.354: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=GET
  Feb 21 00:39:23.355: INFO: http.Client request:GET StatusCode:301
  Feb 21 00:39:23.355: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/pods/agnhost/proxy?method=HEAD
  Feb 21 00:39:23.357: INFO: http.Client request:HEAD StatusCode:301
  Feb 21 00:39:23.357: INFO: Starting http.Client for https://10.152.183.1:443/api/v1/namespaces/proxy-147/services/e2e-proxy-test-service/proxy?method=HEAD
  Feb 21 00:39:23.359: INFO: http.Client request:HEAD StatusCode:301
  Feb 21 00:39:23.359: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "proxy-147" for this suite. @ 02/21/24 00:39:23.361
• [2.198 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-apps] Daemon set [Serial] should run and stop simple daemon [Conformance]
test/e2e/apps/daemon_set.go:177
  STEP: Creating a kubernetes client @ 02/21/24 00:39:23.368
  Feb 21 00:39:23.368: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename daemonsets @ 02/21/24 00:39:23.369
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:23.386
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:23.387
  STEP: Creating simple DaemonSet "daemon-set" @ 02/21/24 00:39:23.399
  STEP: Check that daemon pods launch on every node of the cluster. @ 02/21/24 00:39:23.404
  Feb 21 00:39:23.408: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:39:23.408: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:39:23.594183      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:24.424: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:39:24.424: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:39:24.595377      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:25.424: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:39:25.424: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Stop a daemon pod, check that the daemon pod is revived. @ 02/21/24 00:39:25.429
  Feb 21 00:39:25.453: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:39:25.454: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:39:25.595590      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:26.470: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:39:26.470: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:39:26.596153      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:27.471: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 1
  Feb 21 00:39:27.471: INFO: Node worker is running 0 daemon pod, expected 1
  E0221 00:39:27.596804      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:28.458: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 2
  Feb 21 00:39:28.458: INFO: Number of running nodes: 2, number of available pods: 2 in daemonset daemon-set
  STEP: Deleting DaemonSet "daemon-set" @ 02/21/24 00:39:28.46
  STEP: deleting DaemonSet.extensions daemon-set in namespace daemonsets-1729, will wait for the garbage collector to delete the pods @ 02/21/24 00:39:28.46
  Feb 21 00:39:28.517: INFO: Deleting DaemonSet.extensions daemon-set took: 5.204706ms
  E0221 00:39:28.597812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:28.618: INFO: Terminating DaemonSet.extensions daemon-set pods took: 100.400657ms
  E0221 00:39:29.598871      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:30.599611      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:31.029: INFO: Number of nodes with available pods controlled by daemonset daemon-set: 0
  Feb 21 00:39:31.029: INFO: Number of running nodes: 0, number of available pods: 0 in daemonset daemon-set
  Feb 21 00:39:31.038: INFO: daemonset: {"kind":"DaemonSetList","apiVersion":"apps/v1","metadata":{"resourceVersion":"38215"},"items":null}

  Feb 21 00:39:31.047: INFO: pods: {"kind":"PodList","apiVersion":"v1","metadata":{"resourceVersion":"38215"},"items":null}

  Feb 21 00:39:31.069: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "daemonsets-1729" for this suite. @ 02/21/24 00:39:31.081
• [7.724 seconds]
------------------------------
SSSSSSSSSSSSSSSSS
------------------------------
[sig-api-machinery] Watchers should be able to restart watching from the last resource version observed by the previous watch [Conformance]
test/e2e/apimachinery/watch.go:191
  STEP: Creating a kubernetes client @ 02/21/24 00:39:31.094
  Feb 21 00:39:31.094: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename watch @ 02/21/24 00:39:31.094
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:31.109
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:31.11
  STEP: creating a watch on configmaps @ 02/21/24 00:39:31.113
  STEP: creating a new configmap @ 02/21/24 00:39:31.113
  STEP: modifying the configmap once @ 02/21/24 00:39:31.118
  STEP: closing the watch once it receives two notifications @ 02/21/24 00:39:31.124
  Feb 21 00:39:31.124: INFO: Got : ADDED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5012  120b9976-b5ba-4599-9550-bc1ef0d1d0c8 38220 0 2024-02-21 00:39:31 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-02-21 00:39:31 +0000 UTC FieldsV1 {"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 21 00:39:31.124: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5012  120b9976-b5ba-4599-9550-bc1ef0d1d0c8 38221 0 2024-02-21 00:39:31 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-02-21 00:39:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 1,},BinaryData:map[string][]byte{},Immutable:nil,}
  STEP: modifying the configmap a second time, while the watch is closed @ 02/21/24 00:39:31.124
  STEP: creating a new watch on configmaps from the last resource version observed by the first watch @ 02/21/24 00:39:31.13
  STEP: deleting the configmap @ 02/21/24 00:39:31.131
  STEP: Expecting to observe notifications for all changes to the configmap since the first watch closed @ 02/21/24 00:39:31.138
  Feb 21 00:39:31.138: INFO: Got : MODIFIED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5012  120b9976-b5ba-4599-9550-bc1ef0d1d0c8 38222 0 2024-02-21 00:39:31 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-02-21 00:39:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 21 00:39:31.138: INFO: Got : DELETED &ConfigMap{ObjectMeta:{e2e-watch-test-watch-closed  watch-5012  120b9976-b5ba-4599-9550-bc1ef0d1d0c8 38223 0 2024-02-21 00:39:31 +0000 UTC <nil> <nil> map[watch-this-configmap:watch-closed-and-restarted] map[] [] [] [{e2e.test Update v1 2024-02-21 00:39:31 +0000 UTC FieldsV1 {"f:data":{".":{},"f:mutation":{}},"f:metadata":{"f:labels":{".":{},"f:watch-this-configmap":{}}}} }]},Data:map[string]string{mutation: 2,},BinaryData:map[string][]byte{},Immutable:nil,}
  Feb 21 00:39:31.138: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "watch-5012" for this suite. @ 02/21/24 00:39:31.14
• [0.051 seconds]
------------------------------
SSSSSSSSSSSSS
------------------------------
[sig-storage] Projected configMap should be consumable from pods in volume with mappings and Item mode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_configmap.go:99
  STEP: Creating a kubernetes client @ 02/21/24 00:39:31.145
  Feb 21 00:39:31.145: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:39:31.145
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:31.159
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:31.161
  STEP: Creating configMap with name projected-configmap-test-volume-map-735ba384-7375-479d-aab1-d10517659a6e @ 02/21/24 00:39:31.163
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:39:31.168
  E0221 00:39:31.600052      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:32.600825      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:33.601317      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:34.601853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:39:35.194
  Feb 21 00:39:35.201: INFO: Trying to get logs from node control-plane pod pod-projected-configmaps-318df4ef-7beb-4b35-b9a0-f061796cf605 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:39:35.216
  Feb 21 00:39:35.263: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-5369" for this suite. @ 02/21/24 00:39:35.271
• [4.146 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-network] Services should be able to create a functioning NodePort service [Conformance]
test/e2e/network/service.go:1280
  STEP: Creating a kubernetes client @ 02/21/24 00:39:35.293
  Feb 21 00:39:35.293: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename services @ 02/21/24 00:39:35.294
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:35.318
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:35.319
  STEP: creating service nodeport-test with type=NodePort in namespace services-291 @ 02/21/24 00:39:35.321
  STEP: creating replication controller nodeport-test in namespace services-291 @ 02/21/24 00:39:35.338
  I0221 00:39:35.344607      22 runners.go:197] Created replication controller with name: nodeport-test, namespace: services-291, replica count: 2
  E0221 00:39:35.602175      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:36.602459      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:37.603537      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  I0221 00:39:38.396310      22 runners.go:197] nodeport-test Pods: 2 out of 2 created, 2 running, 0 pending, 0 waiting, 0 inactive, 0 terminating, 0 unknown, 0 runningButNotReady 
  Feb 21 00:39:38.396: INFO: Creating new exec pod
  E0221 00:39:38.603744      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:39.604929      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:40.605192      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:41.429: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 nodeport-test 80'
  Feb 21 00:39:41.590: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 nodeport-test 80\nConnection to nodeport-test 80 port [tcp/http] succeeded!\n"
  Feb 21 00:39:41.590: INFO: stdout: "nodeport-test-s4mw2"
  Feb 21 00:39:41.590: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.75 80'
  E0221 00:39:41.605653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:41.665: INFO: stderr: "+ + echonc hostName -v\n -t -w 2 10.152.183.75 80\nConnection to 10.152.183.75 80 port [tcp/http] succeeded!\n"
  Feb 21 00:39:41.665: INFO: stdout: ""
  E0221 00:39:42.606123      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:42.666: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.152.183.75 80'
  Feb 21 00:39:42.742: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.152.183.75 80\nConnection to 10.152.183.75 80 port [tcp/http] succeeded!\n"
  Feb 21 00:39:42.742: INFO: stdout: "nodeport-test-zf9bv"
  Feb 21 00:39:42.742: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31476'
  Feb 21 00:39:42.818: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31476\nConnection to 10.100.138.108 31476 port [tcp/*] succeeded!\n"
  Feb 21 00:39:42.818: INFO: stdout: ""
  E0221 00:39:43.606637      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:43.819: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31476'
  Feb 21 00:39:43.934: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31476\nConnection to 10.100.138.108 31476 port [tcp/*] succeeded!\n"
  Feb 21 00:39:43.934: INFO: stdout: ""
  E0221 00:39:44.607101      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:44.818: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.108 31476'
  Feb 21 00:39:44.939: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.108 31476\nConnection to 10.100.138.108 31476 port [tcp/*] succeeded!\n"
  Feb 21 00:39:44.939: INFO: stdout: "nodeport-test-s4mw2"
  Feb 21 00:39:44.939: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.210 31476'
  Feb 21 00:39:45.010: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.210 31476\nConnection to 10.100.138.210 31476 port [tcp/*] succeeded!\n"
  Feb 21 00:39:45.010: INFO: stdout: ""
  E0221 00:39:45.608118      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:46.011: INFO: Running '/usr/local/bin/kubectl --kubeconfig=/tmp/kubeconfig-1236835214 --namespace=services-291 exec execpodvdfnx -- /bin/sh -x -c echo hostName | nc -v -t -w 2 10.100.138.210 31476'
  Feb 21 00:39:46.142: INFO: stderr: "+ echo hostName\n+ nc -v -t -w 2 10.100.138.210 31476\nConnection to 10.100.138.210 31476 port [tcp/*] succeeded!\n"
  Feb 21 00:39:46.142: INFO: stdout: "nodeport-test-zf9bv"
  Feb 21 00:39:46.142: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "services-291" for this suite. @ 02/21/24 00:39:46.144
• [10.856 seconds]
------------------------------
SSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected downwardAPI should provide node allocatable (cpu) as default cpu limit if the limit is not set [NodeConformance] [Conformance]
test/e2e/common/storage/projected_downwardapi.go:250
  STEP: Creating a kubernetes client @ 02/21/24 00:39:46.15
  Feb 21 00:39:46.150: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:39:46.151
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:46.169
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:46.171
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:39:46.172
  E0221 00:39:46.609111      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:47.609664      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:48.610720      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:49.611038      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:39:50.242
  Feb 21 00:39:50.266: INFO: Trying to get logs from node control-plane pod downwardapi-volume-d315a791-06b4-45c6-aea4-ef0b991e80bb container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:39:50.27
  Feb 21 00:39:50.287: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-376" for this suite. @ 02/21/24 00:39:50.289
• [4.145 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Container Runtime blackbox test on terminated container should report termination message from log output if TerminationMessagePolicy FallbackToLogsOnError is set [NodeConformance] [Conformance]
test/e2e/common/node/runtime.go:216
  STEP: Creating a kubernetes client @ 02/21/24 00:39:50.296
  Feb 21 00:39:50.296: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-runtime @ 02/21/24 00:39:50.296
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:50.311
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:50.312
  STEP: create the container @ 02/21/24 00:39:50.314
  W0221 00:39:50.321062      22 warnings.go:70] metadata.name: this is used in the Pod's hostname, which can result in surprising behavior; a DNS label is recommended: [must be no more than 63 characters]
  STEP: wait for the container to reach Failed @ 02/21/24 00:39:50.321
  E0221 00:39:50.611230      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:51.611385      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:52.612166      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: get the container status @ 02/21/24 00:39:53.359
  STEP: the container should be terminated @ 02/21/24 00:39:53.371
  STEP: the termination message should be set @ 02/21/24 00:39:53.371
  Feb 21 00:39:53.372: INFO: Expected: &{DONE} to match Container's Termination Message: DONE --
  STEP: delete the container @ 02/21/24 00:39:53.372
  Feb 21 00:39:53.400: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-runtime-3163" for this suite. @ 02/21/24 00:39:53.409
• [3.121 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Downward API volume should provide container's memory request [NodeConformance] [Conformance]
test/e2e/common/storage/downwardapi_volume.go:236
  STEP: Creating a kubernetes client @ 02/21/24 00:39:53.417
  Feb 21 00:39:53.417: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename downward-api @ 02/21/24 00:39:53.417
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:53.434
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:53.436
  STEP: Creating a pod to test downward API volume plugin @ 02/21/24 00:39:53.437
  E0221 00:39:53.612473      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:54.612574      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:55.613409      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:56.614029      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:39:57.456
  Feb 21 00:39:57.464: INFO: Trying to get logs from node control-plane pod downwardapi-volume-a733af0d-deb6-4a18-acef-e2c592d61520 container client-container: <nil>
  STEP: delete the pod @ 02/21/24 00:39:57.481
  Feb 21 00:39:57.530: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "downward-api-2154" for this suite. @ 02/21/24 00:39:57.538
• [4.138 seconds]
------------------------------
SSSS
------------------------------
[sig-api-machinery] Aggregator Should be able to support the 1.17 Sample API Server using the current Aggregator [Conformance]
test/e2e/apimachinery/aggregator.go:96
  STEP: Creating a kubernetes client @ 02/21/24 00:39:57.556
  Feb 21 00:39:57.556: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename aggregator @ 02/21/24 00:39:57.557
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:39:57.577
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:39:57.579
  Feb 21 00:39:57.581: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Registering the sample API server. @ 02/21/24 00:39:57.581
  E0221 00:39:57.614458      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:57.701: INFO: Found ClusterRoles; assuming RBAC is enabled.
  Feb 21 00:39:57.724: INFO: new replicaset for deployment "sample-apiserver-deployment" is yet to be created
  E0221 00:39:58.614853      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:39:59.615290      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:39:59.791: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:00.615514      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:01.615621      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:01.798: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:02.616242      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:03.616715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:03.801: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:04.617148      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:05.618102      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:05.795: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:06.618116      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:07.618255      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:07.794: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:08.618702      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:09.618747      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:09.794: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:10.620025      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:11.620657      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:11.799: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:12.620715      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:13.621254      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:13.799: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:14.622184      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:15.623275      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:15.794: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:16.623347      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:17.623610      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:17.799: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:18.624113      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:19.624257      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:19.799: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:20.624812      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:21.625126      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:21.799: INFO: deployment status: v1.DeploymentStatus{ObservedGeneration:1, Replicas:1, UpdatedReplicas:1, ReadyReplicas:0, AvailableReplicas:0, UnavailableReplicas:1, Conditions:[]v1.DeploymentCondition{v1.DeploymentCondition{Type:"Available", Status:"False", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"MinimumReplicasUnavailable", Message:"Deployment does not have minimum availability."}, v1.DeploymentCondition{Type:"Progressing", Status:"True", LastUpdateTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), LastTransitionTime:time.Date(2024, time.February, 21, 0, 39, 57, 0, time.Local), Reason:"ReplicaSetUpdated", Message:"ReplicaSet \"sample-apiserver-deployment-99565549d\" is progressing."}}, CollisionCount:(*int32)(nil)}
  E0221 00:40:22.625653      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:23.626463      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:23.933: INFO: Waited 115.407035ms for the sample-apiserver to be ready to handle requests.
  STEP: Read Status for v1alpha1.wardle.example.com @ 02/21/24 00:40:23.991
  STEP: kubectl patch apiservice v1alpha1.wardle.example.com -p '{"spec":{"versionPriority": 400}}' @ 02/21/24 00:40:23.995
  STEP: List APIServices @ 02/21/24 00:40:24.008
  Feb 21 00:40:24.017: INFO: Found v1alpha1.wardle.example.com in APIServiceList
  STEP: Adding a label to the APIService @ 02/21/24 00:40:24.017
  Feb 21 00:40:24.038: INFO: APIService labels: map[e2e-apiservice:patched]
  STEP: Updating APIService Status @ 02/21/24 00:40:24.038
  Feb 21 00:40:24.049: INFO: updatedStatus.Conditions: []v1.APIServiceCondition{v1.APIServiceCondition{Type:"Available", Status:"True", LastTransitionTime:time.Date(2024, time.February, 21, 0, 40, 23, 0, time.Local), Reason:"Passed", Message:"all checks passed"}, v1.APIServiceCondition{Type:"StatusUpdated", Status:"True", LastTransitionTime:time.Date(1, time.January, 1, 0, 0, 0, 0, time.UTC), Reason:"E2E", Message:"Set from e2e test"}}
  STEP: Confirm that v1alpha1.wardle.example.com /status was updated @ 02/21/24 00:40:24.049
  Feb 21 00:40:24.053: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {Available True 2024-02-21 00:40:23 +0000 UTC Passed all checks passed}
  Feb 21 00:40:24.053: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[e2e-apiservice:patched] & Condition: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 21 00:40:24.053: INFO: Found updated status condition for v1alpha1.wardle.example.com
  STEP: Replace APIService v1alpha1.wardle.example.com @ 02/21/24 00:40:24.053
  Feb 21 00:40:24.064: INFO: Found updated apiService label for "v1alpha1.wardle.example.com"
  STEP: Delete APIService "dynamic-flunder-1762980011" @ 02/21/24 00:40:24.064
  STEP: Recreating test-flunder before removing endpoint via deleteCollection @ 02/21/24 00:40:24.071
  STEP: Read v1alpha1.wardle.example.com /status before patching it @ 02/21/24 00:40:24.076
  STEP: Patch APIService Status @ 02/21/24 00:40:24.078
  STEP: Confirm that v1alpha1.wardle.example.com /status was patched @ 02/21/24 00:40:24.084
  Feb 21 00:40:24.086: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {Available True 2024-02-21 00:40:23 +0000 UTC Passed all checks passed}
  Feb 21 00:40:24.086: INFO: Observed APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusUpdated True 0001-01-01 00:00:00 +0000 UTC E2E Set from e2e test}
  Feb 21 00:40:24.086: INFO: Found APIService v1alpha1.wardle.example.com with Labels: map[v1alpha1.wardle.example.com:updated] & Conditions: {StatusPatched True 0001-01-01 00:00:00 +0000 UTC E2E Set by e2e test}
  Feb 21 00:40:24.086: INFO: Found patched status condition for v1alpha1.wardle.example.com
  STEP: APIService deleteCollection with labelSelector: "e2e-apiservice=patched" @ 02/21/24 00:40:24.086
  STEP: Confirm that the generated APIService has been deleted @ 02/21/24 00:40:24.089
  Feb 21 00:40:24.089: INFO: Requesting list of APIServices to confirm quantity
  Feb 21 00:40:24.091: INFO: Found 0 APIService with label "e2e-apiservice=patched"
  Feb 21 00:40:24.091: INFO: APIService v1alpha1.wardle.example.com has been deleted.
  Feb 21 00:40:24.184: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "aggregator-8037" for this suite. @ 02/21/24 00:40:24.205
• [26.717 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] ConfigMap should be consumable from pods in volume [NodeConformance] [Conformance]
test/e2e/common/storage/configmap_volume.go:47
  STEP: Creating a kubernetes client @ 02/21/24 00:40:24.275
  Feb 21 00:40:24.275: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename configmap @ 02/21/24 00:40:24.278
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:40:24.333
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:40:24.341
  STEP: Creating configMap with name configmap-test-volume-6d54808e-f7ff-484d-a416-44223055c1ad @ 02/21/24 00:40:24.35
  STEP: Creating a pod to test consume configMaps @ 02/21/24 00:40:24.427
  E0221 00:40:24.626881      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:25.628175      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:26.628779      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:27.629208      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:40:28.582
  Feb 21 00:40:28.588: INFO: Trying to get logs from node control-plane pod pod-configmaps-062320cd-dbc1-479f-b4a3-597e11e30db8 container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:40:28.604
  E0221 00:40:28.629986      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:28.655: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "configmap-2119" for this suite. @ 02/21/24 00:40:28.662
• [4.403 seconds]
------------------------------
SSSS
------------------------------
[sig-auth] ServiceAccounts should mount projected service account token [Conformance]
test/e2e/auth/service_accounts.go:275
  STEP: Creating a kubernetes client @ 02/21/24 00:40:28.681
  Feb 21 00:40:28.681: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename svcaccounts @ 02/21/24 00:40:28.683
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:40:28.713
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:40:28.716
  STEP: Creating a pod to test service account token:  @ 02/21/24 00:40:28.718
  E0221 00:40:29.630634      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:30.631956      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:31.632185      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:32.632512      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:40:32.748
  Feb 21 00:40:32.755: INFO: Trying to get logs from node control-plane pod test-pod-a0ef1f59-9757-4567-a341-5bed045b7efd container agnhost-container: <nil>
  STEP: delete the pod @ 02/21/24 00:40:32.771
  Feb 21 00:40:32.818: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "svcaccounts-1735" for this suite. @ 02/21/24 00:40:32.826
• [4.158 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[sig-node] Probing container should be restarted with a /healthz http liveness probe [NodeConformance] [Conformance]
test/e2e/common/node/container_probe.go:168
  STEP: Creating a kubernetes client @ 02/21/24 00:40:32.851
  Feb 21 00:40:32.851: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-probe @ 02/21/24 00:40:32.852
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:40:32.869
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:40:32.871
  STEP: Creating pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335 @ 02/21/24 00:40:32.872
  E0221 00:40:33.632793      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:34.633415      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: checking the pod's current state and verifying that restartCount is present @ 02/21/24 00:40:34.89
  Feb 21 00:40:34.897: INFO: Initial restart count of pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f is 0
  Feb 21 00:40:34.903: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:35.633861      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:36.634628      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:36.912: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:37.634770      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:38.635098      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:38.919: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:39.635439      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:40.635869      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:40.929: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:41.635875      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:42.636446      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:42.936: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:43.637754      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:44.638030      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:44.945: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:45.639119      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:46.639822      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:46.953: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:47.640171      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:48.640870      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:48.961: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:49.641298      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:50.642505      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:50.969: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:51.642604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:52.642678      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:52.976: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  E0221 00:40:53.643604      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:54.644190      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  Feb 21 00:40:54.984: INFO: Get pod liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f in namespace container-probe-9335
  Feb 21 00:40:54.984: INFO: Restart count of pod container-probe-9335/liveness-2f39589f-3e3d-48de-8bc0-e1c51ec4be5f is now 1 (20.086384928s elapsed)
  Feb 21 00:40:54.984: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: deleting the pod @ 02/21/24 00:40:54.992
  STEP: Destroying namespace "container-probe-9335" for this suite. @ 02/21/24 00:40:55.032
• [22.194 seconds]
------------------------------
SSSSSSSSSSSSSS
------------------------------
[sig-node] Container Lifecycle Hook when create a pod with lifecycle hook should execute prestop http hook properly [NodeConformance] [Conformance]
test/e2e/common/node/lifecycle_hook.go:213
  STEP: Creating a kubernetes client @ 02/21/24 00:40:55.046
  Feb 21 00:40:55.046: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename container-lifecycle-hook @ 02/21/24 00:40:55.047
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:40:55.071
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:40:55.073
  STEP: create the container to handle the HTTPGet hook request. @ 02/21/24 00:40:55.076
  E0221 00:40:55.644150      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:56.644962      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: create the pod with lifecycle hook @ 02/21/24 00:40:57.089
  E0221 00:40:57.645674      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:40:58.646180      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: delete the pod with lifecycle hook @ 02/21/24 00:40:59.111
  E0221 00:40:59.647305      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:00.648092      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:01.648410      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:02.649010      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: check prestop hook @ 02/21/24 00:41:03.154
  Feb 21 00:41:03.163: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "container-lifecycle-hook-8090" for this suite. @ 02/21/24 00:41:03.166
• [8.128 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSS
------------------------------
[sig-storage] Projected secret should be consumable from pods in volume with defaultMode set [LinuxOnly] [NodeConformance] [Conformance]
test/e2e/common/storage/projected_secret.go:56
  STEP: Creating a kubernetes client @ 02/21/24 00:41:03.174
  Feb 21 00:41:03.174: INFO: >>> kubeConfig: /tmp/kubeconfig-1236835214
  STEP: Building a namespace api object, basename projected @ 02/21/24 00:41:03.175
  STEP: Waiting for a default service account to be provisioned in namespace @ 02/21/24 00:41:03.197
  STEP: Waiting for kube-root-ca.crt to be provisioned in namespace @ 02/21/24 00:41:03.2
  STEP: Creating projection with secret that has name projected-secret-test-ad89cd32-9c78-44a6-85c6-6036b8edadf9 @ 02/21/24 00:41:03.203
  STEP: Creating a pod to test consume secrets @ 02/21/24 00:41:03.209
  E0221 00:41:03.650165      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:04.650251      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:05.651167      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  E0221 00:41:06.652208      22 retrywatcher.go:129] "Watch failed" err="context canceled"
  STEP: Saw pod success @ 02/21/24 00:41:07.248
  Feb 21 00:41:07.250: INFO: Trying to get logs from node control-plane pod pod-projected-secrets-37112cec-9e33-424e-8477-82f958c9a784 container projected-secret-volume-test: <nil>
  STEP: delete the pod @ 02/21/24 00:41:07.279
  Feb 21 00:41:07.297: INFO: Waiting up to 7m0s for all (but 0) nodes to be ready
  STEP: Destroying namespace "projected-6385" for this suite. @ 02/21/24 00:41:07.299
• [4.130 seconds]
------------------------------
SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
------------------------------
[SynchronizedAfterSuite] 
test/e2e/e2e.go:88
  Feb 21 00:41:07.310: INFO: Running AfterSuite actions on node 1
  Feb 21 00:41:07.310: INFO: Skipping dumping logs from cluster
[SynchronizedAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e suite report
test/e2e/e2e_test.go:157
[ReportAfterSuite] PASSED [0.000 seconds]
------------------------------
[ReportAfterSuite] Kubernetes e2e JUnit report
test/e2e/framework/test_context.go:585
[ReportAfterSuite] PASSED [0.033 seconds]
------------------------------

Ran 380 of 7389 Specs in 6017.199 seconds
SUCCESS! -- 380 Passed | 0 Failed | 0 Pending | 7009 Skipped
PASS

Ginkgo ran 1 suite in 1h40m17.485556276s
Test Suite Passed
